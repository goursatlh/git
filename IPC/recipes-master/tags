!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANSWERER_FIELD_NUMBER	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final int ANSWERER_FIELD_NUMBER = 3;$/;"	f	class:QueryProtos.Answer
Acceptor	reactor/s04/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s04/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s05/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s05/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s06/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s06/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s07/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s07/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s08/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s08/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s09/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s09/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s10/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s10/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s11/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s11/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s12/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s12/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	reactor/s13/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	reactor/s13/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo
Acceptor	tpc/Acceptor.cc	/^Acceptor::Acceptor(const InetAddress& listenAddr)$/;"	f	class:Acceptor
Acceptor	tpc/Acceptor.h	/^class Acceptor : noncopyable$/;"	c
ActiveTimer	reactor/s11/TimerQueue.h	/^  typedef std::pair<Timer*, int64_t> ActiveTimer;$/;"	t	class:muduo::TimerQueue
ActiveTimer	reactor/s12/TimerQueue.h	/^  typedef std::pair<Timer*, int64_t> ActiveTimer;$/;"	t	class:muduo::TimerQueue
ActiveTimer	reactor/s13/TimerQueue.h	/^  typedef std::pair<Timer*, int64_t> ActiveTimer;$/;"	t	class:muduo::TimerQueue
ActiveTimerSet	reactor/s11/TimerQueue.h	/^  typedef std::set<ActiveTimer> ActiveTimerSet;$/;"	t	class:muduo::TimerQueue
ActiveTimerSet	reactor/s12/TimerQueue.h	/^  typedef std::set<ActiveTimer> ActiveTimerSet;$/;"	t	class:muduo::TimerQueue
ActiveTimerSet	reactor/s13/TimerQueue.h	/^  typedef std::set<ActiveTimer> ActiveTimerSet;$/;"	t	class:muduo::TimerQueue
Age	basic/counted_ptr_test.cc	/^struct Age$/;"	s	file:
Answer	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Answer(Builder builder) {$/;"	m	class:QueryProtos.Answer	file:
Answer	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Answer(boolean noInit) {}$/;"	m	class:QueryProtos.Answer	file:
Answer	protorpc/muduo/codec/tests/QueryProtos.java	/^  public static final class Answer extends$/;"	c	class:QueryProtos
AnswerOrBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^  public interface AnswerOrBuilder$/;"	i	class:QueryProtos
AreBothSpaces	algorithm/removeContinuousSpaces.cc	/^struct AreBothSpaces$/;"	s	file:
AsyncClient	protorpc/echo/EchoClient.java	/^        public AsyncClient(ChannelFactory channelFactory, SocketAddress server) {$/;"	m	class:EchoClient.AsyncClient
AsyncClient	protorpc/echo/EchoClient.java	/^    public static class AsyncClient {$/;"	c	class:EchoClient
AsyncLoggingBoundedQueue	logging/AsyncLoggingQueue.h	/^typedef AsyncLoggingT<string, muduo::BoundedBlockingQueue> AsyncLoggingBoundedQueue;$/;"	t	namespace:muduo
AsyncLoggingBoundedQueueL	logging/AsyncLoggingQueue.h	/^typedef AsyncLoggingT<LogMessage, muduo::BoundedBlockingQueue> AsyncLoggingBoundedQueueL;$/;"	t	namespace:muduo
AsyncLoggingDoubleBuffering	logging/AsyncLoggingDoubleBuffering.h	/^  AsyncLoggingDoubleBuffering(const string& basename, \/\/ FIXME: StringPiece$/;"	f	class:muduo::AsyncLoggingDoubleBuffering
AsyncLoggingDoubleBuffering	logging/AsyncLoggingDoubleBuffering.h	/^class AsyncLoggingDoubleBuffering : boost::noncopyable$/;"	c	namespace:muduo
AsyncLoggingT	logging/AsyncLoggingQueue.h	/^  AsyncLoggingT(const string& basename, \/\/ FIXME: StringPiece$/;"	f	class:muduo::AsyncLoggingT
AsyncLoggingT	logging/AsyncLoggingQueue.h	/^class AsyncLoggingT : boost::noncopyable$/;"	c	namespace:muduo
AsyncLoggingUnboundedQueue	logging/AsyncLoggingQueue.h	/^typedef AsyncLoggingT<string, muduo::BlockingQueue> AsyncLoggingUnboundedQueue;$/;"	t	namespace:muduo
AsyncLoggingUnboundedQueueL	logging/AsyncLoggingQueue.h	/^typedef AsyncLoggingT<LogMessage, muduo::BlockingQueue> AsyncLoggingUnboundedQueueL;$/;"	t	namespace:muduo
AtomicInt32	thread/Atomic.h	/^typedef detail::AtomicIntegerT<int32_t> AtomicInt32;$/;"	t	namespace:muduo
AtomicInt64	thread/Atomic.h	/^typedef detail::AtomicIntegerT<int64_t> AtomicInt64;$/;"	t	namespace:muduo
AtomicIntegerT	thread/Atomic.h	/^  AtomicIntegerT()$/;"	f	class:muduo::detail::AtomicIntegerT
AtomicIntegerT	thread/Atomic.h	/^class AtomicIntegerT : boost::noncopyable$/;"	c	namespace:muduo::detail
BASE_SRC	reactor/reactor.mk	/^BASE_SRC = ..\/..\/logging\/Logging.cc ..\/..\/logging\/LogStream.cc ..\/..\/thread\/Thread.cc ..\/..\/datetime\/Timestamp.cc$/;"	m
BASE_SRC	reactor/reactor_lib.mk	/^BASE_SRC = ..\/..\/logging\/Logging.cc ..\/..\/logging\/LogStream.cc ..\/..\/thread\/Thread.cc ..\/..\/datetime\/Timestamp.cc$/;"	m
BINARIES	datetime/Makefile	/^BINARIES=date_test date_unittest timestamp_unittest timezone_dump timezone_unittest$/;"	m
BINARIES	faketcp/Makefile	/^BINARIES=icmpecho rejectall acceptall discardall discardall2 echoall echoall2 connectmany$/;"	m
BINARIES	protobuf/Makefile	/^BINARIES=codec_test descriptor_test dispatcher_lite dispatcher$/;"	m
BINARIES	reactor/s00/Makefile	/^BINARIES = test1 test2$/;"	m
BINARIES	reactor/s01/Makefile	/^BINARIES = test1 test2 test3$/;"	m
BINARIES	reactor/s02/Makefile	/^BINARIES = test1 test2 test3 test4$/;"	m
BINARIES	reactor/s03/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6$/;"	m
BINARIES	reactor/s04/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7$/;"	m
BINARIES	reactor/s05/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8$/;"	m
BINARIES	reactor/s06/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8$/;"	m
BINARIES	reactor/s07/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8$/;"	m
BINARIES	reactor/s08/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8 test9 test10$/;"	m
BINARIES	reactor/s09/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 \\$/;"	m
BINARIES	reactor/s10/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 \\$/;"	m
BINARIES	reactor/s11/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 \\$/;"	m
BINARIES	reactor/s12/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 \\$/;"	m
BINARIES	reactor/s13/Makefile	/^BINARIES = test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 \\$/;"	m
BINARIES	utility/Makefile	/^BINARIES=cwc$/;"	m
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_add_other)$/;"	f
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_add_word)$/;"	f
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_devide_word)$/;"	f
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_initialize_string)$/;"	f
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_initialize_word)$/;"	f
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_lessthan)$/;"	f
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_multiply_other)$/;"	f
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_multiply_word)$/;"	f
BOOST_AUTO_TEST_CASE	basic/test.cc	/^BOOST_AUTO_TEST_CASE(test_sub)$/;"	f
BOOST_AUTO_TEST_CASE	logging/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamBooleans)$/;"	f
BOOST_AUTO_TEST_CASE	logging/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamFloats)$/;"	f
BOOST_AUTO_TEST_CASE	logging/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamFmts)$/;"	f
BOOST_AUTO_TEST_CASE	logging/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamIntegerLimits)$/;"	f
BOOST_AUTO_TEST_CASE	logging/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamIntegers)$/;"	f
BOOST_AUTO_TEST_CASE	logging/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamLong)$/;"	f
BOOST_AUTO_TEST_CASE	logging/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamStrings)$/;"	f
BOOST_AUTO_TEST_CASE	logging/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamVoid)$/;"	f
BOOST_AUTO_TEST_CASE	string/test.cc	/^BOOST_AUTO_TEST_CASE(testAppendAndAssign)$/;"	f
BOOST_AUTO_TEST_CASE	string/test.cc	/^BOOST_AUTO_TEST_CASE(testCopyAndAssignment)$/;"	f
BOOST_AUTO_TEST_CASE	string/test.cc	/^BOOST_AUTO_TEST_CASE(testEmptyString)$/;"	f
BOOST_AUTO_TEST_CASE	string/test.cc	/^BOOST_AUTO_TEST_CASE(testPushBack)$/;"	f
BOOST_AUTO_TEST_CASE	thread/test/SignalSlot_test.cc	/^BOOST_AUTO_TEST_CASE(testSignalSlotLife)$/;"	f
BOOST_AUTO_TEST_CASE	thread/test/SignalSlot_test.cc	/^BOOST_AUTO_TEST_CASE(testSignalSlotOne)$/;"	f
BOOST_AUTO_TEST_CASE	thread/test/SignalSlot_test.cc	/^BOOST_AUTO_TEST_CASE(testSignalSlotTrivialOne)$/;"	f
BOOST_AUTO_TEST_CASE	thread/test/SignalSlot_test.cc	/^BOOST_AUTO_TEST_CASE(testSignalSlotTrivialString)$/;"	f
BOOST_AUTO_TEST_CASE	thread/test/SignalSlot_test.cc	/^BOOST_AUTO_TEST_CASE(testSignalSlotTrivialZero)$/;"	f
BOOST_AUTO_TEST_CASE	thread/test/SignalSlot_test.cc	/^BOOST_AUTO_TEST_CASE(testSignalSlotZero)$/;"	f
BOOST_AUTO_TEST_CASE	thread/test/WeakCallback_test.cc	/^BOOST_AUTO_TEST_CASE(testMove)$/;"	f
BOOST_AUTO_TEST_CASE	thread/test/WeakCallback_test.cc	/^BOOST_AUTO_TEST_CASE(testWeakCallback)$/;"	f
BOOST_TEST_MAIN	basic/test.cc	4;"	d	file:
BOOST_TEST_MAIN	logging/LogStream_test.cc	7;"	d	file:
BOOST_TEST_MAIN	string/test.cc	3;"	d	file:
BOOST_TEST_MAIN	thread/test/SignalSlot_test.cc	6;"	d	file:
BOOST_TEST_MAIN	thread/test/WeakCallback_test.cc	3;"	d	file:
BackTracking	puzzle/nqueens.cc	/^  BackTracking(int nqueens)$/;"	f	struct:BackTracking
BackTracking	puzzle/nqueens.cc	/^struct BackTracking$/;"	s	file:
BackTracking	puzzle/nqueens_mt.cc	/^  BackTracking(int nqueens)$/;"	f	struct:BackTracking
BackTracking	puzzle/nqueens_mt.cc	/^struct BackTracking$/;"	s	file:
BackTracking	puzzle/nqueens_opt.cc	/^  BackTracking(int nqueens)$/;"	f	struct:BackTracking
BackTracking	puzzle/nqueens_opt.cc	/^struct BackTracking$/;"	s	file:
BackTracking	puzzle/nqueens_opt_mt.cc	/^  BackTracking(int nqueens)$/;"	f	struct:BackTracking
BackTracking	puzzle/nqueens_opt_mt.cc	/^struct BackTracking$/;"	s	file:
Bank	java/bankqueue/Bank.java	/^    public Bank() {$/;"	m	class:Bank
Bank	java/bankqueue/Bank.java	/^public class Bank {$/;"	c
BankTest	java/bankqueue/tests/BankTest.java	/^public class BankTest {$/;"	c
Bar	thread/test/Exception_test.cc	/^class Bar$/;"	c	file:
Batch	esort/sort11.cc	/^typedef std::vector<int64_t> Batch;$/;"	t	file:
Batch	esort/sort12.cc	/^typedef std::vector<ElementType> Batch;$/;"	t	file:
BatchPtr	esort/sort11.cc	/^typedef boost::shared_ptr<Batch> BatchPtr;$/;"	t	file:
BatchPtr	esort/sort12.cc	/^typedef boost::shared_ptr<Batch> BatchPtr;$/;"	t	file:
Beer	puzzle/Einstein.java	/^        Tea, Coffee, Milk, Beer, Water;$/;"	e	enum:Einstein.Drink	file:
BigInt	basic/tutorial/factorial.cc	/^typedef std::vector<int> BigInt;$/;"	t	file:
BillCalculator	java/billing/BillCalculator.java	/^    public BillCalculator(String rulePath) {$/;"	m	class:BillCalculator
BillCalculator	java/billing/BillCalculator.java	/^public class BillCalculator {$/;"	c
Bird	puzzle/Einstein.java	/^        Dog, Bird, Horse, Cat, Fish;$/;"	e	enum:Einstein.Pet	file:
Blends	puzzle/Einstein.java	/^        PallMall, Dunhill, BlueMaster, Prince, Blends;$/;"	e	enum:Einstein.Cigar	file:
Block	puzzle/huarong.cc	/^  Block()$/;"	f	struct:Block
Block	puzzle/huarong.cc	/^  Block(Shape s, int left, int top)$/;"	f	struct:Block
Block	puzzle/huarong.cc	/^struct Block$/;"	s	file:
BlockingInterface	protorpc/echo/EchoProto.java	/^    public interface BlockingInterface {$/;"	i	class:EchoProto.EchoService
BlockingInterface	protorpc/sudoku/Sudoku.java	/^    public interface BlockingInterface {$/;"	i	class:Sudoku.SudokuService
BlockingQueue	thread/BlockingQueue.h	/^  BlockingQueue()$/;"	f	class:muduo::BlockingQueue
BlockingQueue	thread/BlockingQueue.h	/^class BlockingQueue : boost::noncopyable$/;"	c	namespace:muduo
BlockingRpcCallback	protorpc/muduo/rpc/RpcChannel.java	/^    private final static class BlockingRpcCallback implements RpcCallback<Message> {$/;"	c	class:RpcChannel
BlockingStub	protorpc/echo/EchoProto.java	/^      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {$/;"	m	class:EchoProto.EchoService.BlockingStub	file:
BlockingStub	protorpc/echo/EchoProto.java	/^    private static final class BlockingStub implements BlockingInterface {$/;"	c	class:EchoProto.EchoService
BlockingStub	protorpc/sudoku/Sudoku.java	/^      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {$/;"	m	class:Sudoku.SudokuService.BlockingStub	file:
BlockingStub	protorpc/sudoku/Sudoku.java	/^    private static final class BlockingStub implements BlockingInterface {$/;"	c	class:Sudoku.SudokuService
Blue	puzzle/Einstein.java	/^        Red, Green, Yellow, Blue, White;$/;"	e	enum:Einstein.Color	file:
BlueMaster	puzzle/Einstein.java	/^        PallMall, Dunhill, BlueMaster, Prince, Blends;$/;"	e	enum:Einstein.Cigar	file:
BoundedBlockingQueue	thread/BoundedBlockingQueue.h	/^  explicit BoundedBlockingQueue(int maxSize)$/;"	f	class:muduo::BoundedBlockingQueue
BoundedBlockingQueue	thread/BoundedBlockingQueue.h	/^class BoundedBlockingQueue : boost::noncopyable$/;"	c	namespace:muduo
Buffer	logging/AsyncLoggingDoubleBuffering.h	/^  typedef muduo::detail::FixedBuffer<muduo::detail::kLargeBuffer> Buffer;$/;"	t	class:muduo::AsyncLoggingDoubleBuffering
Buffer	logging/LogStream.h	/^  typedef detail::FixedBuffer<detail::kSmallBuffer> Buffer;$/;"	t	class:muduo::LogStream
Buffer	reactor/s07/Buffer.h	/^  Buffer()$/;"	f	class:muduo::Buffer
Buffer	reactor/s07/Buffer.h	/^class Buffer : public muduo::copyable$/;"	c	namespace:muduo
Buffer	reactor/s08/Buffer.h	/^  Buffer()$/;"	f	class:muduo::Buffer
Buffer	reactor/s08/Buffer.h	/^class Buffer : public muduo::copyable$/;"	c	namespace:muduo
Buffer	reactor/s09/Buffer.h	/^  Buffer()$/;"	f	class:muduo::Buffer
Buffer	reactor/s09/Buffer.h	/^class Buffer : public muduo::copyable$/;"	c	namespace:muduo
Buffer	reactor/s10/Buffer.h	/^  Buffer()$/;"	f	class:muduo::Buffer
Buffer	reactor/s10/Buffer.h	/^class Buffer : public muduo::copyable$/;"	c	namespace:muduo
Buffer	reactor/s11/Buffer.h	/^  Buffer()$/;"	f	class:muduo::Buffer
Buffer	reactor/s11/Buffer.h	/^class Buffer : public muduo::copyable$/;"	c	namespace:muduo
Buffer	reactor/s12/Buffer.h	/^  Buffer()$/;"	f	class:muduo::Buffer
Buffer	reactor/s12/Buffer.h	/^class Buffer : public muduo::copyable$/;"	c	namespace:muduo
Buffer	reactor/s13/Buffer.h	/^  Buffer()$/;"	f	class:muduo::Buffer
Buffer	reactor/s13/Buffer.h	/^class Buffer : public muduo::copyable$/;"	c	namespace:muduo
BufferPtr	logging/AsyncLoggingDoubleBuffering.h	/^  typedef BufferVector::auto_type BufferPtr;$/;"	t	class:muduo::AsyncLoggingDoubleBuffering
BufferVector	logging/AsyncLoggingDoubleBuffering.h	/^  typedef boost::ptr_vector<Buffer> BufferVector;$/;"	t	class:muduo::AsyncLoggingDoubleBuffering
Builder	protorpc/echo/EchoProto.java	/^      private Builder() {$/;"	m	class:EchoProto.EchoRequest.Builder	file:
Builder	protorpc/echo/EchoProto.java	/^      private Builder() {$/;"	m	class:EchoProto.EchoResponse.Builder	file:
Builder	protorpc/echo/EchoProto.java	/^      private Builder(BuilderParent parent) {$/;"	m	class:EchoProto.EchoRequest.Builder	file:
Builder	protorpc/echo/EchoProto.java	/^      private Builder(BuilderParent parent) {$/;"	m	class:EchoProto.EchoResponse.Builder	file:
Builder	protorpc/echo/EchoProto.java	/^    public static final class Builder extends$/;"	c	class:EchoProto.EchoRequest
Builder	protorpc/echo/EchoProto.java	/^    public static final class Builder extends$/;"	c	class:EchoProto.EchoResponse
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Builder() {$/;"	m	class:QueryProtos.Answer.Builder	file:
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Builder() {$/;"	m	class:QueryProtos.Empty.Builder	file:
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Builder() {$/;"	m	class:QueryProtos.Query.Builder	file:
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Builder(BuilderParent parent) {$/;"	m	class:QueryProtos.Answer.Builder	file:
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Builder(BuilderParent parent) {$/;"	m	class:QueryProtos.Empty.Builder	file:
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Builder(BuilderParent parent) {$/;"	m	class:QueryProtos.Query.Builder	file:
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final class Builder extends$/;"	c	class:QueryProtos.Answer
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final class Builder extends$/;"	c	class:QueryProtos.Empty
Builder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final class Builder extends$/;"	c	class:QueryProtos.Query
Builder	protorpc/muduo/rpc/proto/RpcProto.java	/^      private Builder() {$/;"	m	class:RpcProto.RpcMessage.Builder	file:
Builder	protorpc/muduo/rpc/proto/RpcProto.java	/^      private Builder(BuilderParent parent) {$/;"	m	class:RpcProto.RpcMessage.Builder	file:
Builder	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final class Builder extends$/;"	c	class:RpcProto.RpcMessage
Builder	protorpc/sudoku/Sudoku.java	/^      private Builder() {$/;"	m	class:Sudoku.SudokuRequest.Builder	file:
Builder	protorpc/sudoku/Sudoku.java	/^      private Builder() {$/;"	m	class:Sudoku.SudokuResponse.Builder	file:
Builder	protorpc/sudoku/Sudoku.java	/^      private Builder(BuilderParent parent) {$/;"	m	class:Sudoku.SudokuRequest.Builder	file:
Builder	protorpc/sudoku/Sudoku.java	/^      private Builder(BuilderParent parent) {$/;"	m	class:Sudoku.SudokuResponse.Builder	file:
Builder	protorpc/sudoku/Sudoku.java	/^    public static final class Builder extends$/;"	c	class:Sudoku.SudokuRequest
Builder	protorpc/sudoku/Sudoku.java	/^    public static final class Builder extends$/;"	c	class:Sudoku.SudokuResponse
CHECKERBOARD_FIELD_NUMBER	protorpc/sudoku/Sudoku.java	/^    public static final int CHECKERBOARD_FIELD_NUMBER = 1;$/;"	f	class:Sudoku.SudokuRequest
CHECKERBOARD_FIELD_NUMBER	protorpc/sudoku/Sudoku.java	/^    public static final int CHECKERBOARD_FIELD_NUMBER = 2;$/;"	f	class:Sudoku.SudokuResponse
CHECK_NOTNULL	logging/Logging.h	82;"	d
COL	sudoku/sudoku.h	/^enum { ROW=9, COL=9, N = 81, NEIGHBOR = 20 };$/;"	e	enum:__anon2
CXXFLAGS	datetime/Makefile	/^CXXFLAGS=-g -Wall -O0$/;"	m
CXXFLAGS	faketcp/Makefile	/^CXXFLAGS=-g -Wall -pthread$/;"	m
CXXFLAGS	protobuf/Makefile	/^CXXFLAGS=-g -Wall -O0 -pthread$/;"	m
CXXFLAGS	reactor/reactor.mk	/^CXXFLAGS = -O0 -g  -Wall -I ..\/.. -pthread$/;"	m
CXXFLAGS	reactor/reactor_lib.mk	/^CXXFLAGS = -O0 -g  -Wall -I ..\/.. -pthread$/;"	m
CXXFLAGS	thread/Makefile	/^CXXFLAGS=-g -Wall -rdynamic -march=native$/;"	m
CXXFLAGS	topk/Makefile	/^CXXFLAGS = -g -O2 -Wall -Wextra -Werror \\$/;"	m
CXXFLAGS	utility/Makefile	/^CXXFLAGS=-g -Wall -O2 -pthread$/;"	m
CachedRule	java/billing/RuleFactory.java	/^        public CachedRule(long lastModified, Rule rule) {$/;"	m	class:RuleFactory.CachedRule
CachedRule	java/billing/RuleFactory.java	/^    private static class CachedRule {$/;"	c	class:RuleFactory
Callback	protobuf/dispatcher.cc	/^class Callback : boost::noncopyable$/;"	c	file:
Callback	puzzle/query_freq.cc	/^typedef boost::function<void(const string& query, int64_t count)> Callback;$/;"	t	file:
Callback	thread/SignalSlot.h	/^  typedef std::function<void (ARGS...)> Callback;$/;"	t	class:muduo::Signal
CallbackMap	protobuf/dispatcher.cc	/^  typedef std::map<const google::protobuf::Descriptor*, boost::shared_ptr<Callback> > CallbackMap;$/;"	t	class:ProtobufDispatcher	file:
CallbackMap	protobuf/dispatcher_lite.cc	/^  typedef std::map<const google::protobuf::Descriptor*, ProtobufMessageCallback> CallbackMap;$/;"	t	class:ProtobufDispatcherLite	file:
CallbackT	protobuf/dispatcher.cc	/^  CallbackT(const ProtobufMessageCallback& callback)$/;"	f	class:CallbackT
CallbackT	protobuf/dispatcher.cc	/^class CallbackT : public Callback$/;"	c	file:
Card	puzzle/poker/poker.cc	/^  Card() : rank(0), suit(0)$/;"	f	struct:Card
Card	puzzle/poker/poker.cc	/^struct Card$/;"	s	file:
Cat	puzzle/Einstein.java	/^        Dog, Bird, Horse, Cat, Fish;$/;"	e	enum:Einstein.Pet	file:
Channel	reactor/s01/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s01/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s02/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s02/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s03/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s03/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s04/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s04/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s05/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s05/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s06/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s06/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s07/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s07/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s08/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s08/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s09/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s09/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s10/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s10/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s11/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s11/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s12/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s12/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
Channel	reactor/s13/Channel.cc	/^Channel::Channel(EventLoop* loop, int fdArg)$/;"	f	class:Channel
Channel	reactor/s13/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo
ChannelList	reactor/s01/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s01/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s02/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s02/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s03/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s03/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s04/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s04/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s05/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s05/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s06/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s06/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s07/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s07/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s08/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s08/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s09/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s09/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s10/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s10/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s11/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s11/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s12/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s12/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelList	reactor/s13/EPoller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EPoller
ChannelList	reactor/s13/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::EventLoop
ChannelList	reactor/s13/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s01/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s02/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s03/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s04/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s05/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s06/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s07/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s08/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s09/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s10/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s11/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s12/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
ChannelMap	reactor/s13/EPoller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::EPoller
ChannelMap	reactor/s13/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::Poller
CheckNotNull	logging/Logging.h	/^T* CheckNotNull(const char *file, int line, const char *names, T* ptr) {$/;"	f	namespace:muduo
Cigar	puzzle/Einstein.java	/^    public enum Cigar {$/;"	g	class:Einstein
Client	protorpc/sudoku/Client.java	/^public class Client {$/;"	c
CloseCallback	reactor/s06/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo
CloseCallback	reactor/s07/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo
CloseCallback	reactor/s08/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo
CloseCallback	reactor/s09/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo
CloseCallback	reactor/s10/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo
CloseCallback	reactor/s11/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo
CloseCallback	reactor/s12/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo
CloseCallback	reactor/s13/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo
CodecTest	protorpc/muduo/codec/tests/CodecTest.java	/^public class CodecTest {$/;"	c
Coffee	puzzle/Einstein.java	/^        Tea, Coffee, Milk, Beer, Water;$/;"	e	enum:Einstein.Drink	file:
Color	puzzle/Einstein.java	/^    public enum Color {$/;"	g	class:Einstein
Column	puzzle/dance.cc	/^typedef Node Column;$/;"	t	file:
Column	sudoku/sudoku_dancing_links.cc	/^typedef Node Column;$/;"	t	file:
Comp	datetime/TimeZone.cc	/^  Comp(bool gmt)$/;"	f	struct:muduo::detail::Comp
Comp	datetime/TimeZone.cc	/^struct Comp$/;"	s	namespace:muduo::detail	file:
Condition	thread/Condition.h	/^  explicit Condition(MutexLock& mutex) : mutex_(mutex)$/;"	f	class:muduo::Condition
Condition	thread/Condition.h	/^class Condition : boost::noncopyable$/;"	c	namespace:muduo
ConnectionCallback	reactor/s05/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionCallback	reactor/s06/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionCallback	reactor/s07/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionCallback	reactor/s08/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionCallback	reactor/s09/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionCallback	reactor/s10/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionCallback	reactor/s11/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionCallback	reactor/s12/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionCallback	reactor/s13/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo
ConnectionMap	reactor/s05/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
ConnectionMap	reactor/s06/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
ConnectionMap	reactor/s07/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
ConnectionMap	reactor/s08/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
ConnectionMap	reactor/s09/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
ConnectionMap	reactor/s10/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
ConnectionMap	reactor/s11/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
ConnectionMap	reactor/s12/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
ConnectionMap	reactor/s13/TcpServer.h	/^  typedef std::map<std::string, TcpConnectionPtr> ConnectionMap;$/;"	t	class:muduo::TcpServer
Connector	reactor/s11/Connector.cc	/^Connector::Connector(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:Connector
Connector	reactor/s11/Connector.h	/^class Connector : boost::noncopyable$/;"	c	namespace:muduo
Connector	reactor/s12/Connector.cc	/^Connector::Connector(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:Connector
Connector	reactor/s12/Connector.h	/^class Connector : boost::noncopyable$/;"	c	namespace:muduo
Connector	reactor/s13/Connector.cc	/^Connector::Connector(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:Connector
Connector	reactor/s13/Connector.h	/^class Connector : boost::noncopyable$/;"	c	namespace:muduo
ConnectorPtr	reactor/s11/Connector.h	/^typedef boost::shared_ptr<Connector> ConnectorPtr;$/;"	t	namespace:muduo
ConnectorPtr	reactor/s12/Connector.h	/^typedef boost::shared_ptr<Connector> ConnectorPtr;$/;"	t	namespace:muduo
ConnectorPtr	reactor/s12/TcpClient.h	/^typedef boost::shared_ptr<Connector> ConnectorPtr;$/;"	t	namespace:muduo
ConnectorPtr	reactor/s13/Connector.h	/^typedef boost::shared_ptr<Connector> ConnectorPtr;$/;"	t	namespace:muduo
ConnectorPtr	reactor/s13/TcpClient.h	/^typedef boost::shared_ptr<Connector> ConnectorPtr;$/;"	t	namespace:muduo
CountDownLatch	thread/CountDownLatch.h	/^  explicit CountDownLatch(int count)$/;"	f	class:muduo::CountDownLatch
CountDownLatch	thread/CountDownLatch.h	/^class CountDownLatch : boost::noncopyable$/;"	c	namespace:muduo
Counter	thread/test/Counter.cc	/^  Counter() : value_(0) {}$/;"	f	class:Counter
Counter	thread/test/Counter.cc	/^class Counter : boost::noncopyable$/;"	c	file:
CurrentThread	thread/Thread.cc	/^namespace CurrentThread$/;"	n	namespace:muduo	file:
CurrentThread	thread/Thread.h	/^namespace CurrentThread$/;"	n	namespace:muduo
Customer	java/bankqueue/customer/Customer.java	/^    protected Customer(int id, int serviceTime) {$/;"	m	class:Customer
Customer	java/bankqueue/customer/Customer.java	/^public abstract class Customer {$/;"	c
CustomerArriveEvent	java/bankqueue/event/CustomerArriveEvent.java	/^    public CustomerArriveEvent(int time, Customer customer, Bank bank) {$/;"	m	class:CustomerArriveEvent
CustomerArriveEvent	java/bankqueue/event/CustomerArriveEvent.java	/^public class CustomerArriveEvent extends Event {$/;"	c
CustomerData	thread/test/Customer.cc	/^  CustomerData()$/;"	f	class:CustomerData
CustomerData	thread/test/Customer.cc	/^class CustomerData : boost::noncopyable$/;"	c	file:
CustomerFactory	java/bankqueue/customer/CustomerFactory.java	/^public class CustomerFactory {$/;"	c
CustomerLeaveEvent	java/bankqueue/event/CustomerLeaveEvent.java	/^    public CustomerLeaveEvent(int time, Customer customer, Bank bank, WindowType type) {$/;"	m	class:CustomerLeaveEvent
CustomerLeaveEvent	java/bankqueue/event/CustomerLeaveEvent.java	/^public class CustomerLeaveEvent extends Event {$/;"	c
CustomerType	java/bankqueue/customer/CustomerType.java	/^public enum CustomerType {$/;"	g
DEBUG	logging/Logging.h	/^    DEBUG,$/;"	e	enum:muduo::Logger::LogLevel
DEBUG_MODE	sudoku/sudoku.h	/^const bool DEBUG_MODE = false;$/;"	v
Dance	puzzle/dance.cc	/^  Dance()$/;"	f	struct:Dance
Dance	puzzle/dance.cc	/^struct Dance$/;"	s	file:
Dance	sudoku/sudoku_dancing_links.cc	/^    Dance(int inout[81]) : inout_(inout), cur_node_(0)$/;"	f	struct:Dance
Dance	sudoku/sudoku_dancing_links.cc	/^struct Dance$/;"	s	file:
Danmark	puzzle/Einstein.java	/^        England, Sweden, Danmark, Norway, Germany;$/;"	e	enum:Einstein.Nation	file:
Data	datetime/TimeZone.cc	/^struct TimeZone::Data$/;"	s	class:TimeZone	file:
Data	esort/sort03.cc	/^typedef std::vector<string> Data;$/;"	t	file:
Data	esort/sort04.cc	/^typedef std::vector<Record> Data;$/;"	t	file:
Data	thread/SignalSlot.h	/^  typedef SignalImpl<Callback> Data;$/;"	t	struct:muduo::detail::SlotImpl
DataFields	java/billing/DataFields.java	/^public class DataFields {$/;"	c
Date	datetime/Date.cc	/^Date::Date(const struct tm& t)$/;"	f	class:Date
Date	datetime/Date.cc	/^Date::Date(int y, int m, int d)$/;"	f	class:Date
Date	datetime/Date.h	/^  Date()$/;"	f	class:muduo::Date
Date	datetime/Date.h	/^  explicit Date(int julianDayNum)$/;"	f	class:muduo::Date
Date	datetime/Date.h	/^class Date : public muduo::copyable$/;"	c	namespace:muduo
DefaultRule	java/billing/DefaultRule.java	/^    public DefaultRule(String name) {$/;"	m	class:DefaultRule
DefaultRule	java/billing/DefaultRule.java	/^public class DefaultRule extends Rule {$/;"	c
Destruct	thread/test/Singleton_test.cc	/^  Destruct()$/;"	f	class:Destruct
Destruct	thread/test/Singleton_test.cc	/^class Destruct$/;"	c	file:
Dog	puzzle/Einstein.java	/^        Dog, Bird, Horse, Cat, Fish;$/;"	e	enum:Einstein.Pet	file:
Drink	puzzle/Einstein.java	/^    public enum Drink {$/;"	g	class:Einstein
Dunhill	puzzle/Einstein.java	/^        PallMall, Dunhill, BlueMaster, Prince, Blends;$/;"	e	enum:Einstein.Cigar	file:
EPoller	reactor/s13/EPoller.cc	/^EPoller::EPoller(EventLoop* loop)$/;"	f	class:EPoller
EPoller	reactor/s13/EPoller.h	/^class EPoller : boost::noncopyable$/;"	c	namespace:muduo
ERROR	logging/Logging.h	/^    ERROR,$/;"	e	enum:muduo::Logger::LogLevel
ERROR	protorpc/muduo/rpc/proto/RpcProto.java	/^    ERROR(2, 3),$/;"	e	enum:RpcProto.MessageType	file:
ERROR_FIELD_NUMBER	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int ERROR_FIELD_NUMBER = 7;$/;"	f	class:RpcProto.RpcMessage
ERROR_VALUE	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int ERROR_VALUE = 3;$/;"	f	class:RpcProto.MessageType
EchoClient	protorpc/echo/EchoClient.java	/^public class EchoClient {$/;"	c
EchoHandler	python/echo-fork.py	/^class EchoHandler(BaseRequestHandler):$/;"	c
EchoHandler	python/echo-single.py	/^class EchoHandler(BaseRequestHandler):$/;"	c
EchoHandler	python/echo-thread.py	/^class EchoHandler(BaseRequestHandler):$/;"	c
EchoProto	protorpc/echo/EchoProto.java	/^  private EchoProto() {}$/;"	m	class:EchoProto	file:
EchoProto	protorpc/echo/EchoProto.java	/^public final class EchoProto {$/;"	c
EchoRequest	protorpc/echo/EchoProto.java	/^    private EchoRequest(Builder builder) {$/;"	m	class:EchoProto.EchoRequest	file:
EchoRequest	protorpc/echo/EchoProto.java	/^    private EchoRequest(boolean noInit) {}$/;"	m	class:EchoProto.EchoRequest	file:
EchoRequest	protorpc/echo/EchoProto.java	/^  public static final class EchoRequest extends$/;"	c	class:EchoProto
EchoRequestOrBuilder	protorpc/echo/EchoProto.java	/^  public interface EchoRequestOrBuilder$/;"	i	class:EchoProto
EchoResponse	protorpc/echo/EchoProto.java	/^    private EchoResponse(Builder builder) {$/;"	m	class:EchoProto.EchoResponse	file:
EchoResponse	protorpc/echo/EchoProto.java	/^    private EchoResponse(boolean noInit) {}$/;"	m	class:EchoProto.EchoResponse	file:
EchoResponse	protorpc/echo/EchoProto.java	/^  public static final class EchoResponse extends$/;"	c	class:EchoProto
EchoResponseOrBuilder	protorpc/echo/EchoProto.java	/^  public interface EchoResponseOrBuilder$/;"	i	class:EchoProto
EchoServer	protorpc/echo/EchoServer.java	/^public class EchoServer {$/;"	c
EchoService	protorpc/echo/EchoProto.java	/^    protected EchoService() {}$/;"	m	class:EchoProto.EchoService
EchoService	protorpc/echo/EchoProto.java	/^  public static abstract class EchoService$/;"	c	class:EchoProto
Einstein	puzzle/Einstein.java	/^public class Einstein {$/;"	c
ElementType	esort/sort12.cc	/^typedef double ElementType;$/;"	t	file:
Empty	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Empty(Builder builder) {$/;"	m	class:QueryProtos.Empty	file:
Empty	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Empty(boolean noInit) {}$/;"	m	class:QueryProtos.Empty	file:
Empty	protorpc/muduo/codec/tests/QueryProtos.java	/^  public static final class Empty extends$/;"	c	class:QueryProtos
EmptyOrBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^  public interface EmptyOrBuilder$/;"	i	class:QueryProtos
Encoding	utility/cwc.cc	/^enum Encoding$/;"	g	file:
England	puzzle/Einstein.java	/^        England, Sweden, Danmark, Norway, Germany;$/;"	e	enum:Einstein.Nation	file:
Entry	reactor/s02/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s03/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s04/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s05/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s06/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s07/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s08/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s09/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s10/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s11/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s12/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	reactor/s13/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:muduo::TimerQueue
Entry	thread/test/Customer.cc	/^  typedef std::pair<string, int> Entry;$/;"	t	class:CustomerData	file:
EntryList	thread/test/Customer.cc	/^  typedef std::vector<Entry> EntryList;$/;"	t	class:CustomerData	file:
ErrorCode	protorpc/muduo/rpc/proto/RpcProto.java	/^    private ErrorCode(int index, int value) {$/;"	m	class:RpcProto.ErrorCode	file:
ErrorCode	protorpc/muduo/rpc/proto/RpcProto.java	/^  public enum ErrorCode$/;"	g	class:RpcProto
Event	java/bankqueue/event/Event.java	/^    public Event(int time) {$/;"	m	class:Event
Event	java/bankqueue/event/Event.java	/^public abstract class Event implements Comparable<Event> {$/;"	c
EventCallback	reactor/s01/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s02/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s03/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s04/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s05/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s06/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s07/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s08/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s09/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s10/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s11/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s12/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventCallback	reactor/s13/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::Channel
EventList	reactor/s13/EPoller.h	/^  typedef std::vector<struct epoll_event> EventList;$/;"	t	class:muduo::EPoller
EventLoop	reactor/s00/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s00/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s01/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s01/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s02/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s02/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s03/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s03/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s04/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s04/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s05/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s05/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s06/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s06/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s07/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s07/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s08/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s08/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s09/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s09/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s10/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s10/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s11/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s11/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s12/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s12/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoop	reactor/s13/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	reactor/s13/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s03/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s03/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s04/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s04/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s05/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s05/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s06/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s06/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s07/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s07/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s08/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s08/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s09/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s09/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s10/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s10/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s11/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s11/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s12/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s12/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThread	reactor/s13/EventLoopThread.cc	/^EventLoopThread::EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	reactor/s13/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThreadPool	reactor/s10/EventLoopThreadPool.cc	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* baseLoop)$/;"	f	class:EventLoopThreadPool
EventLoopThreadPool	reactor/s10/EventLoopThreadPool.h	/^class EventLoopThreadPool : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThreadPool	reactor/s11/EventLoopThreadPool.cc	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* baseLoop)$/;"	f	class:EventLoopThreadPool
EventLoopThreadPool	reactor/s11/EventLoopThreadPool.h	/^class EventLoopThreadPool : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThreadPool	reactor/s12/EventLoopThreadPool.cc	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* baseLoop)$/;"	f	class:EventLoopThreadPool
EventLoopThreadPool	reactor/s12/EventLoopThreadPool.h	/^class EventLoopThreadPool : boost::noncopyable$/;"	c	namespace:muduo
EventLoopThreadPool	reactor/s13/EventLoopThreadPool.cc	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* baseLoop)$/;"	f	class:EventLoopThreadPool
EventLoopThreadPool	reactor/s13/EventLoopThreadPool.h	/^class EventLoopThreadPool : boost::noncopyable$/;"	c	namespace:muduo
EventSimulator	java/bankqueue/event/EventSimulator.java	/^public class EventSimulator {$/;"	c
EventTest	java/bankqueue/tests/EventTest.java	/^public class EventTest {$/;"	c
Exception	thread/Exception.cc	/^Exception::Exception(const char* what)$/;"	f	class:Exception
Exception	thread/Exception.h	/^class Exception : public std::exception$/;"	c	namespace:muduo
FATAL	logging/Logging.h	/^    FATAL,$/;"	e	enum:muduo::Logger::LogLevel
FastCustomer	java/bankqueue/customer/FastCustomer.java	/^    public FastCustomer(int id, int serviceTime) {$/;"	m	class:FastCustomer
FastCustomer	java/bankqueue/customer/FastCustomer.java	/^public class FastCustomer extends Customer {$/;"	c
File	algorithm/mergeN.cc	/^typedef std::vector<Record> File;$/;"	t	file:
File	datetime/TimeZone.cc	/^  File(const char* file)$/;"	f	class:muduo::detail::File
File	datetime/TimeZone.cc	/^class File : boost::noncopyable$/;"	c	namespace:muduo::detail	file:
File	logging/LogFile.cc	/^  explicit File(const string& filename)$/;"	f	class:LogFile::File
File	logging/LogFile.cc	/^class LogFile::File : boost::noncopyable$/;"	c	class:LogFile	file:
Fish	puzzle/Einstein.java	/^        Dog, Bird, Horse, Cat, Fish;$/;"	e	enum:Einstein.Pet	file:
FixedBuffer	logging/LogStream.h	/^  FixedBuffer()$/;"	f	class:muduo::detail::FixedBuffer
FixedBuffer	logging/LogStream.h	/^class FixedBuffer : boost::noncopyable$/;"	c	namespace:muduo::detail
FlushFunc	logging/Logging.h	/^  typedef void (*FlushFunc)();$/;"	t	class:muduo::Logger
Fmt	logging/LogStream.cc	/^Fmt::Fmt(const char* fmt, T val)$/;"	f	class:Fmt
Fmt	logging/LogStream.h	/^class Fmt \/\/ : boost::noncopyable$/;"	c	namespace:muduo
Foo	thread/test/CopyOnWrite_test.cc	/^class Foo$/;"	c	file:
Foo	thread/test/NonRecursiveMutex_test.cc	/^class Foo$/;"	c	file:
Foo	thread/test/Observer.cc	/^class Foo : public Observer$/;"	c	file:
Foo	thread/test/Observer_safe.cc	/^class Foo : public Observer$/;"	c	file:
Foo	thread/test/SignalSlot_test.cc	/^class Foo : boost::noncopyable$/;"	c	file:
Foo	thread/test/Thread_test.cc	/^  explicit Foo(double x)$/;"	f	class:Foo
Foo	thread/test/Thread_test.cc	/^class Foo$/;"	c	file:
Foo	thread/test/WeakCallback_test.cc	/^class Foo : boost::noncopyable$/;"	c	file:
FooList	thread/test/CopyOnWrite_test.cc	/^typedef std::vector<Foo> FooList;$/;"	t	file:
FooListPtr	thread/test/CopyOnWrite_test.cc	/^typedef boost::shared_ptr<FooList> FooListPtr;$/;"	t	file:
Functor	reactor/s03/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s04/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s05/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s06/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s07/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s08/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s09/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s10/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s11/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s12/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	reactor/s13/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::EventLoop
Functor	thread/SignalSlotTrivial.h	/^  typedef std::function<void (ARGS...)> Functor;$/;"	t	class:SignalTrivial
Germany	puzzle/Einstein.java	/^        England, Sweden, Danmark, Norway, Germany;$/;"	e	enum:Einstein.Nation	file:
GlobalObject	thread/test/ExitDeadLock.cc	/^class GlobalObject$/;"	c	file:
Green	puzzle/Einstein.java	/^        Red, Green, Yellow, Blue, White;$/;"	e	enum:Einstein.Color	file:
Group	puzzle/poker/poker.cc	/^struct Group$/;"	s	file:
HANDLER_ALLOCATOR_HPP	pingpong/asio/handler_allocator.hpp	12;"	d
HEADERS	thread/Makefile	/^HEADERS=$(wildcard *.h)$/;"	m
Hand	puzzle/poker/poker.cc	/^struct Hand$/;"	s	file:
Horse	puzzle/Einstein.java	/^        Dog, Bird, Horse, Cat, Fish;$/;"	e	enum:Einstein.Pet	file:
ID_FIELD_NUMBER	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final int ID_FIELD_NUMBER = 1;$/;"	f	class:QueryProtos.Answer
ID_FIELD_NUMBER	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final int ID_FIELD_NUMBER = 1;$/;"	f	class:QueryProtos.Empty
ID_FIELD_NUMBER	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final int ID_FIELD_NUMBER = 1;$/;"	f	class:QueryProtos.Query
ID_FIELD_NUMBER	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int ID_FIELD_NUMBER = 2;$/;"	f	class:RpcProto.RpcMessage
INFO	logging/Logging.h	/^    INFO,$/;"	e	enum:muduo::Logger::LogLevel
INVALID_REQUEST	protorpc/muduo/rpc/proto/RpcProto.java	/^    INVALID_REQUEST(3, 4),$/;"	e	enum:RpcProto.ErrorCode	file:
INVALID_REQUEST_VALUE	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int INVALID_REQUEST_VALUE = 4;$/;"	f	class:RpcProto.ErrorCode
INVALID_RESPONSE	protorpc/muduo/rpc/proto/RpcProto.java	/^    INVALID_RESPONSE(4, 5),$/;"	e	enum:RpcProto.ErrorCode	file:
INVALID_RESPONSE_VALUE	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int INVALID_RESPONSE_VALUE = 5;$/;"	f	class:RpcProto.ErrorCode
IPrange	algorithm/iprange.cc	/^struct IPrange$/;"	s	file:
IgnoreSigPipe	reactor/s09/EventLoop.cc	/^  IgnoreSigPipe()$/;"	f	class:IgnoreSigPipe
IgnoreSigPipe	reactor/s09/EventLoop.cc	/^class IgnoreSigPipe$/;"	c	file:
IgnoreSigPipe	reactor/s10/EventLoop.cc	/^  IgnoreSigPipe()$/;"	f	class:IgnoreSigPipe
IgnoreSigPipe	reactor/s10/EventLoop.cc	/^class IgnoreSigPipe$/;"	c	file:
IgnoreSigPipe	reactor/s11/EventLoop.cc	/^  IgnoreSigPipe()$/;"	f	class:IgnoreSigPipe
IgnoreSigPipe	reactor/s11/EventLoop.cc	/^class IgnoreSigPipe$/;"	c	file:
IgnoreSigPipe	reactor/s12/EventLoop.cc	/^  IgnoreSigPipe()$/;"	f	class:IgnoreSigPipe
IgnoreSigPipe	reactor/s12/EventLoop.cc	/^class IgnoreSigPipe$/;"	c	file:
IgnoreSigPipe	reactor/s13/EventLoop.cc	/^  IgnoreSigPipe()$/;"	f	class:IgnoreSigPipe
IgnoreSigPipe	reactor/s13/EventLoop.cc	/^class IgnoreSigPipe$/;"	c	file:
IgnoreSigPipe	tpc/TcpStream.cc	/^  IgnoreSigPipe()$/;"	f	class:__anon16::IgnoreSigPipe
IgnoreSigPipe	tpc/TcpStream.cc	/^class IgnoreSigPipe$/;"	c	namespace:__anon16	file:
Impl	logging/Logging.cc	/^Logger::Impl::Impl(LogLevel level, int savedErrno, const char* file, int line)$/;"	f	class:Logger::Impl
Impl	logging/Logging.h	/^class Impl$/;"	c	class:muduo::Logger
InetAddress	reactor/s04/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s04/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s04/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s04/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s05/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s05/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s05/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s05/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s06/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s06/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s06/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s06/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s07/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s07/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s07/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s07/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s08/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s08/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s08/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s08/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s09/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s09/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s09/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s09/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s10/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s10/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s10/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s10/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s11/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s11/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s11/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s11/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s12/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s12/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s12/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s12/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	reactor/s13/InetAddress.cc	/^InetAddress::InetAddress(const std::string& ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s13/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress
InetAddress	reactor/s13/InetAddress.h	/^  InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::InetAddress
InetAddress	reactor/s13/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo
InetAddress	tpc/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port, bool loopbackOnly)$/;"	f	class:InetAddress
InetAddress	tpc/InetAddress.h	/^  explicit InetAddress(const struct sockaddr_in& saddr)$/;"	f	class:InetAddress
InetAddress	tpc/InetAddress.h	/^class InetAddress : copyable$/;"	c
Input	algorithm/mergeN.cc	/^  explicit Input(const File* f)$/;"	f	struct:Input
Input	algorithm/mergeN.cc	/^struct Input$/;"	s	file:
InputFile	esort/sort00.cc	/^  InputFile(const char* filename)$/;"	f	class:InputFile
InputFile	esort/sort00.cc	/^class InputFile : boost::noncopyable$/;"	c	file:
InputFile	esort/sort01.cc	/^  InputFile(const char* filename)$/;"	f	class:InputFile
InputFile	esort/sort01.cc	/^class InputFile : boost::noncopyable$/;"	c	file:
InputFile	esort/sort02.cc	/^  InputFile(const char* filename)$/;"	f	class:InputFile
InputFile	esort/sort02.cc	/^class InputFile : boost::noncopyable$/;"	c	file:
InputFile	esort/sort03.cc	/^  InputFile(const char* filename)$/;"	f	class:InputFile
InputFile	esort/sort03.cc	/^class InputFile : boost::noncopyable$/;"	c	file:
InputFile	esort/sort04.cc	/^  InputFile(const char* filename)$/;"	f	class:InputFile
InputFile	esort/sort04.cc	/^class InputFile : boost::noncopyable$/;"	c	file:
Interface	protorpc/echo/EchoProto.java	/^    public interface Interface {$/;"	i	class:EchoProto.EchoService
Interface	protorpc/sudoku/Sudoku.java	/^    public interface Interface {$/;"	i	class:Sudoku.SudokuService
Inventory	thread/test/MutualDeadLock.cc	/^class Inventory$/;"	c	file:
Inventory	thread/test/RequestInventory_test.cc	/^  Inventory()$/;"	f	class:Inventory
Inventory	thread/test/RequestInventory_test.cc	/^class Inventory$/;"	c	file:
Inventory	thread/test/RequestInventory_test2.cc	/^  Inventory()$/;"	f	class:Inventory
Inventory	thread/test/RequestInventory_test2.cc	/^class Inventory$/;"	c	file:
Iterator	thread/test/Observer_safe.cc	/^  typedef std::vector<boost::weak_ptr<Observer> >::iterator Iterator;$/;"	t	class:Observable	file:
Key	esort/sort01.cc	/^  Key(const string& record, int idx)$/;"	f	struct:Key
Key	esort/sort01.cc	/^struct Key$/;"	s	file:
Key	esort/sort02.cc	/^  Key(const string& record, int idx)$/;"	f	struct:Key
Key	esort/sort02.cc	/^struct Key$/;"	s	file:
Key	esort/sort03.cc	/^  Key(const string& record, int idx)$/;"	f	struct:Key
Key	esort/sort03.cc	/^struct Key$/;"	s	file:
Key	esort/sort04.cc	/^  Key(const Record& record, int idx)$/;"	f	struct:Key
Key	esort/sort04.cc	/^struct Key$/;"	s	file:
LDFLAGS	protobuf/Makefile	/^LDFLAGS=-lprotobuf -lz -lpthread -Wl,-rpath -Wl,$(LIBDIR)$/;"	m
LDFLAGS	reactor/reactor.mk	/^LDFLAGS = -lpthread$/;"	m
LDFLAGS	reactor/reactor_lib.mk	/^LDFLAGS = -lpthread -lmuduo -L.$/;"	m
LDFLAGS	topk/Makefile	/^LDFLAGS = -L$(MUDUO_LIBRARY) -lmuduo_net -lmuduo_base -lpthread$/;"	m
LDLIBS	pingpong/libevent/Makefile	/^LDLIBS=-levent_core -Wl,--rpath -Wl,\/usr\/local\/lib$/;"	m
LIBDIR	protobuf/Makefile	/^LIBDIR=\/usr\/local\/lib$/;"	m
LIBDIR	utility/Makefile	/^LIBDIR=\/usr\/local\/lib$/;"	m
LIB_SRC	reactor/s00/Makefile	/^LIB_SRC = EventLoop.cc$/;"	m
LIB_SRC	reactor/s01/Makefile	/^LIB_SRC = Channel.cc EventLoop.cc Poller.cc$/;"	m
LIB_SRC	reactor/s02/Makefile	/^LIB_SRC = Channel.cc EventLoop.cc Poller.cc Timer.cc TimerQueue.cc$/;"	m
LIB_SRC	reactor/s03/Makefile	/^LIB_SRC = Channel.cc EventLoop.cc EventLoopThread.cc Poller.cc Timer.cc TimerQueue.cc$/;"	m
LIB_SRC	reactor/s04/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s05/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s06/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s07/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s08/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s09/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s10/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s11/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s12/Makefile	/^LIB_SRC = 			\\$/;"	m
LIB_SRC	reactor/s13/Makefile	/^LIB_SRC = 			\\$/;"	m
LOG_DEBUG	logging/Logging.h	65;"	d
LOG_ERROR	logging/Logging.h	70;"	d
LOG_FATAL	logging/Logging.h	71;"	d
LOG_INFO	logging/Logging.h	67;"	d
LOG_SYSERR	logging/Logging.h	72;"	d
LOG_SYSFATAL	logging/Logging.h	73;"	d
LOG_TRACE	logging/Logging.h	63;"	d
LOG_WARN	logging/Logging.h	69;"	d
LocalSink	puzzle/query_freq.cc	/^  explicit LocalSink(int idx, int nbuckets)$/;"	f	class:LocalSink
LocalSink	puzzle/query_freq.cc	/^class LocalSink : boost::noncopyable$/;"	c	file:
Localtime	datetime/TimeZone.cc	/^  Localtime(time_t offset, bool dst, int arrb)$/;"	f	struct:muduo::detail::Localtime
Localtime	datetime/TimeZone.cc	/^struct Localtime$/;"	s	namespace:muduo::detail	file:
LogFile	logging/LogFile.cc	/^LogFile::LogFile(const string& basename,$/;"	f	class:LogFile
LogFile	logging/LogFile.h	/^class LogFile : boost::noncopyable$/;"	c	namespace:muduo
LogLevel	logging/Logging.h	/^  enum LogLevel$/;"	g	class:muduo::Logger
LogLevel	logging/Logging.h	/^  typedef Logger::LogLevel LogLevel;$/;"	t	class:muduo::Logger::Impl
LogLevelName	logging/Logging.cc	/^const char* LogLevelName[Logger::NUM_LOG_LEVELS] =$/;"	m	namespace:muduo	file:
LogMessage	logging/AsyncLoggingQueue.h	/^  LogMessage()$/;"	f	struct:muduo::LogMessage
LogMessage	logging/AsyncLoggingQueue.h	/^  LogMessage(const LogMessage& rhs)$/;"	f	struct:muduo::LogMessage
LogMessage	logging/AsyncLoggingQueue.h	/^  LogMessage(const char* msg, int len)$/;"	f	struct:muduo::LogMessage
LogMessage	logging/AsyncLoggingQueue.h	/^struct LogMessage$/;"	s	namespace:muduo
LogStream	logging/LogStream.h	/^class LogStream : boost::noncopyable$/;"	c	namespace:muduo
Logger	logging/Logging.cc	/^Logger::Logger(const char* file, int line)$/;"	f	class:Logger
Logger	logging/Logging.cc	/^Logger::Logger(const char* file, int line, LogLevel level)$/;"	f	class:Logger
Logger	logging/Logging.cc	/^Logger::Logger(const char* file, int line, LogLevel level, const char* func)$/;"	f	class:Logger
Logger	logging/Logging.cc	/^Logger::Logger(const char* file, int line, bool toAbort)$/;"	f	class:Logger
Logger	logging/Logging.h	/^class Logger$/;"	c	namespace:muduo
MAX_LINE_LENGTH	pingpong/libevent/server-line-echo.c	14;"	d	file:
MAX_OUTPUT_BUFFER	pingpong/libevent/server-line-echo.c	15;"	d	file:
METHOD_FIELD_NUMBER	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int METHOD_FIELD_NUMBER = 4;$/;"	f	class:RpcProto.RpcMessage
MUDUO_BASE_ASYNCLOGGINGDOUBLEBUFFERING_H	logging/AsyncLoggingDoubleBuffering.h	2;"	d
MUDUO_BASE_ASYNCLOGGINGQUEUE_H	logging/AsyncLoggingQueue.h	2;"	d
MUDUO_BASE_ATOMIC_H	thread/Atomic.h	9;"	d
MUDUO_BASE_BLOCKINGQUEUE_H	thread/BlockingQueue.h	9;"	d
MUDUO_BASE_BOUNDEDBLOCKINGQUEUE_H	thread/BoundedBlockingQueue.h	9;"	d
MUDUO_BASE_CONDITION_H	thread/Condition.h	9;"	d
MUDUO_BASE_COPYABLE_H	datetime/copyable.h	9;"	d
MUDUO_BASE_COUNTDOWNLATCH_H	thread/CountDownLatch.h	9;"	d
MUDUO_BASE_DATE_H	datetime/Date.h	9;"	d
MUDUO_BASE_EXCEPTION_H	thread/Exception.h	9;"	d
MUDUO_BASE_LOGFILE_H	logging/LogFile.h	2;"	d
MUDUO_BASE_LOGGING_H	logging/Logging.h	2;"	d
MUDUO_BASE_LOGSTREAM_H	logging/LogStream.h	2;"	d
MUDUO_BASE_MUTEX_H	thread/Mutex.h	9;"	d
MUDUO_BASE_SIGNALSLOTTRIVIAL_H	thread/SignalSlotTrivial.h	2;"	d
MUDUO_BASE_SIGNALSLOT_H	thread/SignalSlot.h	2;"	d
MUDUO_BASE_SINGLETON_H	thread/Singleton.h	9;"	d
MUDUO_BASE_STRINGEAGER_H	string/StringEager.h	9;"	d
MUDUO_BASE_STRINGSSO_H	string/StringSso.h	9;"	d
MUDUO_BASE_THREADLOCALSINGLETON_H	thread/ThreadLocalSingleton.h	9;"	d
MUDUO_BASE_THREADLOCAL_H	thread/ThreadLocal.h	9;"	d
MUDUO_BASE_THREADPOOL_H	thread/ThreadPool.h	9;"	d
MUDUO_BASE_THREAD_H	thread/Thread.h	9;"	d
MUDUO_BASE_TIMESTAMP_H	datetime/Timestamp.h	9;"	d
MUDUO_BASE_TIMEZONE_H	datetime/TimeZone.h	9;"	d
MUDUO_BASE_WEAKCALLBACK_H	thread/WeakCallback.h	9;"	d
MUDUO_BUILD	topk/Makefile	/^MUDUO_BUILD ?= release$/;"	m
MUDUO_DIRECTORY	topk/Makefile	/^MUDUO_DIRECTORY ?= $(HOME)\/build\/$(MUDUO_BUILD)-install$/;"	m
MUDUO_INCLUDE	topk/Makefile	/^MUDUO_INCLUDE = $(MUDUO_DIRECTORY)\/include$/;"	m
MUDUO_LIBRARY	topk/Makefile	/^MUDUO_LIBRARY = $(MUDUO_DIRECTORY)\/lib$/;"	m
MUDUO_NET_ACCEPTOR_H	reactor/s04/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s05/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s06/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s07/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s08/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s09/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s10/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s11/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s12/Acceptor.h	9;"	d
MUDUO_NET_ACCEPTOR_H	reactor/s13/Acceptor.h	9;"	d
MUDUO_NET_BUFFER_H	reactor/s07/Buffer.h	9;"	d
MUDUO_NET_BUFFER_H	reactor/s08/Buffer.h	9;"	d
MUDUO_NET_BUFFER_H	reactor/s09/Buffer.h	9;"	d
MUDUO_NET_BUFFER_H	reactor/s10/Buffer.h	9;"	d
MUDUO_NET_BUFFER_H	reactor/s11/Buffer.h	9;"	d
MUDUO_NET_BUFFER_H	reactor/s12/Buffer.h	9;"	d
MUDUO_NET_BUFFER_H	reactor/s13/Buffer.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s02/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s03/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s04/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s05/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s06/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s07/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s08/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s09/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s10/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s11/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s12/Callbacks.h	9;"	d
MUDUO_NET_CALLBACKS_H	reactor/s13/Callbacks.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s01/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s02/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s03/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s04/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s05/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s06/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s07/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s08/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s09/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s10/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s11/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s12/Channel.h	9;"	d
MUDUO_NET_CHANNEL_H	reactor/s13/Channel.h	9;"	d
MUDUO_NET_CONNECTOR_H	reactor/s11/Connector.h	9;"	d
MUDUO_NET_CONNECTOR_H	reactor/s12/Connector.h	9;"	d
MUDUO_NET_CONNECTOR_H	reactor/s13/Connector.h	9;"	d
MUDUO_NET_EPOLLER_H	reactor/s13/EPoller.h	9;"	d
MUDUO_NET_EVENTLOOPTHREADPOOL_H	reactor/s10/EventLoopThreadPool.h	9;"	d
MUDUO_NET_EVENTLOOPTHREADPOOL_H	reactor/s11/EventLoopThreadPool.h	9;"	d
MUDUO_NET_EVENTLOOPTHREADPOOL_H	reactor/s12/EventLoopThreadPool.h	9;"	d
MUDUO_NET_EVENTLOOPTHREADPOOL_H	reactor/s13/EventLoopThreadPool.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s03/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s04/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s05/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s06/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s07/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s08/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s09/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s10/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s11/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s12/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOPTHREAD_H	reactor/s13/EventLoopThread.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s00/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s01/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s02/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s03/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s04/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s05/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s06/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s07/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s08/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s09/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s10/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s11/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s12/EventLoop.h	9;"	d
MUDUO_NET_EVENTLOOP_H	reactor/s13/EventLoop.h	9;"	d
MUDUO_NET_INETADDRESS_H	reactor/s04/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s05/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s06/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s07/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s08/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s09/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s10/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s11/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s12/InetAddress.h	12;"	d
MUDUO_NET_INETADDRESS_H	reactor/s13/InetAddress.h	12;"	d
MUDUO_NET_POLLER_H	reactor/s01/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s02/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s03/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s04/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s05/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s06/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s07/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s08/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s09/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s10/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s11/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s12/Poller.h	9;"	d
MUDUO_NET_POLLER_H	reactor/s13/Poller.h	9;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s04/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s05/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s06/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s07/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s08/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s09/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s10/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s11/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s12/SocketsOps.h	12;"	d
MUDUO_NET_SOCKETSOPS_H	reactor/s13/SocketsOps.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s04/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s05/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s06/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s07/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s08/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s09/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s10/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s11/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s12/Socket.h	12;"	d
MUDUO_NET_SOCKET_H	reactor/s13/Socket.h	12;"	d
MUDUO_NET_TCPCLIENT_H	reactor/s12/TcpClient.h	9;"	d
MUDUO_NET_TCPCLIENT_H	reactor/s13/TcpClient.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s05/TcpConnection.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s06/TcpConnection.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s07/TcpConnection.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s08/TcpConnection.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s09/TcpConnection.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s10/TcpConnection.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s11/TcpConnection.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s12/TcpConnection.h	9;"	d
MUDUO_NET_TCPCONNECTION_H	reactor/s13/TcpConnection.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s05/TcpServer.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s06/TcpServer.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s07/TcpServer.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s08/TcpServer.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s09/TcpServer.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s10/TcpServer.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s11/TcpServer.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s12/TcpServer.h	9;"	d
MUDUO_NET_TCPSERVER_H	reactor/s13/TcpServer.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s02/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s03/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s04/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s05/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s06/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s07/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s08/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s09/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s10/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s11/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s12/TimerId.h	9;"	d
MUDUO_NET_TIMERID_H	reactor/s13/TimerId.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s02/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s03/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s04/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s05/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s06/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s07/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s08/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s09/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s10/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s11/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s12/TimerQueue.h	9;"	d
MUDUO_NET_TIMERQUEUE_H	reactor/s13/TimerQueue.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s02/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s03/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s04/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s05/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s06/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s07/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s08/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s09/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s10/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s11/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s12/Timer.h	9;"	d
MUDUO_NET_TIMER_H	reactor/s13/Timer.h	9;"	d
MUDUO_SRC	reactor/reactor_lib.mk	/^MUDUO_SRC = $(notdir $(LIB_SRC) $(BASE_SRC))$/;"	m
Map	thread/test/Customer.cc	/^  typedef std::map<string, EntryList> Map;$/;"	t	class:CustomerData	file:
MapPtr	thread/test/Customer.cc	/^  typedef boost::shared_ptr<Map> MapPtr;$/;"	t	class:CustomerData	file:
Mask	puzzle/huarong.cc	/^  Mask()$/;"	f	struct:Mask
Mask	puzzle/huarong.cc	/^struct Mask$/;"	s	file:
Message	tpc/roundtrip_udp.cc	/^struct Message$/;"	s	file:
MessageCallback	reactor/s05/Callbacks.h	/^                              ssize_t len)> MessageCallback;$/;"	t	namespace:muduo
MessageCallback	reactor/s06/Callbacks.h	/^                              ssize_t len)> MessageCallback;$/;"	t	namespace:muduo
MessageCallback	reactor/s07/Callbacks.h	/^                              Timestamp)> MessageCallback;$/;"	t	namespace:muduo
MessageCallback	reactor/s08/Callbacks.h	/^                              Timestamp)> MessageCallback;$/;"	t	namespace:muduo
MessageCallback	reactor/s09/Callbacks.h	/^                              Timestamp)> MessageCallback;$/;"	t	namespace:muduo
MessageCallback	reactor/s10/Callbacks.h	/^                              Timestamp)> MessageCallback;$/;"	t	namespace:muduo
MessageCallback	reactor/s11/Callbacks.h	/^                              Timestamp)> MessageCallback;$/;"	t	namespace:muduo
MessageCallback	reactor/s12/Callbacks.h	/^                              Timestamp)> MessageCallback;$/;"	t	namespace:muduo
MessageCallback	reactor/s13/Callbacks.h	/^                              Timestamp)> MessageCallback;$/;"	t	namespace:muduo
MessageType	protorpc/muduo/rpc/proto/RpcProto.java	/^    private MessageType(int index, int value) {$/;"	m	class:RpcProto.MessageType	file:
MessageType	protorpc/muduo/rpc/proto/RpcProto.java	/^  public enum MessageType$/;"	g	class:RpcProto
Milk	puzzle/Einstein.java	/^        Tea, Coffee, Milk, Beer, Water;$/;"	e	enum:Einstein.Drink	file:
MockChannel	protorpc/muduo/rpc/test/MockChannel.java	/^class MockChannel implements Channel {$/;"	c
Money	java/billing/Money.java	/^    public Money(long pips) {$/;"	m	class:Money
Money	java/billing/Money.java	/^public class Money {$/;"	c
MutexLock	thread/Mutex.h	/^  MutexLock()$/;"	f	class:muduo::MutexLock
MutexLock	thread/Mutex.h	/^class MutexLock : boost::noncopyable$/;"	c	namespace:muduo
MutexLockGuard	thread/Mutex.h	/^  explicit MutexLockGuard(MutexLock& mutex) : mutex_(mutex)$/;"	f	class:muduo::MutexLockGuard
MutexLockGuard	thread/Mutex.h	/^class MutexLockGuard : boost::noncopyable$/;"	c	namespace:muduo
MutexLockGuard	thread/Mutex.h	93;"	d
N	logging/LogStream_bench.cc	/^const int N = 1000000;$/;"	v
N	puzzle/latin_square.cc	/^int N = 4;$/;"	v
N	puzzle/nqueens.cc	/^  const int N;$/;"	m	struct:BackTracking	file:
N	puzzle/nqueens_mt.cc	/^  const int N;$/;"	m	struct:BackTracking	file:
N	puzzle/nqueens_opt.cc	/^  const int N;$/;"	m	struct:BackTracking	file:
N	puzzle/nqueens_opt_mt.cc	/^  const int N;$/;"	m	struct:BackTracking	file:
N	ssl/loop-polarssl.cc	/^const int N = 500;$/;"	v
N	sudoku/sudoku.h	/^enum { ROW=9, COL=9, N = 81, NEIGHBOR = 20 };$/;"	e	enum:__anon2
NBODIES	puzzle/nbody.c	92;"	d	file:
NEIGHBOR	sudoku/sudoku.h	/^enum { ROW=9, COL=9, N = 81, NEIGHBOR = 20 };$/;"	e	enum:__anon2
NO_METHOD	protorpc/muduo/rpc/proto/RpcProto.java	/^    NO_METHOD(2, 3),$/;"	e	enum:RpcProto.ErrorCode	file:
NO_METHOD_VALUE	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int NO_METHOD_VALUE = 3;$/;"	f	class:RpcProto.ErrorCode
NO_SERVICE	protorpc/muduo/rpc/proto/RpcProto.java	/^    NO_SERVICE(1, 2),$/;"	e	enum:RpcProto.ErrorCode	file:
NO_SERVICE_VALUE	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int NO_SERVICE_VALUE = 2;$/;"	f	class:RpcProto.ErrorCode
NUM	sudoku/sudoku.h	/^const int NUM = 9;$/;"	v
NUM_LOG_LEVELS	logging/Logging.h	/^    NUM_LOG_LEVELS,$/;"	e	enum:muduo::Logger::LogLevel
Nation	puzzle/Einstein.java	/^    public enum Nation {$/;"	g	class:Einstein
NewChannelCallback	protorpc/muduo/rpc/NewChannelCallback.java	/^public interface NewChannelCallback {$/;"	i
NewConnectionCallback	reactor/s04/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s05/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s06/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s07/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s08/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s09/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s10/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s11/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s11/Connector.h	/^  typedef boost::function<void (int sockfd)> NewConnectionCallback;$/;"	t	class:muduo::Connector
NewConnectionCallback	reactor/s12/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s12/Connector.h	/^  typedef boost::function<void (int sockfd)> NewConnectionCallback;$/;"	t	class:muduo::Connector
NewConnectionCallback	reactor/s13/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::Acceptor
NewConnectionCallback	reactor/s13/Connector.h	/^  typedef boost::function<void (int sockfd)> NewConnectionCallback;$/;"	t	class:muduo::Connector
NoAlloc	string/StringEager.h	/^  struct NoAlloc { };$/;"	s	class:muduo::StringEager
Node	puzzle/dance.cc	/^struct Node$/;"	s	file:
Node	sudoku/sudoku_dancing_links.cc	/^struct Node$/;"	s	file:
NormalCustomer	java/bankqueue/customer/NormalCustomer.java	/^    public NormalCustomer(int id, int serviceTime) {$/;"	m	class:NormalCustomer
NormalCustomer	java/bankqueue/customer/NormalCustomer.java	/^public class NormalCustomer extends Customer {$/;"	c
NormalCustomerTest	java/billing/test/NormalCustomerTest.java	/^public class NormalCustomerTest {$/;"	c
Norway	puzzle/Einstein.java	/^        England, Sweden, Danmark, Norway, Germany;$/;"	e	enum:Einstein.Nation	file:
OBJS	reactor/reactor_lib.mk	/^OBJS = $(patsubst %.cc,%.o,$(MUDUO_SRC))$/;"	m
Observable	thread/test/Observer.cc	/^class Observable$/;"	c	file:
Observable	thread/test/Observer_safe.cc	/^class Observable$/;"	c	file:
Observer	thread/test/Observer.cc	/^class Observer$/;"	c	file:
Observer	thread/test/Observer_safe.cc	/^class Observer : public boost::enable_shared_from_this<Observer>$/;"	c	file:
Options	tpc/ttcp.cc	/^  Options()$/;"	f	struct:Options
Options	tpc/ttcp.cc	/^struct Options$/;"	s	file:
OutputFile	esort/sort00.cc	/^  OutputFile(const char* filename)$/;"	f	class:OutputFile
OutputFile	esort/sort00.cc	/^class OutputFile : boost::noncopyable$/;"	c	file:
OutputFile	esort/sort01.cc	/^  OutputFile(const char* filename)$/;"	f	class:OutputFile
OutputFile	esort/sort01.cc	/^class OutputFile : boost::noncopyable$/;"	c	file:
OutputFile	esort/sort02.cc	/^  OutputFile(const char* filename)$/;"	f	class:OutputFile
OutputFile	esort/sort02.cc	/^class OutputFile : boost::noncopyable$/;"	c	file:
OutputFile	esort/sort03.cc	/^  OutputFile(const char* filename)$/;"	f	class:OutputFile
OutputFile	esort/sort03.cc	/^class OutputFile : boost::noncopyable$/;"	c	file:
OutputFile	esort/sort04.cc	/^  OutputFile(const char* filename)$/;"	f	class:OutputFile
OutputFile	esort/sort04.cc	/^class OutputFile : boost::noncopyable$/;"	c	file:
OutputFile	esort/sort10.cc	/^  OutputFile(const char* filename)$/;"	f	class:OutputFile
OutputFile	esort/sort10.cc	/^class OutputFile : boost::noncopyable$/;"	c	file:
OutputFile	esort/sort11.cc	/^  OutputFile(const char* filename)$/;"	f	class:OutputFile
OutputFile	esort/sort11.cc	/^class OutputFile : boost::noncopyable$/;"	c	file:
OutputFile	esort/sort12.cc	/^  OutputFile(const char* filename)$/;"	f	class:OutputFile
OutputFile	esort/sort12.cc	/^class OutputFile : boost::noncopyable$/;"	c	file:
OutputFunc	logging/Logging.h	/^  typedef void (*OutputFunc)(const char* msg, int len);$/;"	t	class:muduo::Logger
Outstanding	protorpc/muduo/rpc/RpcChannel.java	/^        public Outstanding(Message responsePrototype, RpcCallback<Message> done) {$/;"	m	class:RpcChannel.Outstanding
Outstanding	protorpc/muduo/rpc/RpcChannel.java	/^    private final static class Outstanding {$/;"	c	class:RpcChannel
PAYLOAD_FIELD_NUMBER	protorpc/echo/EchoProto.java	/^    public static final int PAYLOAD_FIELD_NUMBER = 1;$/;"	f	class:EchoProto.EchoRequest
PAYLOAD_FIELD_NUMBER	protorpc/echo/EchoProto.java	/^    public static final int PAYLOAD_FIELD_NUMBER = 2;$/;"	f	class:EchoProto.EchoResponse
PICS	datetime/Makefile	/^PICS=$(wildcard *.pic)$/;"	m
PIC_PNGS	datetime/Makefile	/^PIC_PNGS=$(subst pic,png,$(PICS))$/;"	m
PNG_DPI	datetime/Makefile	/^$(PIC_PNGS): PNG_DPI=144$/;"	m
PNG_DPI	datetime/Makefile	/^PNG_DPI=300$/;"	m
PROTOBUF_CODEC_H	protobuf/codec.h	9;"	d
PackageType	java/billing/DataFields.java	/^    public static enum PackageType {$/;"	g	class:DataFields
PallMall	puzzle/Einstein.java	/^        PallMall, Dunhill, BlueMaster, Prince, Blends;$/;"	e	enum:Einstein.Cigar	file:
PayloadMessage	tpc/ttcp.cc	/^struct PayloadMessage$/;"	s	file:
PdfHack	java/pdf/com/chenshuo/pdf/PdfHack.java	/^public class PdfHack {$/;"	c
Pet	puzzle/Einstein.java	/^    public enum Pet {$/;"	g	class:Einstein
Planet	puzzle/nbody.cc	/^  Planet(const Vector3& position, const Vector3& velocity, double mass)$/;"	f	struct:Planet
Planet	puzzle/nbody.cc	/^struct Planet$/;"	s	file:
PollFdList	reactor/s01/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s02/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s03/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s04/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s05/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s06/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s07/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s08/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s09/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s10/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s11/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s12/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
PollFdList	reactor/s13/Poller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::Poller
Poller	reactor/s01/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s01/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s02/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s02/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s03/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s03/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s04/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s04/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s05/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s05/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s06/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s06/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s07/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s07/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s08/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s08/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s09/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s09/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s10/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s10/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s11/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s11/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s12/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s12/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Poller	reactor/s13/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
Poller	reactor/s13/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo
Prince	puzzle/Einstein.java	/^        PallMall, Dunhill, BlueMaster, Prince, Blends;$/;"	e	enum:Einstein.Cigar	file:
ProtobufDecoder	protorpc/muduo/codec/ProtobufDecoder.java	/^public class ProtobufDecoder extends OneToOneDecoder {$/;"	c
ProtobufDispatcher	protobuf/dispatcher.cc	/^  ProtobufDispatcher()$/;"	f	class:ProtobufDispatcher
ProtobufDispatcher	protobuf/dispatcher.cc	/^class ProtobufDispatcher$/;"	c	file:
ProtobufDispatcherLite	protobuf/dispatcher_lite.cc	/^  explicit ProtobufDispatcherLite(const ProtobufMessageCallback& defaultCb)$/;"	f	class:ProtobufDispatcherLite
ProtobufDispatcherLite	protobuf/dispatcher_lite.cc	/^class ProtobufDispatcherLite$/;"	c	file:
ProtobufEncoder	protorpc/muduo/codec/ProtobufEncoder.java	/^    public ProtobufEncoder() {$/;"	m	class:ProtobufEncoder
ProtobufEncoder	protorpc/muduo/codec/ProtobufEncoder.java	/^public class ProtobufEncoder extends OneToOneEncoder {$/;"	c
ProtobufMessageCallback	protobuf/dispatcher.cc	/^  typedef boost::function<void (T* message)> ProtobufMessageCallback;$/;"	t	class:CallbackT	file:
ProtobufMessageCallback	protobuf/dispatcher_lite.cc	/^  typedef boost::function<void (google::protobuf::Message* message)> ProtobufMessageCallback;$/;"	t	class:ProtobufDispatcherLite	file:
QUESTIONER_FIELD_NUMBER	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final int QUESTIONER_FIELD_NUMBER = 2;$/;"	f	class:QueryProtos.Answer
QUESTIONER_FIELD_NUMBER	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final int QUESTIONER_FIELD_NUMBER = 2;$/;"	f	class:QueryProtos.Query
QUESTION_FIELD_NUMBER	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final int QUESTION_FIELD_NUMBER = 3;$/;"	f	class:QueryProtos.Query
Query	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Query(Builder builder) {$/;"	m	class:QueryProtos.Query	file:
Query	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Query(boolean noInit) {}$/;"	m	class:QueryProtos.Query	file:
Query	protorpc/muduo/codec/tests/QueryProtos.java	/^  public static final class Query extends$/;"	c	class:QueryProtos
QueryOrBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^  public interface QueryOrBuilder$/;"	i	class:QueryProtos
QueryProtos	protorpc/muduo/codec/tests/QueryProtos.java	/^  private QueryProtos() {}$/;"	m	class:QueryProtos	file:
QueryProtos	protorpc/muduo/codec/tests/QueryProtos.java	/^public final class QueryProtos {$/;"	c
REQUEST	protorpc/muduo/rpc/proto/RpcProto.java	/^    REQUEST(0, 1),$/;"	e	enum:RpcProto.MessageType	file:
REQUEST_FIELD_NUMBER	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int REQUEST_FIELD_NUMBER = 5;$/;"	f	class:RpcProto.RpcMessage
REQUEST_VALUE	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int REQUEST_VALUE = 1;$/;"	f	class:RpcProto.MessageType
RESPONSE	protorpc/muduo/rpc/proto/RpcProto.java	/^    RESPONSE(1, 2),$/;"	e	enum:RpcProto.MessageType	file:
RESPONSE_FIELD_NUMBER	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int RESPONSE_FIELD_NUMBER = 6;$/;"	f	class:RpcProto.RpcMessage
RESPONSE_VALUE	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int RESPONSE_VALUE = 2;$/;"	f	class:RpcProto.MessageType
ROW	sudoku/sudoku.h	/^enum { ROW=9, COL=9, N = 81, NEIGHBOR = 20 };$/;"	e	enum:__anon2
Radix	basic/uint.h	/^  enum Radix$/;"	g	class:UnsignedInt
ReadEventCallback	reactor/s07/Channel.h	/^  typedef boost::function<void(Timestamp)> ReadEventCallback;$/;"	t	class:muduo::Channel
ReadEventCallback	reactor/s08/Channel.h	/^  typedef boost::function<void(Timestamp)> ReadEventCallback;$/;"	t	class:muduo::Channel
ReadEventCallback	reactor/s09/Channel.h	/^  typedef boost::function<void(Timestamp)> ReadEventCallback;$/;"	t	class:muduo::Channel
ReadEventCallback	reactor/s10/Channel.h	/^  typedef boost::function<void(Timestamp)> ReadEventCallback;$/;"	t	class:muduo::Channel
ReadEventCallback	reactor/s11/Channel.h	/^  typedef boost::function<void(Timestamp)> ReadEventCallback;$/;"	t	class:muduo::Channel
ReadEventCallback	reactor/s12/Channel.h	/^  typedef boost::function<void(Timestamp)> ReadEventCallback;$/;"	t	class:muduo::Channel
ReadEventCallback	reactor/s13/Channel.h	/^  typedef boost::function<void(Timestamp)> ReadEventCallback;$/;"	t	class:muduo::Channel
Record	algorithm/mergeN.cc	/^typedef int Record;$/;"	t	file:
Record	esort/sort02.cc	/^  Record(InputFile* in)$/;"	f	struct:Record
Record	esort/sort02.cc	/^struct Record$/;"	s	file:
Record	esort/sort03.cc	/^  Record(InputFile* in)$/;"	f	struct:Record
Record	esort/sort03.cc	/^struct Record$/;"	s	file:
Record	esort/sort04.cc	/^struct Record$/;"	s	file:
Record	esort/sort10.cc	/^  Record(Source& src)$/;"	f	struct:Record
Record	esort/sort10.cc	/^struct Record$/;"	s	file:
Record	esort/sort11.cc	/^  Record(Source& src)$/;"	f	struct:Record
Record	esort/sort11.cc	/^struct Record$/;"	s	file:
Record	esort/sort12.cc	/^  Record(Source& src)$/;"	f	struct:Record
Record	esort/sort12.cc	/^struct Record$/;"	s	file:
Red	puzzle/Einstein.java	/^        Red, Green, Yellow, Blue, White;$/;"	e	enum:Einstein.Color	file:
Request	thread/test/MutualDeadLock.cc	/^class Request$/;"	c	file:
Request	thread/test/RequestInventory_test.cc	/^  Request()$/;"	f	class:Request
Request	thread/test/RequestInventory_test.cc	/^class Request$/;"	c	file:
Request	thread/test/RequestInventory_test2.cc	/^  Request()$/;"	f	class:Request
Request	thread/test/RequestInventory_test2.cc	/^class Request : public boost::enable_shared_from_this<Request>$/;"	c	file:
Request	thread/test/SelfDeadLock.cc	/^class Request$/;"	c	file:
RequestList	thread/test/RequestInventory_test.cc	/^  typedef std::set<Request*> RequestList;$/;"	t	class:Inventory	file:
RequestList	thread/test/RequestInventory_test2.cc	/^  typedef std::set<RequestPtr> RequestList;$/;"	t	class:Inventory	file:
RequestListPtr	thread/test/RequestInventory_test.cc	/^  typedef boost::shared_ptr<RequestList> RequestListPtr;$/;"	t	class:Inventory	file:
RequestListPtr	thread/test/RequestInventory_test2.cc	/^  typedef boost::shared_ptr<RequestList> RequestListPtr;$/;"	t	class:Inventory	file:
RequestPtr	thread/test/RequestInventory_test2.cc	/^typedef boost::shared_ptr<Request> RequestPtr;$/;"	t	file:
RpcChannel	protorpc/muduo/rpc/RpcChannel.java	/^    public RpcChannel(Channel channel) {$/;"	m	class:RpcChannel
RpcChannel	protorpc/muduo/rpc/RpcChannel.java	/^public class RpcChannel implements com.google.protobuf.RpcChannel, BlockingRpcChannel {$/;"	c
RpcChannelPiplineFactory	protorpc/muduo/rpc/RpcChannelPiplineFactory.java	/^    public RpcChannelPiplineFactory(RpcPeer peer) {$/;"	m	class:RpcChannelPiplineFactory
RpcChannelPiplineFactory	protorpc/muduo/rpc/RpcChannelPiplineFactory.java	/^public class RpcChannelPiplineFactory implements ChannelPipelineFactory {$/;"	c
RpcClient	protorpc/muduo/rpc/RpcClient.java	/^    public RpcClient() {$/;"	m	class:RpcClient
RpcClient	protorpc/muduo/rpc/RpcClient.java	/^    public RpcClient(ChannelFactory channelFactory) {$/;"	m	class:RpcClient
RpcClient	protorpc/muduo/rpc/RpcClient.java	/^public class RpcClient extends RpcPeer {$/;"	c
RpcDecoder	protorpc/muduo/rpc/RpcDecoder.java	/^public class RpcDecoder extends OneToOneDecoder {$/;"	c
RpcEncoder	protorpc/muduo/rpc/RpcEncoder.java	/^    public RpcEncoder() {$/;"	m	class:RpcEncoder
RpcEncoder	protorpc/muduo/rpc/RpcEncoder.java	/^public class RpcEncoder extends OneToOneEncoder {$/;"	c
RpcMessage	protorpc/muduo/rpc/proto/RpcProto.java	/^    private RpcMessage(Builder builder) {$/;"	m	class:RpcProto.RpcMessage	file:
RpcMessage	protorpc/muduo/rpc/proto/RpcProto.java	/^    private RpcMessage(boolean noInit) {}$/;"	m	class:RpcProto.RpcMessage	file:
RpcMessage	protorpc/muduo/rpc/proto/RpcProto.java	/^  public static final class RpcMessage extends$/;"	c	class:RpcProto
RpcMessageHandler	protorpc/muduo/rpc/RpcMessageHandler.java	/^    public RpcMessageHandler(RpcPeer peer) {$/;"	m	class:RpcMessageHandler
RpcMessageHandler	protorpc/muduo/rpc/RpcMessageHandler.java	/^public class RpcMessageHandler extends SimpleChannelUpstreamHandler {$/;"	c
RpcMessageOrBuilder	protorpc/muduo/rpc/proto/RpcProto.java	/^  public interface RpcMessageOrBuilder$/;"	i	class:RpcProto
RpcPeer	protorpc/muduo/rpc/RpcPeer.java	/^public abstract class RpcPeer {$/;"	c
RpcProto	protorpc/muduo/rpc/proto/RpcProto.java	/^  private RpcProto() {}$/;"	m	class:RpcProto	file:
RpcProto	protorpc/muduo/rpc/proto/RpcProto.java	/^public final class RpcProto {$/;"	c
RpcServer	protorpc/muduo/rpc/RpcServer.java	/^    public RpcServer() {$/;"	m	class:RpcServer
RpcServer	protorpc/muduo/rpc/RpcServer.java	/^public class RpcServer extends RpcPeer {$/;"	c
RpcTest	protorpc/muduo/rpc/test/RpcTest.java	/^public class RpcTest {$/;"	c
Rule	java/billing/Rule.java	/^public abstract class Rule implements Cloneable {$/;"	c
RuleFactory	java/billing/RuleFactory.java	/^    public RuleFactory(String rulePath) {$/;"	m	class:RuleFactory
RuleFactory	java/billing/RuleFactory.java	/^public class RuleFactory {$/;"	c
SA	reactor/s04/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon5	typeref:struct:__anon5::sockaddr	file:
SA	reactor/s05/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon12	typeref:struct:__anon12::sockaddr	file:
SA	reactor/s06/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon10	typeref:struct:__anon10::sockaddr	file:
SA	reactor/s07/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon11	typeref:struct:__anon11::sockaddr	file:
SA	reactor/s08/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon14	typeref:struct:__anon14::sockaddr	file:
SA	reactor/s09/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon13	typeref:struct:__anon13::sockaddr	file:
SA	reactor/s10/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon6	typeref:struct:__anon6::sockaddr	file:
SA	reactor/s11/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon15	typeref:struct:__anon15::sockaddr	file:
SA	reactor/s12/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon7	typeref:struct:__anon7::sockaddr	file:
SA	reactor/s13/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon8	typeref:struct:__anon8::sockaddr	file:
SA	tpc/Socket.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon17	typeref:struct:__anon17::sockaddr	file:
SERVICE_FIELD_NUMBER	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int SERVICE_FIELD_NUMBER = 3;$/;"	f	class:RpcProto.RpcMessage
SOLUTION_FIELD_NUMBER	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static final int SOLUTION_FIELD_NUMBER = 4;$/;"	f	class:QueryProtos.Answer
SOLVED_FIELD_NUMBER	protorpc/sudoku/Sudoku.java	/^    public static final int SOLVED_FIELD_NUMBER = 1;$/;"	f	class:Sudoku.SudokuResponse
SRC	topk/Makefile	/^SRC = ..\/src$/;"	m
SRCS	utility/Makefile	/^SRCS=x$/;"	m
STL	thread/test/SingletonThreadLocal_test.cc	29;"	d	file:
SUBDIRS	reactor/Makefile	/^SUBDIRS = s00 s01 s02 s03 s04 s05 s06 s07 s08 s09 s10$/;"	m
SUDOKU_H	sudoku/sudoku.h	2;"	d
Score	puzzle/poker/poker.cc	/^struct Score$/;"	s	file:
Server	protorpc/sudoku/Server.java	/^public class Server {$/;"	c
SessionMessage	tpc/ttcp.cc	/^struct SessionMessage$/;"	s	file:
Shape	puzzle/huarong.cc	/^enum class Shape \/\/ : int8_t$/;"	c	file:
Shuffler	puzzle/query_freq.cc	/^  explicit Shuffler(int nbuckets)$/;"	f	class:Shuffler
Shuffler	puzzle/query_freq.cc	/^class Shuffler : boost::noncopyable$/;"	c	file:
Signal	thread/SignalSlot.h	/^  Signal()$/;"	f	class:muduo::Signal
Signal	thread/SignalSlot.h	/^class Signal<RET(ARGS...)> : boost::noncopyable$/;"	c	namespace:muduo
SignalImpl	thread/SignalSlot.h	/^  SignalImpl()$/;"	f	struct:muduo::detail::SignalImpl
SignalImpl	thread/SignalSlot.h	/^  typedef detail::SignalImpl<Callback> SignalImpl;$/;"	t	class:muduo::Signal
SignalImpl	thread/SignalSlot.h	/^struct SignalImpl : boost::noncopyable$/;"	s	namespace:muduo::detail
SignalTrivial	thread/SignalSlotTrivial.h	/^class SignalTrivial<RET(ARGS...)>$/;"	c
Singleton	thread/Singleton.h	/^class Singleton : boost::noncopyable$/;"	c	namespace:muduo
Slip	java/billing/Slip.java	/^    public Slip(SlipType type, LocalDateTime time, long data) {$/;"	m	class:Slip
Slip	java/billing/Slip.java	/^public class Slip {$/;"	c
SlipType	java/billing/DataFields.java	/^    public static enum SlipType {$/;"	g	class:DataFields
Slot	thread/SignalSlot.h	/^typedef boost::shared_ptr<void> Slot;$/;"	t	namespace:muduo
SlotImpl	thread/SignalSlot.h	/^  SlotImpl(const boost::shared_ptr<Data>& data, Callback&& cb)$/;"	f	struct:muduo::detail::SlotImpl
SlotImpl	thread/SignalSlot.h	/^  SlotImpl(const boost::shared_ptr<Data>& data, Callback&& cb,$/;"	f	struct:muduo::detail::SlotImpl
SlotImpl	thread/SignalSlot.h	/^  typedef detail::SlotImpl<Callback> SlotImpl;$/;"	t	class:muduo::Signal
SlotImpl	thread/SignalSlot.h	/^struct SlotImpl : boost::noncopyable$/;"	s	namespace:muduo::detail
SlotList	thread/SignalSlot.h	/^  typedef std::vector<boost::weak_ptr<SlotImpl<Callback> > > SlotList;$/;"	t	struct:muduo::detail::SignalImpl
Socket	reactor/s04/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s04/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s05/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s05/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s06/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s06/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s07/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s07/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s08/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s08/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s09/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s09/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s10/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s10/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s11/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s11/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s12/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s12/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	reactor/s13/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::Socket
Socket	reactor/s13/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo
Socket	tpc/Socket.cc	/^Socket::Socket(int sockfd)$/;"	f	class:Socket
Socket	tpc/Socket.h	/^  Socket(Socket&& rhs)$/;"	f	class:Socket
Socket	tpc/Socket.h	/^class Socket : noncopyable$/;"	c
SocketAddr	faketcp/faketcp.h	/^struct SocketAddr$/;"	s
Source	esort/sort04.cc	/^  Source(InputFile* in)$/;"	f	struct:Source
Source	esort/sort04.cc	/^struct Source$/;"	s	file:
Source	esort/sort10.cc	/^struct Source$/;"	s	file:
Source	esort/sort11.cc	/^struct Source$/;"	s	file:
Source	esort/sort12.cc	/^struct Source$/;"	s	file:
Source	puzzle/query_freq.cc	/^  explicit Source(std::ifstream* in)$/;"	f	class:Source
Source	puzzle/query_freq.cc	/^class Source$/;"	c	file:
Source	topk/merger.cc	/^  explicit Source(std::istream* in)$/;"	f	class:Source
Source	topk/merger.cc	/^class Source$/;"	c	file:
State	puzzle/huarong.cc	/^struct State$/;"	s	file:
State	puzzle/waterpour.cc	/^  State(int b = 0, int s = 0)$/;"	f	struct:State
State	puzzle/waterpour.cc	/^struct State$/;"	s	file:
StateE	reactor/s05/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, };$/;"	g	class:muduo::TcpConnection
StateE	reactor/s06/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnected, };$/;"	g	class:muduo::TcpConnection
StateE	reactor/s07/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnected, };$/;"	g	class:muduo::TcpConnection
StateE	reactor/s08/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	g	class:muduo::TcpConnection
StateE	reactor/s09/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	g	class:muduo::TcpConnection
StateE	reactor/s10/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	g	class:muduo::TcpConnection
StateE	reactor/s11/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	g	class:muduo::TcpConnection
StateE	reactor/s12/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	g	class:muduo::TcpConnection
StateE	reactor/s13/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	g	class:muduo::TcpConnection
States	reactor/s11/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	g	class:muduo::Connector
States	reactor/s12/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	g	class:muduo::Connector
States	reactor/s13/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	g	class:muduo::Connector
Step	puzzle/waterpour.cc	/^  Step(const State& s, int p)$/;"	f	struct:Step
Step	puzzle/waterpour.cc	/^struct Step$/;"	s	file:
Stock	thread/test/Factory.cc	/^  Stock(const string& name)$/;"	f	class:Stock
Stock	thread/test/Factory.cc	/^class Stock : boost::noncopyable$/;"	c	file:
StockFactory	thread/test/Factory.cc	/^class StockFactory : boost::noncopyable$/;"	c	namespace:version1	file:
StockFactory	thread/test/Factory.cc	/^class StockFactory : boost::noncopyable$/;"	c	namespace:version2	file:
StockFactory	thread/test/Factory.cc	/^class StockFactory : boost::noncopyable$/;"	c	namespace:version3	file:
StockFactory	thread/test/Factory.cc	/^class StockFactory : public boost::enable_shared_from_this<StockFactory>,$/;"	c	file:
StockFactory	thread/test/Factory.cc	/^class StockFactory : public boost::enable_shared_from_this<StockFactory>,$/;"	c	namespace:version4	file:
String	puzzle/poker/poker.cc	/^struct String$/;"	s	file:
String	string/StringTrivial.h	/^  String()$/;"	f	class:trivial::String
String	string/StringTrivial.h	/^  String(const String& rhs)$/;"	f	class:trivial2::String
String	string/StringTrivial.h	/^  String(const String& rhs)$/;"	f	class:trivial::String
String	string/StringTrivial.h	/^  String(const char* str)$/;"	f	class:trivial2::String
String	string/StringTrivial.h	/^  String(const char* str)$/;"	f	class:trivial::String
String	string/StringTrivial.h	/^  String(const char* str, size_t len)$/;"	f	class:trivial2::String
String	string/StringTrivial.h	/^class String$/;"	c	namespace:trivial
String	string/StringTrivial.h	/^class String$/;"	c	namespace:trivial2
String	string/test.cc	/^typedef muduo::StringEager String;$/;"	t	file:
String	thread/test/SignalSlot_test.cc	/^  String(String&& rhs)$/;"	f	class:String
String	thread/test/SignalSlot_test.cc	/^  String(const String& rhs)$/;"	f	class:String
String	thread/test/SignalSlot_test.cc	/^  String(const char* str)$/;"	f	class:String
String	thread/test/SignalSlot_test.cc	/^class String$/;"	c	file:
String	thread/test/WeakCallback_test.cc	/^  String(String&& rhs)$/;"	f	class:String
String	thread/test/WeakCallback_test.cc	/^  String(const String& rhs)$/;"	f	class:String
String	thread/test/WeakCallback_test.cc	/^  String(const char* str)$/;"	f	class:String
String	thread/test/WeakCallback_test.cc	/^class String$/;"	c	file:
StringArg	tpc/Common.h	/^  StringArg(const char* str)$/;"	f	class:StringArg
StringArg	tpc/Common.h	/^  StringArg(const std::string& str)$/;"	f	class:StringArg
StringArg	tpc/Common.h	/^class StringArg : copyable$/;"	c
StringEager	string/StringEager.cc	/^StringEager::StringEager(StringEager&& rhs)$/;"	f	class:StringEager
StringEager	string/StringEager.cc	/^StringEager::StringEager(char* str, uint32_t sz, uint32_t cap, NoAlloc)$/;"	f	class:StringEager
StringEager	string/StringEager.cc	/^StringEager::StringEager(const StringEager& rhs)$/;"	f	class:StringEager
StringEager	string/StringEager.cc	/^StringEager::StringEager(const char* str)$/;"	f	class:StringEager
StringEager	string/StringEager.cc	/^StringEager::StringEager(const char* str, size_t len)$/;"	f	class:StringEager
StringEager	string/StringEager.h	/^  StringEager()$/;"	f	class:muduo::StringEager
StringEager	string/StringEager.h	/^class StringEager \/\/ : copyable$/;"	c	namespace:muduo
StringSso	string/StringSso.h	/^class StringSso \/\/ : copyable$/;"	c	namespace:muduo
Stub	protorpc/echo/EchoProto.java	/^      private Stub(com.google.protobuf.RpcChannel channel) {$/;"	m	class:EchoProto.EchoService.Stub	file:
Stub	protorpc/echo/EchoProto.java	/^    public static final class Stub extends echo.EchoProto.EchoService implements Interface {$/;"	c	class:EchoProto.EchoService
Stub	protorpc/sudoku/Sudoku.java	/^      private Stub(com.google.protobuf.RpcChannel channel) {$/;"	m	class:Sudoku.SudokuService.Stub	file:
Stub	protorpc/sudoku/Sudoku.java	/^    public static final class Stub extends sudoku.Sudoku.SudokuService implements Interface {$/;"	c	class:Sudoku.SudokuService
Sudoku	protorpc/sudoku/Sudoku.java	/^  private Sudoku() {}$/;"	m	class:Sudoku	file:
Sudoku	protorpc/sudoku/Sudoku.java	/^public final class Sudoku {$/;"	c
SudokuImpl	protorpc/sudoku/SudokuImpl.java	/^public class SudokuImpl implements Interface {$/;"	c
SudokuRequest	protorpc/sudoku/Sudoku.java	/^    private SudokuRequest(Builder builder) {$/;"	m	class:Sudoku.SudokuRequest	file:
SudokuRequest	protorpc/sudoku/Sudoku.java	/^    private SudokuRequest(boolean noInit) {}$/;"	m	class:Sudoku.SudokuRequest	file:
SudokuRequest	protorpc/sudoku/Sudoku.java	/^  public static final class SudokuRequest extends$/;"	c	class:Sudoku
SudokuRequestOrBuilder	protorpc/sudoku/Sudoku.java	/^  public interface SudokuRequestOrBuilder$/;"	i	class:Sudoku
SudokuResponse	protorpc/sudoku/Sudoku.java	/^    private SudokuResponse(Builder builder) {$/;"	m	class:Sudoku.SudokuResponse	file:
SudokuResponse	protorpc/sudoku/Sudoku.java	/^    private SudokuResponse(boolean noInit) {}$/;"	m	class:Sudoku.SudokuResponse	file:
SudokuResponse	protorpc/sudoku/Sudoku.java	/^  public static final class SudokuResponse extends$/;"	c	class:Sudoku
SudokuResponseOrBuilder	protorpc/sudoku/Sudoku.java	/^  public interface SudokuResponseOrBuilder$/;"	i	class:Sudoku
SudokuService	protorpc/sudoku/Sudoku.java	/^    protected SudokuService() {}$/;"	m	class:Sudoku.SudokuService
SudokuService	protorpc/sudoku/Sudoku.java	/^  public static abstract class SudokuService$/;"	c	class:Sudoku
Sweden	puzzle/Einstein.java	/^        England, Sweden, Danmark, Norway, Germany;$/;"	e	enum:Einstein.Nation	file:
SyncClient	protorpc/echo/EchoClient.java	/^        public SyncClient(ChannelFactory channelFactory, SocketAddress server) {$/;"	m	class:EchoClient.SyncClient
SyncClient	protorpc/echo/EchoClient.java	/^    public static class SyncClient implements Runnable {$/;"	c	class:EchoClient
T	logging/LogStream.h	/^  T(const char* str, int len)$/;"	f	class:muduo::T
T	logging/LogStream.h	/^class T$/;"	c	namespace:muduo
TARGETS	protobuf/Makefile	/^TARGETS=$(BINARIES)$/;"	m
TARGETS	protobuf/Makefile	/^TARGETS=codec_test descriptor_test$/;"	m
TESTS	thread/Makefile	/^TESTS= atomic_unittest \\$/;"	m
TEXES	datetime/Makefile	/^TEXES=$(wildcard *.tex)$/;"	m
TEX_PNGS	datetime/Makefile	/^TEX_PNGS=$(subst tex,png,$(TEXES))$/;"	m
TMP_DIR	esort/sort02.cc	27;"	d	file:
TRACE	logging/Logging.h	/^    TRACE,$/;"	e	enum:muduo::Logger::LogLevel
TYPE_FIELD_NUMBER	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int TYPE_FIELD_NUMBER = 1;$/;"	f	class:RpcProto.RpcMessage
Task	esort/sort03.cc	/^  Task(muduo::BlockingQueue<TaskPtr>* queue)$/;"	f	class:Task
Task	esort/sort03.cc	/^class Task : public boost::enable_shared_from_this<Task>$/;"	c	file:
Task	esort/sort04.cc	/^  Task(muduo::BlockingQueue<TaskPtr>* queue)$/;"	f	class:Task
Task	esort/sort04.cc	/^class Task : public boost::enable_shared_from_this<Task>$/;"	c	file:
Task	thread/ThreadPool.h	/^  typedef boost::function<void ()> Task;$/;"	t	class:muduo::ThreadPool
TaskPtr	esort/sort03.cc	/^typedef boost::shared_ptr<Task> TaskPtr;$/;"	t	file:
TaskPtr	esort/sort04.cc	/^typedef boost::shared_ptr<Task> TaskPtr;$/;"	t	file:
TcpClient	reactor/s12/TcpClient.cc	/^TcpClient::TcpClient(EventLoop* loop,$/;"	f	class:TcpClient
TcpClient	reactor/s12/TcpClient.h	/^class TcpClient : boost::noncopyable$/;"	c	namespace:muduo
TcpClient	reactor/s13/TcpClient.cc	/^TcpClient::TcpClient(EventLoop* loop,$/;"	f	class:TcpClient
TcpClient	reactor/s13/TcpClient.h	/^class TcpClient : boost::noncopyable$/;"	c	namespace:muduo
TcpConnection	reactor/s05/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s05/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnection	reactor/s06/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s06/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnection	reactor/s07/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s07/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnection	reactor/s08/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s08/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnection	reactor/s09/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s09/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnection	reactor/s10/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s10/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnection	reactor/s11/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s11/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnection	reactor/s12/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s12/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnection	reactor/s13/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,$/;"	f	class:TcpConnection
TcpConnection	reactor/s13/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo
TcpConnectionPtr	reactor/s05/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s05/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s06/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s06/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s07/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s07/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s08/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s08/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s09/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s09/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s10/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s10/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s11/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s11/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s12/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s12/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s13/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpConnectionPtr	reactor/s13/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo
TcpServer	reactor/s05/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s05/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpServer	reactor/s06/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s06/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpServer	reactor/s07/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s07/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpServer	reactor/s08/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s08/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpServer	reactor/s09/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s09/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpServer	reactor/s10/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s10/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpServer	reactor/s11/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s11/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpServer	reactor/s12/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s12/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpServer	reactor/s13/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:TcpServer
TcpServer	reactor/s13/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo
TcpState	faketcp/discardall2.cc	/^struct TcpState$/;"	s	file:
TcpState	faketcp/echoall2.cc	/^struct TcpState$/;"	s	file:
TcpStream	tpc/TcpStream.cc	/^TcpStream::TcpStream(Socket&& sock)$/;"	f	class:TcpStream
TcpStream	tpc/TcpStream.h	/^class TcpStream : noncopyable$/;"	c
TcpStreamPtr	tpc/Acceptor.h	/^typedef std::unique_ptr<TcpStream> TcpStreamPtr;$/;"	t
TcpStreamPtr	tpc/TcpStream.h	/^typedef std::unique_ptr<TcpStream> TcpStreamPtr;$/;"	t
Tea	puzzle/Einstein.java	/^        Tea, Coffee, Milk, Beer, Water;$/;"	e	enum:Einstein.Drink	file:
Test	thread/test/BlockingQueue_test.cc	/^  Test(int numThreads)$/;"	f	class:Test
Test	thread/test/BlockingQueue_test.cc	/^class Test$/;"	c	file:
Test	thread/test/BoundedBlockingQueue_test.cc	/^  Test(int numThreads)$/;"	f	class:Test
Test	thread/test/BoundedBlockingQueue_test.cc	/^class Test$/;"	c	file:
Test	thread/test/SingletonThreadLocal_test.cc	/^  Test()$/;"	f	class:Test
Test	thread/test/SingletonThreadLocal_test.cc	/^class Test : boost::noncopyable$/;"	c	file:
Test	thread/test/Singleton_test.cc	/^  Test()$/;"	f	class:Test
Test	thread/test/Singleton_test.cc	/^class Test : boost::noncopyable$/;"	c	file:
Test	thread/test/ThreadLocalSingleton_test.cc	/^  Test()$/;"	f	class:Test
Test	thread/test/ThreadLocalSingleton_test.cc	/^class Test : boost::noncopyable$/;"	c	file:
Test	thread/test/ThreadLocal_test.cc	/^  Test()$/;"	f	class:Test
Test	thread/test/ThreadLocal_test.cc	/^class Test : boost::noncopyable$/;"	c	file:
TestCase	datetime/TimeZone_unittest.cc	/^struct TestCase$/;"	s	file:
TestPoker	puzzle/poker/poker_test.py	/^class TestPoker(unittest.TestCase):$/;"	c
Thread	thread/Thread.cc	/^Thread::Thread(const ThreadFunc& func, const std::string& n)$/;"	f	class:Thread
Thread	thread/Thread.h	/^class Thread : boost::noncopyable$/;"	c	namespace:muduo
ThreadData	thread/Thread.cc	/^  ThreadData(const ThreadFunc& func,$/;"	f	struct:__anon4::ThreadData
ThreadData	thread/Thread.cc	/^struct ThreadData$/;"	s	namespace:__anon4	file:
ThreadFunc	thread/Thread.cc	/^  typedef muduo::Thread::ThreadFunc ThreadFunc;$/;"	t	struct:__anon4::ThreadData	file:
ThreadFunc	thread/Thread.h	/^  typedef boost::function<void ()> ThreadFunc;$/;"	t	class:muduo::Thread
ThreadLocal	thread/ThreadLocal.h	/^  ThreadLocal()$/;"	f	class:muduo::ThreadLocal
ThreadLocal	thread/ThreadLocal.h	/^class ThreadLocal : boost::noncopyable$/;"	c	namespace:muduo
ThreadLocalSingleton	thread/ThreadLocalSingleton.h	/^class ThreadLocalSingleton : boost::noncopyable$/;"	c	namespace:muduo
ThreadNameInitializer	thread/Thread.cc	/^  ThreadNameInitializer()$/;"	f	class:__anon4::ThreadNameInitializer
ThreadNameInitializer	thread/Thread.cc	/^class ThreadNameInitializer$/;"	c	namespace:__anon4	file:
ThreadPool	thread/ThreadPool.cc	/^ThreadPool::ThreadPool(const std::string& name)$/;"	f	class:ThreadPool
ThreadPool	thread/ThreadPool.h	/^class ThreadPool : boost::noncopyable$/;"	c	namespace:muduo
TimeZone	datetime/TimeZone.cc	/^TimeZone::TimeZone(const char* zonefile)$/;"	f	class:TimeZone
TimeZone	datetime/TimeZone.h	/^class TimeZone : public muduo::copyable$/;"	c	namespace:muduo
Timer	reactor/s02/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s02/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s03/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s03/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s04/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s04/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s05/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s05/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s06/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s06/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s07/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s07/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s08/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s08/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s09/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s09/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s10/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s10/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s11/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s11/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s12/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s12/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
Timer	reactor/s13/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::Timer
Timer	reactor/s13/Timer.h	/^class Timer : boost::noncopyable$/;"	c	namespace:muduo
TimerCallback	reactor/s02/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s03/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s04/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s05/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s06/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s07/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s08/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s09/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s10/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s11/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s12/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerCallback	reactor/s13/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo
TimerId	reactor/s02/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s02/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s03/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s03/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s04/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s04/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s05/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s05/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s06/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s06/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s07/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s07/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s08/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s08/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s09/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s09/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s10/TimerId.h	/^  explicit TimerId(Timer* timer)$/;"	f	class:muduo::TimerId
TimerId	reactor/s10/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s11/TimerId.h	/^  TimerId(Timer* timer = NULL, int64_t seq = 0)$/;"	f	class:muduo::TimerId
TimerId	reactor/s11/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s12/TimerId.h	/^  TimerId(Timer* timer = NULL, int64_t seq = 0)$/;"	f	class:muduo::TimerId
TimerId	reactor/s12/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerId	reactor/s13/TimerId.h	/^  TimerId(Timer* timer = NULL, int64_t seq = 0)$/;"	f	class:muduo::TimerId
TimerId	reactor/s13/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo
TimerList	reactor/s02/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s03/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s04/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s05/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s06/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s07/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s08/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s09/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s10/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s11/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s12/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerList	reactor/s13/TimerQueue.h	/^  typedef std::set<Entry> TimerList;$/;"	t	class:muduo::TimerQueue
TimerQueue	reactor/s02/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s02/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s03/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s03/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s04/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s04/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s05/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s05/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s06/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s06/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s07/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s07/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s08/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s08/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s09/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s09/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s10/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s10/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s11/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s11/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s12/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s12/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
TimerQueue	reactor/s13/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
TimerQueue	reactor/s13/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo
Timestamp	datetime/Timestamp.cc	/^Timestamp::Timestamp()$/;"	f	class:Timestamp
Timestamp	datetime/Timestamp.cc	/^Timestamp::Timestamp(int64_t microseconds)$/;"	f	class:Timestamp
Timestamp	datetime/Timestamp.h	/^class Timestamp : public muduo::copyable$/;"	c	namespace:muduo
Transition	datetime/TimeZone.cc	/^  Transition(time_t t, time_t l, int localIdx)$/;"	f	struct:muduo::detail::Transition
Transition	datetime/TimeZone.cc	/^struct Transition$/;"	s	namespace:muduo::detail	file:
UnsignedInt	basic/uint.cc	/^UnsignedInt::UnsignedInt(const std::string& x, Radix r)$/;"	f	class:UnsignedInt
UnsignedInt	basic/uint.h	/^  UnsignedInt(uint32_t x = 0)$/;"	f	class:UnsignedInt
UnsignedInt	basic/uint.h	/^class UnsignedInt \/\/ copyable$/;"	c
UserField	java/billing/DataFields.java	/^    public static enum UserField {$/;"	g	class:DataFields
UserMonthUsage	java/billing/UserMonthUsage.java	/^    public UserMonthUsage(int id, Map<DataFields.UserField, Object> data) {$/;"	m	class:UserMonthUsage
UserMonthUsage	java/billing/UserMonthUsage.java	/^public class UserMonthUsage {$/;"	c
UserType	java/billing/DataFields.java	/^    public static enum UserType {$/;"	g	class:DataFields
VALUES	protorpc/muduo/rpc/proto/RpcProto.java	/^    private static final ErrorCode[] VALUES = {$/;"	f	class:RpcProto.ErrorCode	file:
VALUES	protorpc/muduo/rpc/proto/RpcProto.java	/^    private static final MessageType[] VALUES = {$/;"	f	class:RpcProto.MessageType	file:
Vector3	puzzle/nbody.cc	/^  Vector3(double x, double y, double z)$/;"	f	struct:Vector3
Vector3	puzzle/nbody.cc	/^struct Vector3$/;"	s	file:
VipCustomer	java/bankqueue/customer/VipCustomer.java	/^    public VipCustomer(int id, int serviceTime) {$/;"	m	class:VipCustomer
VipCustomer	java/bankqueue/customer/VipCustomer.java	/^public class VipCustomer extends Customer {$/;"	c
VipCustomerTest	java/billing/test/VipCustomerTest.java	/^public class VipCustomerTest {$/;"	c
WARN	logging/Logging.h	/^    WARN,$/;"	e	enum:muduo::Logger::LogLevel
WRONG_PROTO	protorpc/muduo/rpc/proto/RpcProto.java	/^    WRONG_PROTO(0, 1),$/;"	e	enum:RpcProto.ErrorCode	file:
WRONG_PROTO_VALUE	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static final int WRONG_PROTO_VALUE = 1;$/;"	f	class:RpcProto.ErrorCode
Waiter	thread/test/Waiter_test.cc	/^  Waiter()$/;"	f	class:Waiter
Waiter	thread/test/Waiter_test.cc	/^class Waiter : boost::noncopyable$/;"	c	file:
Waiter1	thread/test/Waiter_test.cc	/^class Waiter1 : public Waiter$/;"	c	file:
Waiter2	thread/test/Waiter_test.cc	/^class Waiter2 : public Waiter$/;"	c	file:
Waiter3	thread/test/Waiter_test.cc	/^class Waiter3 : public Waiter$/;"	c	file:
Waiter4	thread/test/Waiter_test.cc	/^class Waiter4 : public Waiter$/;"	c	file:
Waiter5	thread/test/Waiter_test.cc	/^class Waiter5 : public Waiter$/;"	c	file:
Waiter6	thread/test/Waiter_test.cc	/^class Waiter6 : public Waiter$/;"	c	file:
Waiter7	thread/test/Waiter_test.cc	/^class Waiter7 : public Waiter$/;"	c	file:
Waiter8	thread/test/Waiter_test.cc	/^class Waiter8 : public Waiter$/;"	c	file:
WaiterInMuduo	thread/test/Waiter_test.cc	/^  WaiterInMuduo()$/;"	f	class:WaiterInMuduo
WaiterInMuduo	thread/test/Waiter_test.cc	/^class WaiterInMuduo : boost::noncopyable$/;"	c	file:
Water	puzzle/Einstein.java	/^        Tea, Coffee, Milk, Beer, Water;$/;"	e	enum:Einstein.Drink	file:
WeakCallback	thread/WeakCallback.h	/^  WeakCallback(const std::weak_ptr<CLASS>& object,$/;"	f	class:muduo::WeakCallback
WeakCallback	thread/WeakCallback.h	/^class WeakCallback$/;"	c	namespace:muduo
White	puzzle/Einstein.java	/^        Red, Green, Yellow, Blue, White;$/;"	e	enum:Einstein.Color	file:
WindowType	java/bankqueue/WindowType.java	/^public enum WindowType {$/;"	g
WordCountList	topk/sender.cc	/^typedef std::vector<std::pair<int64_t, string> > WordCountList;$/;"	t	file:
WriteCompleteCallback	reactor/s09/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> WriteCompleteCallback;$/;"	t	namespace:muduo
WriteCompleteCallback	reactor/s10/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> WriteCompleteCallback;$/;"	t	namespace:muduo
WriteCompleteCallback	reactor/s11/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> WriteCompleteCallback;$/;"	t	namespace:muduo
WriteCompleteCallback	reactor/s12/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> WriteCompleteCallback;$/;"	t	namespace:muduo
WriteCompleteCallback	reactor/s13/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> WriteCompleteCallback;$/;"	t	namespace:muduo
YearMonthDay	datetime/Date.h	/^  struct YearMonthDay$/;"	s	class:muduo::Date
Yellow	puzzle/Einstein.java	/^        Red, Green, Yellow, Blue, White;$/;"	e	enum:Einstein.Color	file:
__STDC_FORMAT_MACROS	datetime/Timestamp.cc	5;"	d	file:
__STDC_FORMAT_MACROS	datetime/Timestamp.cc	7;"	d	file:
__STDC_FORMAT_MACROS	logging/LogStream_bench.cc	6;"	d	file:
__STDC_FORMAT_MACROS	topk/sender.cc	9;"	d	file:
__STDC_LIMIT_MACROS	reactor/s02/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s03/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s04/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s05/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s06/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s07/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s08/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s09/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s10/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s11/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s12/TimerQueue.cc	8;"	d	file:
__STDC_LIMIT_MACROS	reactor/s13/TimerQueue.cc	8;"	d	file:
abbreviation	datetime/TimeZone.cc	/^  string abbreviation;$/;"	m	struct:TimeZone::Data	file:
abortNotInLoopThread	reactor/s00/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s01/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s02/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s03/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s04/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s05/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s06/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s07/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s08/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s09/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s10/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s11/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s12/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
abortNotInLoopThread	reactor/s13/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
accept	reactor/s04/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s04/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s05/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s05/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s06/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s06/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s07/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s07/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s08/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s08/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s09/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s09/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s10/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s10/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s11/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s11/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s12/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s12/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	reactor/s13/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
accept	reactor/s13/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in* addr)$/;"	f	class:sockets
accept	tpc/Acceptor.cc	/^TcpStreamPtr Acceptor::accept()$/;"	f	class:Acceptor
acceptChannel_	reactor/s04/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s05/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s06/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s07/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s08/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s09/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s10/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s11/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s12/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptChannel_	reactor/s13/Acceptor.h	/^  Channel acceptChannel_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s04/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s05/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s06/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s07/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s08/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s09/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s10/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s11/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s12/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
acceptSocket_	reactor/s13/Acceptor.h	/^  Socket acceptSocket_;$/;"	m	class:muduo::Acceptor
accept_conn_cb	pingpong/libevent/server-half-close.c	/^static void accept_conn_cb(struct evconnlistener *listener,$/;"	f	file:
accept_conn_cb	pingpong/libevent/server-line-echo.c	/^static void accept_conn_cb(struct evconnlistener *listener,$/;"	f	file:
accept_conn_cb	pingpong/libevent/server.c	/^static void accept_conn_cb(struct evconnlistener *listener,$/;"	f	file:
acceptor_	pingpong/asio/server.cpp	/^  asio::ip::tcp::acceptor acceptor_;$/;"	m	class:server	file:
acceptor_	reactor/s05/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
acceptor_	reactor/s06/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
acceptor_	reactor/s07/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
acceptor_	reactor/s08/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
acceptor_	reactor/s09/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
acceptor_	reactor/s10/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
acceptor_	reactor/s11/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
acceptor_	reactor/s12/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
acceptor_	reactor/s13/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:muduo::TcpServer
activeChannels_	reactor/s01/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s02/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s03/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s04/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s05/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s06/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s07/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s08/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s09/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s10/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s11/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s12/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeChannels_	reactor/s13/EventLoop.h	/^  ChannelList activeChannels_;$/;"	m	class:muduo::EventLoop
activeTimers_	reactor/s11/TimerQueue.h	/^  ActiveTimerSet activeTimers_;$/;"	m	class:muduo::TimerQueue
activeTimers_	reactor/s12/TimerQueue.h	/^  ActiveTimerSet activeTimers_;$/;"	m	class:muduo::TimerQueue
activeTimers_	reactor/s13/TimerQueue.h	/^  ActiveTimerSet activeTimers_;$/;"	m	class:muduo::TimerQueue
add	basic/int128.h	/^  uint128& add(uint128 rhs)$/;"	f	struct:uint128
add	basic/uint.h	/^  void add(const UnsignedInt& x)$/;"	f	class:UnsignedInt
add	basic/uint.h	/^  void add(const uint32_t x)$/;"	f	class:UnsignedInt
add	logging/LogStream.h	/^  void add(size_t len) { cur_ += len; }$/;"	f	class:muduo::detail::FixedBuffer
add	pingpong/asio/client.cpp	/^  void add(size_t bytes_written, size_t bytes_read)$/;"	f	class:stats
add	thread/Atomic.h	/^  void add(T x)$/;"	f	class:muduo::detail::AtomicIntegerT
add	thread/SignalSlot.h	/^  void add(const boost::shared_ptr<SlotImpl>& slot)$/;"	f	class:muduo::Signal
add	thread/test/MutualDeadLock.cc	/^  void add(Request* req)$/;"	f	class:Inventory
add	thread/test/RequestInventory_test.cc	/^  void add(Request* req)$/;"	f	class:Inventory
add	thread/test/RequestInventory_test2.cc	/^  void add(const RequestPtr& req)$/;"	f	class:Inventory
addAllQuestion	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder addAllQuestion($/;"	m	class:QueryProtos.Query.Builder
addAllSolution	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder addAllSolution($/;"	m	class:QueryProtos.Answer.Builder
addAndGet	thread/Atomic.h	/^  T addAndGet(T x)$/;"	f	class:muduo::detail::AtomicIntegerT
addEvent	java/bankqueue/event/EventSimulator.java	/^    public void addEvent(Event e) {$/;"	m	class:EventSimulator
addMessageType	protorpc/muduo/codec/ProtobufDecoder.java	/^    public void addMessageType(Message message) {$/;"	m	class:ProtobufDecoder
addQuestion	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder addQuestion(String value) {$/;"	m	class:QueryProtos.Query.Builder
addQuestion	protorpc/muduo/codec/tests/QueryProtos.java	/^      void addQuestion(com.google.protobuf.ByteString value) {$/;"	m	class:QueryProtos.Query.Builder
addSolution	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder addSolution(String value) {$/;"	m	class:QueryProtos.Answer.Builder
addSolution	protorpc/muduo/codec/tests/QueryProtos.java	/^      void addSolution(com.google.protobuf.ByteString value) {$/;"	m	class:QueryProtos.Answer.Builder
addTime	datetime/Timestamp.h	/^inline Timestamp addTime(Timestamp timestamp, double seconds)$/;"	f	namespace:muduo
addTimer	reactor/s02/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s03/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s04/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s05/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s06/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s07/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s08/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s09/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s10/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s11/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s12/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimer	reactor/s13/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s03/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s04/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s05/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s06/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s07/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s08/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s09/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s10/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s11/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s12/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addTimerInLoop	reactor/s13/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
addr_	reactor/s04/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s05/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s06/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s07/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s08/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s09/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s10/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s11/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s12/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
addr_	reactor/s13/InetAddress.h	/^  struct sockaddr_in addr_;$/;"	m	class:muduo::InetAddress	typeref:struct:muduo::InetAddress::sockaddr_in
advance	puzzle/nbody.c	/^void advance(int nbodies, struct planet *bodies, double dt)$/;"	f
advance	puzzle/nbody.cc	/^void advance(int nbodies, Planet* bodies, double delta_time)$/;"	f
advance2	puzzle/nbody.cc	/^void advance2(int nbodies, Planet* bodies, double delta_time)$/;"	f
afterFork	thread/Thread.cc	/^void afterFork()$/;"	f	namespace:__anon4
allConnected	protorpc/echo/EchoClient.java	/^    static CountDownLatch allConnected, startLatch, allFinished;$/;"	f	class:EchoClient
allFinished	protorpc/echo/EchoClient.java	/^    static CountDownLatch allConnected, startLatch, allFinished;$/;"	f	class:EchoClient
allocate	pingpong/asio/handler_allocator.hpp	/^  void* allocate(std::size_t size)$/;"	f	class:handler_allocator
allocator_	pingpong/asio/handler_allocator.hpp	/^  handler_allocator& allocator_;$/;"	m	class:custom_alloc_handler
answerer_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Object answerer_ = "";$/;"	f	class:QueryProtos.Answer.Builder	file:
answerer_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Object answerer_;$/;"	f	class:QueryProtos.Answer	file:
antidiagnoal	puzzle/nqueens.cc	/^  bool diagnoal[2*kMaxQueens], antidiagnoal[2*kMaxQueens];$/;"	m	struct:BackTracking	file:
antidiagnoal	puzzle/nqueens_mt.cc	/^  bool diagnoal[2*kMaxQueens], antidiagnoal[2*kMaxQueens];$/;"	m	struct:BackTracking	file:
antidiagnoal	puzzle/nqueens_opt.cc	/^  uint32_t antidiagnoal[kMaxQueens];$/;"	m	struct:BackTracking	file:
append	logging/AsyncLoggingDoubleBuffering.h	/^  void append(const char* logline, int len)$/;"	f	class:muduo::AsyncLoggingDoubleBuffering
append	logging/AsyncLoggingQueue.h	/^  void append(const char* logline, int len)$/;"	f	class:muduo::AsyncLoggingT
append	logging/LogFile.cc	/^  void append(const char* logline, const size_t len)$/;"	f	class:LogFile::File
append	logging/LogFile.cc	/^void LogFile::append(const char* logline, int len)$/;"	f	class:LogFile
append	logging/LogStream.h	/^  void append(const char* \/*restrict*\/ buf, int len)$/;"	f	class:muduo::detail::FixedBuffer
append	logging/LogStream.h	/^  void append(const char* data, int len) { buffer_.append(data, len); }$/;"	f	class:muduo::LogStream
append	reactor/s07/Buffer.h	/^  void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s07/Buffer.h	/^  void append(const std::string& str)$/;"	f	class:muduo::Buffer
append	reactor/s07/Buffer.h	/^  void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s08/Buffer.h	/^  void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s08/Buffer.h	/^  void append(const std::string& str)$/;"	f	class:muduo::Buffer
append	reactor/s08/Buffer.h	/^  void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s09/Buffer.h	/^  void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s09/Buffer.h	/^  void append(const std::string& str)$/;"	f	class:muduo::Buffer
append	reactor/s09/Buffer.h	/^  void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s10/Buffer.h	/^  void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s10/Buffer.h	/^  void append(const std::string& str)$/;"	f	class:muduo::Buffer
append	reactor/s10/Buffer.h	/^  void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s11/Buffer.h	/^  void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s11/Buffer.h	/^  void append(const std::string& str)$/;"	f	class:muduo::Buffer
append	reactor/s11/Buffer.h	/^  void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s12/Buffer.h	/^  void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s12/Buffer.h	/^  void append(const std::string& str)$/;"	f	class:muduo::Buffer
append	reactor/s12/Buffer.h	/^  void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s13/Buffer.h	/^  void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	reactor/s13/Buffer.h	/^  void append(const std::string& str)$/;"	f	class:muduo::Buffer
append	reactor/s13/Buffer.h	/^  void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
append	string/StringEager.cc	/^void StringEager::append(const char* str)$/;"	f	class:StringEager
append	string/StringEager.cc	/^void StringEager::append(const char* str, size_t len)$/;"	f	class:StringEager
append_column	puzzle/dance.cc	/^  void append_column(int n)$/;"	f	struct:Dance
append_column	sudoku/sudoku_dancing_links.cc	/^    void append_column(int n)$/;"	f	struct:Dance
append_unlocked	logging/LogFile.cc	/^void LogFile::append_unlocked(const char* logline, int len)$/;"	f	class:LogFile
arity	sudoku/sudoku_min_arity.cc	/^static int arity(int cell)$/;"	f	file:
arity	sudoku/sudoku_min_arity_cache.cc	/^static int arity[N];$/;"	v	file:
arrbIdx	datetime/TimeZone.cc	/^  int arrbIdx;$/;"	m	struct:muduo::detail::Localtime	file:
arrive	java/bankqueue/Bank.java	/^    public void arrive(int now, Customer customer) {$/;"	m	class:Bank
asInt32	protobuf/codec.h	/^inline int32_t asInt32(const char* buf)$/;"	f
asString	logging/LogStream.h	/^  string asString() const { return string(data_, length()); }$/;"	f	class:muduo::detail::FixedBuffer
asio	pingpong/asio/asio.hpp	/^namespace asio$/;"	n
asio_handler_allocate	pingpong/asio/handler_allocator.hpp	/^  friend void* asio_handler_allocate(std::size_t size,$/;"	f	class:custom_alloc_handler
asio_handler_deallocate	pingpong/asio/handler_allocator.hpp	/^  friend void asio_handler_deallocate(void* pointer, std::size_t \/*size*\/,$/;"	f	class:custom_alloc_handler
assertInLoopThread	reactor/s00/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s01/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s01/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s02/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s02/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s03/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s03/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s04/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s04/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s05/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s05/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s06/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s06/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s07/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s07/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s08/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s08/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s09/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s09/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s10/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s10/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s11/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s11/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s12/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s12/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertInLoopThread	reactor/s13/EPoller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::EPoller
assertInLoopThread	reactor/s13/EventLoop.h	/^  void assertInLoopThread()$/;"	f	class:muduo::EventLoop
assertInLoopThread	reactor/s13/Poller.h	/^  void assertInLoopThread() { ownerLoop_->assertInLoopThread(); }$/;"	f	class:muduo::Poller
assertLocked	thread/Mutex.h	/^  void assertLocked()$/;"	f	class:muduo::MutexLock
assign	basic/uint.h	/^  void assign(const uint32_t x)$/;"	f	class:UnsignedInt
assign	string/StringEager.cc	/^void StringEager::assign(const char* str, size_t len)$/;"	f	class:StringEager
asyncConnect	protorpc/sudoku/Client.java	/^    private static void asyncConnect(InetSocketAddress addr) {$/;"	m	class:Client	file:
asyncOutput	logging/AsyncLogging_test.cc	/^void asyncOutput(const char* msg, int len)$/;"	f
avail	logging/LogStream.h	/^  int avail() const { return static_cast<int>(end() - cur_); }$/;"	f	class:muduo::detail::FixedBuffer
available	sudoku/sudoku_basic.cc	/^bool available(int guess, int cell)$/;"	f
availableWindows	java/bankqueue/Bank.java	/^    private int[] availableWindows = new int[WindowType.kNumWindows.ordinal()];$/;"	f	class:Bank	file:
backtrack	puzzle/latin_square.cc	/^void backtrack(int x, int y)$/;"	f
backtracking	puzzle/nqueens.cc	/^int backtracking(int N)$/;"	f
backtracking	puzzle/nqueens_mt.cc	/^int64_t backtracking(int N)$/;"	f
backtracking	puzzle/nqueens_opt.cc	/^int backtracking(int N)$/;"	f
backtracking	puzzle/nqueens_opt_mt.cc	/^int64_t backtracking(int N)$/;"	f
backtracking_mt	puzzle/nqueens_mt.cc	/^int64_t backtracking_mt(int N)$/;"	f
backtracking_mt	puzzle/nqueens_opt_mt.cc	/^int64_t backtracking_mt(int N)$/;"	f
backtracking_thr	puzzle/nqueens_mt.cc	/^void backtracking_thr(std::atomic<int64_t>* total, int N, int i)$/;"	f
backtracking_thr	puzzle/nqueens_opt_mt.cc	/^void backtracking_thr(std::atomic<int64_t>* total, int N, int i)$/;"	f
backtrackingsub	puzzle/nqueens_mt.cc	/^int64_t backtrackingsub(int N, int i)$/;"	f
backtrackingsub	puzzle/nqueens_opt.cc	/^int64_t backtrackingsub(int N, int i)$/;"	f
backtrackingsub	puzzle/nqueens_opt_mt.cc	/^int64_t backtrackingsub(int N, int i)$/;"	f
bank	java/bankqueue/event/CustomerArriveEvent.java	/^    private final Bank bank;$/;"	f	class:CustomerArriveEvent	file:
bank	java/bankqueue/event/CustomerLeaveEvent.java	/^    private final Bank bank;$/;"	f	class:CustomerLeaveEvent	file:
bank	java/bankqueue/tests/BankTest.java	/^    Bank bank;$/;"	f	class:BankTest
bankqueue	java/bankqueue/Bank.java	/^package bankqueue;$/;"	p
bankqueue	java/bankqueue/WindowType.java	/^package bankqueue;$/;"	p
bankqueue.customer	java/bankqueue/customer/Customer.java	/^package bankqueue.customer;$/;"	p
bankqueue.customer	java/bankqueue/customer/CustomerFactory.java	/^package bankqueue.customer;$/;"	p
bankqueue.customer	java/bankqueue/customer/CustomerType.java	/^package bankqueue.customer;$/;"	p
bankqueue.customer	java/bankqueue/customer/FastCustomer.java	/^package bankqueue.customer;$/;"	p
bankqueue.customer	java/bankqueue/customer/NormalCustomer.java	/^package bankqueue.customer;$/;"	p
bankqueue.customer	java/bankqueue/customer/VipCustomer.java	/^package bankqueue.customer;$/;"	p
bankqueue.event	java/bankqueue/event/CustomerArriveEvent.java	/^package bankqueue.event;$/;"	p
bankqueue.event	java/bankqueue/event/CustomerLeaveEvent.java	/^package bankqueue.event;$/;"	p
bankqueue.event	java/bankqueue/event/Event.java	/^package bankqueue.event;$/;"	p
bankqueue.event	java/bankqueue/event/EventSimulator.java	/^package bankqueue.event;$/;"	p
bankqueue.tests	java/bankqueue/tests/BankTest.java	/^package bankqueue.tests;$/;"	p
bankqueue.tests	java/bankqueue/tests/EventTest.java	/^package bankqueue.tests;$/;"	p
bar	basic/counted_ptr_test.cc	/^void bar(counted_ptr<int> x)$/;"	f
bar	string/StringTrivialTest.cc	/^void bar(const String& x)$/;"	f
baseLoop_	reactor/s10/EventLoopThreadPool.h	/^  EventLoop* baseLoop_;$/;"	m	class:muduo::EventLoopThreadPool
baseLoop_	reactor/s11/EventLoopThreadPool.h	/^  EventLoop* baseLoop_;$/;"	m	class:muduo::EventLoopThreadPool
baseLoop_	reactor/s12/EventLoopThreadPool.h	/^  EventLoop* baseLoop_;$/;"	m	class:muduo::EventLoopThreadPool
baseLoop_	reactor/s13/EventLoopThreadPool.h	/^  EventLoop* baseLoop_;$/;"	m	class:muduo::EventLoopThreadPool
basename_	logging/AsyncLoggingDoubleBuffering.h	/^  string basename_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
basename_	logging/AsyncLoggingQueue.h	/^  string basename_;$/;"	m	class:muduo::AsyncLoggingT
basename_	logging/LogFile.h	/^  const string basename_;$/;"	m	class:muduo::LogFile
basename_	logging/Logging.h	/^  const char* basename_;$/;"	m	class:muduo::Logger::Impl
baz	string/StringTrivialTest.cc	/^String baz()$/;"	f
bctrl	ssl/benchmark-openssl.cc	/^long bctrl(BIO *, int cmd, long num, void *)$/;"	f
begin	reactor/s07/Buffer.h	/^  char* begin()$/;"	f	class:muduo::Buffer
begin	reactor/s07/Buffer.h	/^  const char* begin() const$/;"	f	class:muduo::Buffer
begin	reactor/s08/Buffer.h	/^  char* begin()$/;"	f	class:muduo::Buffer
begin	reactor/s08/Buffer.h	/^  const char* begin() const$/;"	f	class:muduo::Buffer
begin	reactor/s09/Buffer.h	/^  char* begin()$/;"	f	class:muduo::Buffer
begin	reactor/s09/Buffer.h	/^  const char* begin() const$/;"	f	class:muduo::Buffer
begin	reactor/s10/Buffer.h	/^  char* begin()$/;"	f	class:muduo::Buffer
begin	reactor/s10/Buffer.h	/^  const char* begin() const$/;"	f	class:muduo::Buffer
begin	reactor/s11/Buffer.h	/^  char* begin()$/;"	f	class:muduo::Buffer
begin	reactor/s11/Buffer.h	/^  const char* begin() const$/;"	f	class:muduo::Buffer
begin	reactor/s12/Buffer.h	/^  char* begin()$/;"	f	class:muduo::Buffer
begin	reactor/s12/Buffer.h	/^  const char* begin() const$/;"	f	class:muduo::Buffer
begin	reactor/s13/Buffer.h	/^  char* begin()$/;"	f	class:muduo::Buffer
begin	reactor/s13/Buffer.h	/^  const char* begin() const$/;"	f	class:muduo::Buffer
begin	string/StringEager.h	/^  const_iterator begin() const  { return start_; }$/;"	f	class:muduo::StringEager
begin	string/StringEager.h	/^  iterator begin()              { return start_; }$/;"	f	class:muduo::StringEager
beginWrite	reactor/s07/Buffer.h	/^  char* beginWrite()$/;"	f	class:muduo::Buffer
beginWrite	reactor/s07/Buffer.h	/^  const char* beginWrite() const$/;"	f	class:muduo::Buffer
beginWrite	reactor/s08/Buffer.h	/^  char* beginWrite()$/;"	f	class:muduo::Buffer
beginWrite	reactor/s08/Buffer.h	/^  const char* beginWrite() const$/;"	f	class:muduo::Buffer
beginWrite	reactor/s09/Buffer.h	/^  char* beginWrite()$/;"	f	class:muduo::Buffer
beginWrite	reactor/s09/Buffer.h	/^  const char* beginWrite() const$/;"	f	class:muduo::Buffer
beginWrite	reactor/s10/Buffer.h	/^  char* beginWrite()$/;"	f	class:muduo::Buffer
beginWrite	reactor/s10/Buffer.h	/^  const char* beginWrite() const$/;"	f	class:muduo::Buffer
beginWrite	reactor/s11/Buffer.h	/^  char* beginWrite()$/;"	f	class:muduo::Buffer
beginWrite	reactor/s11/Buffer.h	/^  const char* beginWrite() const$/;"	f	class:muduo::Buffer
beginWrite	reactor/s12/Buffer.h	/^  char* beginWrite()$/;"	f	class:muduo::Buffer
beginWrite	reactor/s12/Buffer.h	/^  const char* beginWrite() const$/;"	f	class:muduo::Buffer
beginWrite	reactor/s13/Buffer.h	/^  char* beginWrite()$/;"	f	class:muduo::Buffer
beginWrite	reactor/s13/Buffer.h	/^  const char* beginWrite() const$/;"	f	class:muduo::Buffer
bench	logging/AsyncLogging_test.cc	/^void bench(ASYNC* log)$/;"	f
bench	logging/Logging_test.cc	/^void bench()$/;"	f
benchLogStream	logging/LogStream_bench.cc	/^void benchLogStream()$/;"	f
benchPrintf	logging/LogStream_bench.cc	/^void benchPrintf(const char* fmt)$/;"	f
benchStringStream	logging/LogStream_bench.cc	/^void benchStringStream()$/;"	f
benchmark	datetime/Timestamp_unittest.cc	/^void benchmark()$/;"	f
big	puzzle/waterpour.cc	/^  int big;$/;"	m	struct:State	file:
billing	java/billing/BillCalculator.java	/^package billing;$/;"	p
billing	java/billing/DataFields.java	/^package billing;$/;"	p
billing	java/billing/DefaultRule.java	/^package billing;$/;"	p
billing	java/billing/Money.java	/^package billing;$/;"	p
billing	java/billing/Rule.java	/^package billing;$/;"	p
billing	java/billing/RuleFactory.java	/^package billing;$/;"	p
billing	java/billing/Slip.java	/^package billing;$/;"	p
billing	java/billing/UserMonthUsage.java	/^package billing;$/;"	p
billing.test	java/billing/test/NormalCustomerTest.java	/^package billing.test;$/;"	p
billing.test	java/billing/test/VipCustomerTest.java	/^package billing.test;$/;"	p
bind	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture bind(SocketAddress localAddress) {$/;"	m	class:MockChannel
bindAddress	reactor/s04/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s05/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s06/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s07/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s08/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s09/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s10/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s11/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s12/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindAddress	reactor/s13/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
bindOrDie	reactor/s04/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s05/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s06/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s07/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s08/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s09/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s10/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s11/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s12/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	reactor/s13/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
bindOrDie	tpc/Socket.cc	/^void Socket::bindOrDie(const InetAddress& addr)$/;"	f	class:Socket
bitField0_	protorpc/echo/EchoProto.java	/^      private int bitField0_;$/;"	f	class:EchoProto.EchoRequest.Builder	file:
bitField0_	protorpc/echo/EchoProto.java	/^      private int bitField0_;$/;"	f	class:EchoProto.EchoResponse.Builder	file:
bitField0_	protorpc/echo/EchoProto.java	/^    private int bitField0_;$/;"	f	class:EchoProto.EchoRequest	file:
bitField0_	protorpc/echo/EchoProto.java	/^    private int bitField0_;$/;"	f	class:EchoProto.EchoResponse	file:
bitField0_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private int bitField0_;$/;"	f	class:QueryProtos.Answer.Builder	file:
bitField0_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private int bitField0_;$/;"	f	class:QueryProtos.Empty.Builder	file:
bitField0_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private int bitField0_;$/;"	f	class:QueryProtos.Query.Builder	file:
bitField0_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private int bitField0_;$/;"	f	class:QueryProtos.Answer	file:
bitField0_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private int bitField0_;$/;"	f	class:QueryProtos.Empty	file:
bitField0_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private int bitField0_;$/;"	f	class:QueryProtos.Query	file:
bitField0_	protorpc/muduo/rpc/proto/RpcProto.java	/^      private int bitField0_;$/;"	f	class:RpcProto.RpcMessage.Builder	file:
bitField0_	protorpc/muduo/rpc/proto/RpcProto.java	/^    private int bitField0_;$/;"	f	class:RpcProto.RpcMessage	file:
bitField0_	protorpc/sudoku/Sudoku.java	/^      private int bitField0_;$/;"	f	class:Sudoku.SudokuRequest.Builder	file:
bitField0_	protorpc/sudoku/Sudoku.java	/^      private int bitField0_;$/;"	f	class:Sudoku.SudokuResponse.Builder	file:
bitField0_	protorpc/sudoku/Sudoku.java	/^    private int bitField0_;$/;"	f	class:Sudoku.SudokuRequest	file:
bitField0_	protorpc/sudoku/Sudoku.java	/^    private int bitField0_;$/;"	f	class:Sudoku.SudokuResponse	file:
block_size_	pingpong/asio/client.cpp	/^  size_t block_size_;$/;"	m	class:session	file:
block_size_	pingpong/asio/server.cpp	/^  size_t block_size_;$/;"	m	class:server	file:
block_size_	pingpong/asio/server.cpp	/^  size_t block_size_;$/;"	m	class:session	file:
blockingConnect	protorpc/muduo/rpc/RpcClient.java	/^    public RpcChannel blockingConnect(SocketAddress addr) {$/;"	m	class:RpcClient
blockingConnect	protorpc/sudoku/Client.java	/^    private static void blockingConnect(InetSocketAddress addr) throws Exception {$/;"	m	class:Client	file:
blocks_	puzzle/huarong.cc	/^  Block blocks_[kBlocks];$/;"	m	struct:State	file:
board	puzzle/huarong.cc	/^int board[5][4] = {$/;"	v
board	puzzle/latin_square.cc	/^int board[10][10];$/;"	v
board	sudoku/sudoku_basic.cc	/^int board[N];$/;"	v
board_	puzzle/huarong.cc	/^  int8_t board_[kRows][kColumns];$/;"	m	struct:Mask	file:
bodies	puzzle/nbody.c	/^struct planet bodies[NBODIES] =$/;"	v	typeref:struct:planet
bodies	puzzle/nbody.cc	/^Planet bodies[5] =$/;"	v
booklet	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    private static void booklet(String input) throws Exception {$/;"	m	class:PdfHack	file:
bool_type	basic/counted_ptr.h	/^  typedef int* counted_ptr::*bool_type;$/;"	t	class:counted_ptr::counted_ptr
bootstrap	protorpc/muduo/rpc/RpcClient.java	/^    ClientBootstrap bootstrap;$/;"	f	class:RpcClient
bootstrap	protorpc/muduo/rpc/RpcServer.java	/^    ServerBootstrap bootstrap;$/;"	f	class:RpcServer
bottom	puzzle/huarong.cc	/^  int bottom() const$/;"	f	struct:Block
bread	ssl/benchmark-openssl.cc	/^int bread(BIO *b, char *buf, int len)$/;"	f
broadcast	thread/test/Waiter_test.cc	/^  void broadcast()$/;"	f	class:Waiter7
broadcast	thread/test/Waiter_test.cc	/^  void broadcast()$/;"	f	class:WaiterInMuduo
bruteforce	puzzle/nqueens.cc	/^int bruteforce(const int N)$/;"	f
buckets_	puzzle/query_freq.cc	/^  boost::ptr_vector<LocalSink> buckets_;$/;"	m	class:Shuffler	file:
buf_	logging/LogStream.h	/^  char buf_[32];$/;"	m	class:muduo::Fmt
buf_	string/StringSso.h	/^    char buf_[kLocalBuffer+1];$/;"	m	union:muduo::StringSso::__anon1
buffer	logging/LogStream.h	/^  const Buffer& buffer() const { return buffer_; }$/;"	f	class:muduo::LogStream
buffer_	esort/sort00.cc	/^  char buffer_[64*1024];$/;"	m	class:InputFile	file:
buffer_	esort/sort00.cc	/^  char buffer_[64*1024];$/;"	m	class:OutputFile	file:
buffer_	esort/sort01.cc	/^  char buffer_[64*1024];$/;"	m	class:InputFile	file:
buffer_	esort/sort01.cc	/^  char buffer_[64*1024];$/;"	m	class:OutputFile	file:
buffer_	esort/sort02.cc	/^  char buffer_[64*1024];$/;"	m	class:InputFile	file:
buffer_	esort/sort02.cc	/^  char buffer_[64*1024];$/;"	m	class:OutputFile	file:
buffer_	esort/sort03.cc	/^  char buffer_[64*1024];$/;"	m	class:InputFile	file:
buffer_	esort/sort03.cc	/^  char buffer_[64*1024];$/;"	m	class:OutputFile	file:
buffer_	esort/sort04.cc	/^  char buffer_[4*1024*1024];$/;"	m	class:InputFile	file:
buffer_	esort/sort04.cc	/^  char buffer_[4*1024*1024];$/;"	m	class:OutputFile	file:
buffer_	esort/sort10.cc	/^  char buffer_[4*1024*1024];$/;"	m	class:OutputFile	file:
buffer_	esort/sort11.cc	/^  char buffer_[4*1024*1024];$/;"	m	class:OutputFile	file:
buffer_	esort/sort12.cc	/^  char buffer_[4*1024*1024];$/;"	m	class:OutputFile	file:
buffer_	logging/LogFile.cc	/^  char buffer_[64*1024];$/;"	m	class:LogFile::File	file:
buffer_	logging/LogStream.h	/^  Buffer buffer_;$/;"	m	class:muduo::LogStream
buffer_	reactor/s07/Buffer.h	/^  std::vector<char> buffer_;$/;"	m	class:muduo::Buffer
buffer_	reactor/s08/Buffer.h	/^  std::vector<char> buffer_;$/;"	m	class:muduo::Buffer
buffer_	reactor/s09/Buffer.h	/^  std::vector<char> buffer_;$/;"	m	class:muduo::Buffer
buffer_	reactor/s10/Buffer.h	/^  std::vector<char> buffer_;$/;"	m	class:muduo::Buffer
buffer_	reactor/s11/Buffer.h	/^  std::vector<char> buffer_;$/;"	m	class:muduo::Buffer
buffer_	reactor/s12/Buffer.h	/^  std::vector<char> buffer_;$/;"	m	class:muduo::Buffer
buffer_	reactor/s13/Buffer.h	/^  std::vector<char> buffer_;$/;"	m	class:muduo::Buffer
buffers_	logging/AsyncLoggingDoubleBuffering.h	/^  BufferVector buffers_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
build	protorpc/echo/EchoProto.java	/^      public echo.EchoProto.EchoRequest build() {$/;"	m	class:EchoProto.EchoRequest.Builder
build	protorpc/echo/EchoProto.java	/^      public echo.EchoProto.EchoResponse build() {$/;"	m	class:EchoProto.EchoResponse.Builder
build	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Answer build() {$/;"	m	class:QueryProtos.Answer.Builder
build	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Empty build() {$/;"	m	class:QueryProtos.Empty.Builder
build	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Query build() {$/;"	m	class:QueryProtos.Query.Builder
build	protorpc/muduo/rpc/proto/RpcProto.java	/^      public muduo.rpc.proto.RpcProto.RpcMessage build() {$/;"	m	class:RpcProto.RpcMessage.Builder
build	protorpc/sudoku/Sudoku.java	/^      public sudoku.Sudoku.SudokuRequest build() {$/;"	m	class:Sudoku.SudokuRequest.Builder
build	protorpc/sudoku/Sudoku.java	/^      public sudoku.Sudoku.SudokuResponse build() {$/;"	m	class:Sudoku.SudokuResponse.Builder
buildParsed	protorpc/echo/EchoProto.java	/^      private echo.EchoProto.EchoRequest buildParsed()$/;"	m	class:EchoProto.EchoRequest.Builder	file:
buildParsed	protorpc/echo/EchoProto.java	/^      private echo.EchoProto.EchoResponse buildParsed()$/;"	m	class:EchoProto.EchoResponse.Builder	file:
buildParsed	protorpc/muduo/codec/tests/QueryProtos.java	/^      private muduo.codec.tests.QueryProtos.Answer buildParsed()$/;"	m	class:QueryProtos.Answer.Builder	file:
buildParsed	protorpc/muduo/codec/tests/QueryProtos.java	/^      private muduo.codec.tests.QueryProtos.Empty buildParsed()$/;"	m	class:QueryProtos.Empty.Builder	file:
buildParsed	protorpc/muduo/codec/tests/QueryProtos.java	/^      private muduo.codec.tests.QueryProtos.Query buildParsed()$/;"	m	class:QueryProtos.Query.Builder	file:
buildParsed	protorpc/muduo/rpc/proto/RpcProto.java	/^      private muduo.rpc.proto.RpcProto.RpcMessage buildParsed()$/;"	m	class:RpcProto.RpcMessage.Builder	file:
buildParsed	protorpc/sudoku/Sudoku.java	/^      private sudoku.Sudoku.SudokuRequest buildParsed()$/;"	m	class:Sudoku.SudokuRequest.Builder	file:
buildParsed	protorpc/sudoku/Sudoku.java	/^      private sudoku.Sudoku.SudokuResponse buildParsed()$/;"	m	class:Sudoku.SudokuResponse.Builder	file:
buildPartial	protorpc/echo/EchoProto.java	/^      public echo.EchoProto.EchoRequest buildPartial() {$/;"	m	class:EchoProto.EchoRequest.Builder
buildPartial	protorpc/echo/EchoProto.java	/^      public echo.EchoProto.EchoResponse buildPartial() {$/;"	m	class:EchoProto.EchoResponse.Builder
buildPartial	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Answer buildPartial() {$/;"	m	class:QueryProtos.Answer.Builder
buildPartial	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Empty buildPartial() {$/;"	m	class:QueryProtos.Empty.Builder
buildPartial	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Query buildPartial() {$/;"	m	class:QueryProtos.Query.Builder
buildPartial	protorpc/muduo/rpc/proto/RpcProto.java	/^      public muduo.rpc.proto.RpcProto.RpcMessage buildPartial() {$/;"	m	class:RpcProto.RpcMessage.Builder
buildPartial	protorpc/sudoku/Sudoku.java	/^      public sudoku.Sudoku.SudokuRequest buildPartial() {$/;"	m	class:Sudoku.SudokuRequest.Builder
buildPartial	protorpc/sudoku/Sudoku.java	/^      public sudoku.Sudoku.SudokuResponse buildPartial() {$/;"	m	class:Sudoku.SudokuResponse.Builder
buysell	puzzle/buysell.cc	/^int buysell(const std::vector<int>& prices)$/;"	f
bwrite	ssl/benchmark-openssl.cc	/^int bwrite(BIO *b, const char *buf, int len)$/;"	f
bytes_read_	pingpong/asio/client.cpp	/^  size_t bytes_read_;$/;"	m	class:session	file:
bytes_written_	pingpong/asio/client.cpp	/^  size_t bytes_written_;$/;"	m	class:session	file:
bzero	logging/LogStream.h	/^  void bzero() { ::bzero(data_, sizeof data_); }$/;"	f	class:muduo::detail::FixedBuffer
c_str	string/StringEager.h	/^  const_pointer c_str() const { return start_; }$/;"	f	class:muduo::StringEager
c_str	string/StringTrivial.h	/^  const char* c_str() const$/;"	f	class:trivial::String
c_str	tpc/Common.h	/^  const char* c_str() const { return str_; }$/;"	f	class:StringArg
calculate	java/billing/BillCalculator.java	/^    public Money calculate(UserMonthUsage input) {$/;"	m	class:BillCalculator
calculator	java/billing/test/NormalCustomerTest.java	/^    private static final BillCalculator calculator = new BillCalculator(".\/groovy\/billing\/");$/;"	f	class:NormalCustomerTest	file:
calculator	java/billing/test/VipCustomerTest.java	/^    private static final BillCalculator calculator = new BillCalculator(".\/groovy\/billing\/");$/;"	f	class:VipCustomerTest	file:
call	thread/SignalSlot.h	/^  void call(ARGS&&... args)$/;"	f	class:muduo::Signal
call	thread/SignalSlotTrivial.h	/^  void call(ARGS&&... args)$/;"	f	class:SignalTrivial
callBlockingMethod	protorpc/muduo/rpc/RpcChannel.java	/^    public Message callBlockingMethod(MethodDescriptor method, RpcController controller,$/;"	m	class:RpcChannel
callMethod	protorpc/echo/EchoProto.java	/^    public final void callMethod($/;"	m	class:EchoProto.EchoService
callMethod	protorpc/muduo/rpc/RpcChannel.java	/^    public void callMethod(MethodDescriptor method, RpcController controller, Message request,$/;"	m	class:RpcChannel
callMethod	protorpc/sudoku/Sudoku.java	/^    public final void callMethod($/;"	m	class:Sudoku.SudokuService
callback_	protobuf/dispatcher.cc	/^  ProtobufMessageCallback callback_;$/;"	m	class:CallbackT	file:
callback_	reactor/s02/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s03/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s04/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s05/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s06/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s07/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s08/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s09/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s10/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s11/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s12/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callback_	reactor/s13/Timer.h	/^  const TimerCallback callback_;$/;"	m	class:muduo::Timer
callbacks_	protobuf/dispatcher.cc	/^  CallbackMap callbacks_;$/;"	m	class:ProtobufDispatcher	file:
callbacks_	protobuf/dispatcher_lite.cc	/^  CallbackMap callbacks_;$/;"	m	class:ProtobufDispatcherLite	file:
callingExpiredTimers_	reactor/s11/TimerQueue.h	/^  bool callingExpiredTimers_; \/* atomic *\/$/;"	m	class:muduo::TimerQueue
callingExpiredTimers_	reactor/s12/TimerQueue.h	/^  bool callingExpiredTimers_; \/* atomic *\/$/;"	m	class:muduo::TimerQueue
callingExpiredTimers_	reactor/s13/TimerQueue.h	/^  bool callingExpiredTimers_; \/* atomic *\/$/;"	m	class:muduo::TimerQueue
callingPendingFunctors_	reactor/s03/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s04/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s05/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s06/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s07/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s08/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s09/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s10/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s11/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s12/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
callingPendingFunctors_	reactor/s13/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
cancel	reactor/s11/EventLoop.cc	/^void EventLoop::cancel(TimerId timerId)$/;"	f	class:EventLoop
cancel	reactor/s11/TimerQueue.cc	/^void TimerQueue::cancel(TimerId timerId)$/;"	f	class:TimerQueue
cancel	reactor/s12/EventLoop.cc	/^void EventLoop::cancel(TimerId timerId)$/;"	f	class:EventLoop
cancel	reactor/s12/TimerQueue.cc	/^void TimerQueue::cancel(TimerId timerId)$/;"	f	class:TimerQueue
cancel	reactor/s13/EventLoop.cc	/^void EventLoop::cancel(TimerId timerId)$/;"	f	class:EventLoop
cancel	reactor/s13/TimerQueue.cc	/^void TimerQueue::cancel(TimerId timerId)$/;"	f	class:TimerQueue
cancel	thread/test/RequestInventory_test2.cc	/^  void cancel() __attribute__ ((noinline))$/;"	f	class:Request
cancelInLoop	reactor/s11/TimerQueue.cc	/^void TimerQueue::cancelInLoop(TimerId timerId)$/;"	f	class:TimerQueue
cancelInLoop	reactor/s12/TimerQueue.cc	/^void TimerQueue::cancelInLoop(TimerId timerId)$/;"	f	class:TimerQueue
cancelInLoop	reactor/s13/TimerQueue.cc	/^void TimerQueue::cancelInLoop(TimerId timerId)$/;"	f	class:TimerQueue
cancelSelf	reactor/s11/test4.cc	/^void cancelSelf()$/;"	f
cancelSelf	reactor/s12/test4.cc	/^void cancelSelf()$/;"	f
cancelSelf	reactor/s13/test4.cc	/^void cancelSelf()$/;"	f
cancelingTimers_	reactor/s11/TimerQueue.h	/^  ActiveTimerSet cancelingTimers_;$/;"	m	class:muduo::TimerQueue
cancelingTimers_	reactor/s12/TimerQueue.h	/^  ActiveTimerSet cancelingTimers_;$/;"	m	class:muduo::TimerQueue
cancelingTimers_	reactor/s13/TimerQueue.h	/^  ActiveTimerSet cancelingTimers_;$/;"	m	class:muduo::TimerQueue
capacity	string/StringEager.h	/^  size_type capacity() const { return capacity_; }$/;"	f	class:muduo::StringEager
capacity	thread/BoundedBlockingQueue.h	/^  size_t capacity() const$/;"	f	class:muduo::BoundedBlockingQueue
capacity_	string/StringEager.h	/^  size_type capacity_;$/;"	m	class:muduo::StringEager
capacity_	string/StringSso.h	/^    uint32_t capacity_;$/;"	m	union:muduo::StringSso::__anon1
cards	puzzle/poker/poker.cc	/^  Card cards[5];$/;"	m	struct:Hand	file:
cb_	thread/SignalSlot.h	/^  Callback cb_;$/;"	m	struct:muduo::detail::SlotImpl
cbegin	string/StringEager.h	/^  const_iterator cbegin() const { return start_; }$/;"	f	class:muduo::StringEager
cend	string/StringEager.h	/^  const_iterator cend() const { return start_ + size_; }$/;"	f	class:muduo::StringEager
channel	protorpc/echo/EchoProto.java	/^      private final com.google.protobuf.BlockingRpcChannel channel;$/;"	f	class:EchoProto.EchoService.BlockingStub	file:
channel	protorpc/echo/EchoProto.java	/^      private final com.google.protobuf.RpcChannel channel;$/;"	f	class:EchoProto.EchoService.Stub	file:
channel	protorpc/muduo/rpc/RpcChannel.java	/^    private Channel channel;$/;"	f	class:RpcChannel	file:
channel	protorpc/muduo/rpc/RpcMessageHandler.java	/^    private volatile RpcChannel channel;$/;"	f	class:RpcMessageHandler	file:
channel	protorpc/sudoku/Sudoku.java	/^      private final com.google.protobuf.BlockingRpcChannel channel;$/;"	f	class:Sudoku.SudokuService.BlockingStub	file:
channel	protorpc/sudoku/Sudoku.java	/^      private final com.google.protobuf.RpcChannel channel;$/;"	f	class:Sudoku.SudokuService.Stub	file:
channelConnected	protorpc/muduo/rpc/RpcClient.java	/^    public void channelConnected(Channel channel) {$/;"	m	class:RpcClient
channelConnected	protorpc/muduo/rpc/RpcMessageHandler.java	/^    public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {$/;"	m	class:RpcMessageHandler
channelConnected	protorpc/muduo/rpc/RpcPeer.java	/^    public abstract void channelConnected(Channel channel);$/;"	m	class:RpcPeer
channelConnected	protorpc/muduo/rpc/RpcServer.java	/^    public void channelConnected(Channel channel) {$/;"	m	class:RpcServer
channelFactory	protorpc/echo/EchoClient.java	/^        private ChannelFactory channelFactory;$/;"	f	class:EchoClient.SyncClient	file:
channel_	reactor/s05/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channel_	reactor/s06/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channel_	reactor/s07/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channel_	reactor/s08/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channel_	reactor/s09/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channel_	reactor/s10/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channel_	reactor/s11/Connector.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::Connector
channel_	reactor/s11/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channel_	reactor/s12/Connector.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::Connector
channel_	reactor/s12/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channel_	reactor/s13/Connector.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::Connector
channel_	reactor/s13/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_;$/;"	m	class:muduo::TcpConnection
channels_	reactor/s01/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s02/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s03/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s04/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s05/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s06/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s07/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s08/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s09/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s10/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s11/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s12/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
channels_	reactor/s13/EPoller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::EPoller
channels_	reactor/s13/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::Poller
chargen	python/chargen.py	/^def chargen(sock):$/;"	f
chargen	tpc/chargen.cc	/^void chargen(TcpStreamPtr stream)$/;"	f
checkerboard_	protorpc/sudoku/Sudoku.java	/^      private java.lang.Object checkerboard_ = "";$/;"	f	class:Sudoku.SudokuRequest.Builder	file:
checkerboard_	protorpc/sudoku/Sudoku.java	/^      private java.lang.Object checkerboard_ = "";$/;"	f	class:Sudoku.SudokuResponse.Builder	file:
checkerboard_	protorpc/sudoku/Sudoku.java	/^    private java.lang.Object checkerboard_;$/;"	f	class:Sudoku.SudokuRequest	file:
checkerboard_	protorpc/sudoku/Sudoku.java	/^    private java.lang.Object checkerboard_;$/;"	f	class:Sudoku.SudokuResponse	file:
checksum	protorpc/muduo/codec/ProtobufDecoder.java	/^    private boolean checksum(ChannelBuffer buffer) {$/;"	m	class:ProtobufDecoder	file:
chess	sudoku/sudoku_basic.cc	/^int (*chess)[COL] = (int (*)[COL])board;$/;"	v
clean	thread/SignalSlot.h	/^  void clean()$/;"	f	struct:muduo::detail::SignalImpl
clear	protorpc/echo/EchoProto.java	/^      public Builder clear() {$/;"	m	class:EchoProto.EchoRequest.Builder
clear	protorpc/echo/EchoProto.java	/^      public Builder clear() {$/;"	m	class:EchoProto.EchoResponse.Builder
clear	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clear() {$/;"	m	class:QueryProtos.Answer.Builder
clear	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clear() {$/;"	m	class:QueryProtos.Empty.Builder
clear	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clear() {$/;"	m	class:QueryProtos.Query.Builder
clear	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clear() {$/;"	m	class:RpcProto.RpcMessage.Builder
clear	protorpc/sudoku/Sudoku.java	/^      public Builder clear() {$/;"	m	class:Sudoku.SudokuRequest.Builder
clear	protorpc/sudoku/Sudoku.java	/^      public Builder clear() {$/;"	m	class:Sudoku.SudokuResponse.Builder
clear	string/StringEager.cc	/^void StringEager::clear() throw()$/;"	f	class:StringEager
clearAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clearAnswerer() {$/;"	m	class:QueryProtos.Answer.Builder
clearCheckerboard	protorpc/sudoku/Sudoku.java	/^      public Builder clearCheckerboard() {$/;"	m	class:Sudoku.SudokuRequest.Builder
clearCheckerboard	protorpc/sudoku/Sudoku.java	/^      public Builder clearCheckerboard() {$/;"	m	class:Sudoku.SudokuResponse.Builder
clearError	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clearError() {$/;"	m	class:RpcProto.RpcMessage.Builder
clearId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clearId() {$/;"	m	class:QueryProtos.Answer.Builder
clearId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clearId() {$/;"	m	class:QueryProtos.Empty.Builder
clearId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clearId() {$/;"	m	class:QueryProtos.Query.Builder
clearId	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clearId() {$/;"	m	class:RpcProto.RpcMessage.Builder
clearMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clearMethod() {$/;"	m	class:RpcProto.RpcMessage.Builder
clearPayload	protorpc/echo/EchoProto.java	/^      public Builder clearPayload() {$/;"	m	class:EchoProto.EchoRequest.Builder
clearPayload	protorpc/echo/EchoProto.java	/^      public Builder clearPayload() {$/;"	m	class:EchoProto.EchoResponse.Builder
clearQuestion	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clearQuestion() {$/;"	m	class:QueryProtos.Query.Builder
clearQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clearQuestioner() {$/;"	m	class:QueryProtos.Answer.Builder
clearQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clearQuestioner() {$/;"	m	class:QueryProtos.Query.Builder
clearRequest	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clearRequest() {$/;"	m	class:RpcProto.RpcMessage.Builder
clearResponse	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clearResponse() {$/;"	m	class:RpcProto.RpcMessage.Builder
clearService	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clearService() {$/;"	m	class:RpcProto.RpcMessage.Builder
clearSolution	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clearSolution() {$/;"	m	class:QueryProtos.Answer.Builder
clearSolved	protorpc/sudoku/Sudoku.java	/^      public Builder clearSolved() {$/;"	m	class:Sudoku.SudokuResponse.Builder
clearType	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clearType() {$/;"	m	class:RpcProto.RpcMessage.Builder
client	pingpong/asio/client.cpp	/^  client(asio::io_service& ios,$/;"	f	class:client
client	pingpong/asio/client.cpp	/^class client$/;"	c	file:
client	protorpc/echo/EchoClient.java	/^        private RpcClient client;$/;"	f	class:EchoClient.AsyncClient	file:
clientOut	ssl/benchmark-openssl.cc	/^muduo::net::Buffer clientOut, serverOut;$/;"	v
clientOut	ssl/benchmark-polarssl.cc	/^muduo::net::Buffer clientOut, serverOut;$/;"	v
clientThread	ssl/loop-polarssl.cc	/^void clientThread(entropy_context* entropy, int* clientFd)$/;"	f
client_socket	python/chat-poll.py	/^            client_socket = connections[fileno]$/;"	v
client_socket	python/echo-poll.py	/^            client_socket = connections[fileno]$/;"	v
clone	java/billing/Rule.java	/^    protected Object clone() {$/;"	m	class:Rule
clone	protorpc/echo/EchoProto.java	/^      public Builder clone() {$/;"	m	class:EchoProto.EchoRequest.Builder
clone	protorpc/echo/EchoProto.java	/^      public Builder clone() {$/;"	m	class:EchoProto.EchoResponse.Builder
clone	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clone() {$/;"	m	class:QueryProtos.Answer.Builder
clone	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clone() {$/;"	m	class:QueryProtos.Empty.Builder
clone	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder clone() {$/;"	m	class:QueryProtos.Query.Builder
clone	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder clone() {$/;"	m	class:RpcProto.RpcMessage.Builder
clone	protorpc/sudoku/Sudoku.java	/^      public Builder clone() {$/;"	m	class:Sudoku.SudokuRequest.Builder
clone	protorpc/sudoku/Sudoku.java	/^      public Builder clone() {$/;"	m	class:Sudoku.SudokuResponse.Builder
close	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture close() {$/;"	m	class:MockChannel
close	reactor/s04/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s05/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s06/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s07/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s08/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s09/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s10/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s11/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s12/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
close	reactor/s13/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
closeCallback_	reactor/s06/Channel.h	/^  EventCallback closeCallback_;$/;"	m	class:muduo::Channel
closeCallback_	reactor/s06/TcpConnection.h	/^  CloseCallback closeCallback_;$/;"	m	class:muduo::TcpConnection
closeCallback_	reactor/s07/Channel.h	/^  EventCallback closeCallback_;$/;"	m	class:muduo::Channel
closeCallback_	reactor/s07/TcpConnection.h	/^  CloseCallback closeCallback_;$/;"	m	class:muduo::TcpConnection
closeCallback_	reactor/s08/Channel.h	/^  EventCallback closeCallback_;$/;"	m	class:muduo::Channel
closeCallback_	reactor/s08/TcpConnection.h	/^  CloseCallback closeCallback_;$/;"	m	class:muduo::TcpConnection
closeCallback_	reactor/s09/Channel.h	/^  EventCallback closeCallback_;$/;"	m	class:muduo::Channel
closeCallback_	reactor/s09/TcpConnection.h	/^  CloseCallback closeCallback_;$/;"	m	class:muduo::TcpConnection
closeCallback_	reactor/s10/Channel.h	/^  EventCallback closeCallback_;$/;"	m	class:muduo::Channel
closeCallback_	reactor/s10/TcpConnection.h	/^  CloseCallback closeCallback_;$/;"	m	class:muduo::TcpConnection
closeCallback_	reactor/s11/Channel.h	/^  EventCallback closeCallback_;$/;"	m	class:muduo::Channel
closeCallback_	reactor/s11/TcpConnection.h	/^  CloseCallback closeCallback_;$/;"	m	class:muduo::TcpConnection
closeCallback_	reactor/s12/Channel.h	/^  EventCallback closeCallback_;$/;"	m	class:muduo::Channel
closeCallback_	reactor/s12/TcpConnection.h	/^  CloseCallback closeCallback_;$/;"	m	class:muduo::TcpConnection
closeCallback_	reactor/s13/Channel.h	/^  EventCallback closeCallback_;$/;"	m	class:muduo::Channel
closeCallback_	reactor/s13/TcpConnection.h	/^  CloseCallback closeCallback_;$/;"	m	class:muduo::TcpConnection
close_socket	pingpong/asio/client.cpp	/^  void close_socket()$/;"	f	class:session	file:
cnt	reactor/s02/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s03/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s04/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s05/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s06/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s07/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s08/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s09/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s10/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s11/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s12/test4.cc	/^int cnt = 0;$/;"	v
cnt	reactor/s13/test4.cc	/^int cnt = 0;$/;"	v
cnt_	puzzle/dance.cc	/^  int     cnt_;$/;"	m	struct:Dance	file:
col	puzzle/dance.cc	/^    Column* col;$/;"	m	struct:Node	file:
col	sudoku/sudoku_dancing_links.cc	/^    Column* col;$/;"	m	struct:Node	file:
col_idx	puzzle/dance.cc	/^    int col_idx;$/;"	m	struct:Node	file:
collect_neighbors	sudoku/neighbor.cc	/^static void collect_neighbors(const bool adjacent[ROW][COL], int row, int col, int myneighbors[NEIGHBOR])$/;"	f	file:
columns	puzzle/nqueens.cc	/^  bool columns[kMaxQueens];$/;"	m	struct:BackTracking	file:
columns	puzzle/nqueens_mt.cc	/^  bool columns[kMaxQueens];$/;"	m	struct:BackTracking	file:
columns	puzzle/nqueens_opt.cc	/^  uint32_t columns[kMaxQueens];$/;"	m	struct:BackTracking	file:
columns_	puzzle/dance.cc	/^  Column* columns_[100];$/;"	m	struct:Dance	file:
columns_	sudoku/sudoku_dancing_links.cc	/^    Column* columns_[400];$/;"	m	struct:Dance	file:
com.chenshuo.pdf	java/pdf/com/chenshuo/pdf/PdfHack.java	/^package com.chenshuo.pdf;$/;"	p
compareGmt	datetime/TimeZone.cc	/^  bool compareGmt;$/;"	m	struct:muduo::detail::Comp	file:
compareTo	java/bankqueue/event/Event.java	/^    public int compareTo(Event rhs) {$/;"	m	class:Event
compareTo	protorpc/muduo/rpc/test/MockChannel.java	/^    public int compareTo(Channel o) {$/;"	m	class:MockChannel
concat	java/bankqueue/tests/BankTest.java	/^    String concat(String... lines) {$/;"	m	class:BankTest
cond_	logging/AsyncLoggingDoubleBuffering.h	/^  muduo::Condition cond_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
cond_	reactor/s03/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s04/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s05/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s06/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s07/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s08/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s09/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s10/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s11/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s12/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	reactor/s13/EventLoopThread.h	/^  Condition cond_;$/;"	m	class:muduo::EventLoopThread
cond_	thread/ThreadPool.h	/^  Condition cond_;$/;"	m	class:muduo::ThreadPool
cond_	thread/test/Waiter_test.cc	/^  muduo::Condition cond_;$/;"	m	class:WaiterInMuduo	file:
cond_	thread/test/Waiter_test.cc	/^  pthread_cond_t cond_;$/;"	m	class:Waiter	file:
condition_	thread/CountDownLatch.h	/^  Condition condition_;$/;"	m	class:muduo::CountDownLatch
connect	protorpc/echo/EchoClient.java	/^        public void connect() {$/;"	m	class:EchoClient.AsyncClient
connect	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture connect(SocketAddress remoteAddress) {$/;"	m	class:MockChannel
connect	reactor/s11/Connector.cc	/^void Connector::connect()$/;"	f	class:Connector
connect	reactor/s11/SocketsOps.cc	/^int sockets::connect(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
connect	reactor/s12/Connector.cc	/^void Connector::connect()$/;"	f	class:Connector
connect	reactor/s12/SocketsOps.cc	/^int sockets::connect(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
connect	reactor/s12/TcpClient.cc	/^void TcpClient::connect()$/;"	f	class:TcpClient
connect	reactor/s13/Connector.cc	/^void Connector::connect()$/;"	f	class:Connector
connect	reactor/s13/SocketsOps.cc	/^int sockets::connect(int sockfd, const struct sockaddr_in& addr)$/;"	f	class:sockets
connect	reactor/s13/TcpClient.cc	/^void TcpClient::connect()$/;"	f	class:TcpClient
connect	thread/SignalSlot.h	/^  Slot connect(Callback&& func)$/;"	f	class:muduo::Signal
connect	thread/SignalSlot.h	/^  Slot connect(Callback&& func, const boost::shared_ptr<void>& tie)$/;"	f	class:muduo::Signal
connect	thread/SignalSlotTrivial.h	/^  void connect(Functor&& func)$/;"	f	class:SignalTrivial
connect	tpc/Socket.cc	/^int Socket::connect(const InetAddress& addr)$/;"	f	class:Socket
connect	tpc/TcpStream.cc	/^TcpStreamPtr TcpStream::connect(const InetAddress& serverAddr)$/;"	f	class:TcpStream
connect	tpc/TcpStream.cc	/^TcpStreamPtr TcpStream::connect(const InetAddress& serverAddr, const InetAddress& localAddr)$/;"	f	class:TcpStream
connectCallback	reactor/s11/test12.cc	/^void connectCallback(int sockfd)$/;"	f
connectCallback	reactor/s12/test12.cc	/^void connectCallback(int sockfd)$/;"	f
connectCallback	reactor/s13/test12.cc	/^void connectCallback(int sockfd)$/;"	f
connectDestroyed	reactor/s06/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectDestroyed	reactor/s07/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectDestroyed	reactor/s08/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectDestroyed	reactor/s09/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectDestroyed	reactor/s10/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectDestroyed	reactor/s11/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectDestroyed	reactor/s12/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectDestroyed	reactor/s13/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectEstablished	reactor/s05/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectEstablished	reactor/s06/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectEstablished	reactor/s07/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectEstablished	reactor/s08/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectEstablished	reactor/s09/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectEstablished	reactor/s10/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectEstablished	reactor/s11/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectEstablished	reactor/s12/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectEstablished	reactor/s13/TcpConnection.cc	/^void TcpConnection::connectEstablished()$/;"	f	class:TcpConnection
connectInternal	tpc/TcpStream.cc	/^TcpStreamPtr TcpStream::connectInternal(const InetAddress& serverAddr, const InetAddress* localAddr)$/;"	f	class:TcpStream
connect_	reactor/s11/Connector.h	/^  bool connect_; \/\/ atomic$/;"	m	class:muduo::Connector
connect_	reactor/s12/Connector.h	/^  bool connect_; \/\/ atomic$/;"	m	class:muduo::Connector
connect_	reactor/s12/TcpClient.h	/^  bool connect_; \/\/ atomic$/;"	m	class:muduo::TcpClient
connect_	reactor/s13/Connector.h	/^  bool connect_; \/\/ atomic$/;"	m	class:muduo::Connector
connect_	reactor/s13/TcpClient.h	/^  bool connect_; \/\/ atomic$/;"	m	class:muduo::TcpClient
connect_addr	python/tcprelay.py	/^connect_addr = ('localhost', 2007)$/;"	v
connect_many	faketcp/connectmany.cc	/^void connect_many(int fd, const char* ipstr, int port, int count)$/;"	f
connect_one	faketcp/connectmany.cc	/^bool connect_one(int fd, uint32_t daddr, int dport, uint32_t saddr, int sport)$/;"	f
connected	reactor/s05/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connected	reactor/s06/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connected	reactor/s07/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connected	reactor/s08/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connected	reactor/s09/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connected	reactor/s10/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connected	reactor/s11/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connected	reactor/s12/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connected	reactor/s13/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::TcpConnection
connecting	reactor/s11/Connector.cc	/^void Connector::connecting(int sockfd)$/;"	f	class:Connector
connecting	reactor/s12/Connector.cc	/^void Connector::connecting(int sockfd)$/;"	f	class:Connector
connecting	reactor/s13/Connector.cc	/^void Connector::connecting(int sockfd)$/;"	f	class:Connector
connection	reactor/s12/TcpClient.h	/^  TcpConnectionPtr connection() const$/;"	f	class:muduo::TcpClient
connection	reactor/s13/TcpClient.h	/^  TcpConnectionPtr connection() const$/;"	f	class:muduo::TcpClient
connectionCallback_	reactor/s05/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s05/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connectionCallback_	reactor/s06/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s06/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connectionCallback_	reactor/s07/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s07/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connectionCallback_	reactor/s08/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s08/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connectionCallback_	reactor/s09/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s09/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connectionCallback_	reactor/s10/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s10/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connectionCallback_	reactor/s11/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s11/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connectionCallback_	reactor/s12/TcpClient.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpClient
connectionCallback_	reactor/s12/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s12/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connectionCallback_	reactor/s13/TcpClient.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpClient
connectionCallback_	reactor/s13/TcpConnection.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpConnection
connectionCallback_	reactor/s13/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::TcpServer
connection_	reactor/s12/TcpClient.h	/^  TcpConnectionPtr connection_; \/\/ @BuardedBy mutex_$/;"	m	class:muduo::TcpClient
connection_	reactor/s13/TcpClient.h	/^  TcpConnectionPtr connection_; \/\/ @BuardedBy mutex_$/;"	m	class:muduo::TcpClient
connections	python/chat-poll.py	/^connections = {}$/;"	v
connections	python/chat-reactor.py	/^connections = {}$/;"	v
connections	python/echo-poll.py	/^connections = {}$/;"	v
connections	python/echo-reactor.py	/^connections = {}$/;"	v
connections_	reactor/s05/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connections_	reactor/s06/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connections_	reactor/s07/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connections_	reactor/s08/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connections_	reactor/s09/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connections_	reactor/s10/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connections_	reactor/s11/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connections_	reactor/s12/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connections_	reactor/s13/TcpServer.h	/^  ConnectionMap connections_;$/;"	m	class:muduo::TcpServer
connector_	reactor/s12/TcpClient.h	/^  ConnectorPtr connector_; \/\/ avoid revealing Connector$/;"	m	class:muduo::TcpClient
connector_	reactor/s13/TcpClient.h	/^  ConnectorPtr connector_; \/\/ avoid revealing Connector$/;"	m	class:muduo::TcpClient
const_iterator	string/StringEager.h	/^  typedef const_pointer const_iterator;$/;"	t	class:muduo::StringEager
const_iterator	string/StringSso.h	/^  typedef const_pointer const_iterator;$/;"	t	class:muduo::StringSso
const_pointer	string/StringEager.h	/^  typedef const char*   const_pointer;$/;"	t	class:muduo::StringEager
const_pointer	string/StringSso.h	/^  typedef const char*   const_pointer;$/;"	t	class:muduo::StringSso
const_reference	string/StringEager.h	/^  typedef const char&   const_reference;$/;"	t	class:muduo::StringEager
const_reference	string/StringSso.h	/^  typedef const char&   const_reference;$/;"	t	class:muduo::StringSso
convert	logging/LogStream.cc	/^size_t convert(char buf[], T value)$/;"	f	namespace:muduo::detail
convertHex	logging/LogStream.cc	/^size_t convertHex(char buf[], uintptr_t value)$/;"	f	namespace:muduo::detail
cookieEnd	logging/LogStream.cc	/^void FixedBuffer<SIZE>::cookieEnd()$/;"	f	class:FixedBuffer
cookieStart	logging/LogStream.cc	/^void FixedBuffer<SIZE>::cookieStart()$/;"	f	class:FixedBuffer
cookie_	logging/LogStream.h	/^  void (*cookie_)();$/;"	m	class:muduo::detail::FixedBuffer
copyOnWrite	thread/SignalSlot.h	/^  void copyOnWrite()$/;"	f	struct:muduo::detail::SignalImpl
copyable	datetime/copyable.h	/^class copyable$/;"	c	namespace:muduo
copyable	tpc/Common.h	/^struct copyable$/;"	s
count	pingpong/libevent/bench.c	/^static int count, writes, fired;$/;"	v	file:
count	protorpc/echo/EchoClient.java	/^        private int count = 0;$/;"	f	class:EchoClient.AsyncClient	file:
count	puzzle/latin_square.cc	/^int64_t count = 0;$/;"	v
count	puzzle/nqueens.cc	/^  int count;$/;"	m	struct:BackTracking	file:
count	puzzle/nqueens_mt.cc	/^  int64_t count;$/;"	m	struct:BackTracking	file:
count	puzzle/nqueens_opt.cc	/^  int64_t count;$/;"	m	struct:BackTracking	file:
count	puzzle/nqueens_opt_mt.cc	/^  int64_t count;$/;"	m	struct:BackTracking	file:
count	puzzle/poker/poker.cc	/^  int count;$/;"	m	struct:Group	file:
countChineseCharsGbk	utility/cwc.cc	/^int countChineseCharsGbk(const string& content)$/;"	f
countChineseCharsUcs2	utility/cwc.cc	/^int countChineseCharsUcs2(const string& content)$/;"	f
countChineseCharsUtf8	utility/cwc.cc	/^int countChineseCharsUtf8(const string& content)$/;"	f
countDown	thread/CountDownLatch.h	/^  void countDown()$/;"	f	class:muduo::CountDownLatch
count_	basic/counted_ptr.h	/^      count_(rhs.count_)$/;"	f	class:counted_ptr
count_	basic/counted_ptr.h	/^  int* count_;$/;"	m	class:counted_ptr
count_	logging/LogFile.h	/^  int count_;$/;"	m	class:muduo::LogFile
count_	puzzle/query_freq.cc	/^  int64_t count_;$/;"	m	class:Source	file:
count_	thread/CountDownLatch.h	/^  int count_;$/;"	m	class:muduo::CountDownLatch
count_	topk/merger.cc	/^  int64_t count_;$/;"	m	class:Source	file:
counted_ptr	basic/counted_ptr.h	/^  counted_ptr(T* p = nullptr)$/;"	f	class:counted_ptr
counted_ptr	basic/counted_ptr.h	/^class counted_ptr$/;"	c
cover	puzzle/dance.cc	/^  void cover(Column* c)$/;"	f	struct:Dance
cover	sudoku/sudoku_dancing_links.cc	/^    void cover(Column* c)$/;"	f	struct:Dance
create	java/billing/RuleFactory.java	/^    Rule create(String name) {$/;"	m	class:RuleFactory
create	java/billing/RuleFactory.java	/^    Rule create(String name, Object state) {$/;"	m	class:RuleFactory
create	protorpc/echo/EchoProto.java	/^      private static Builder create() {$/;"	m	class:EchoProto.EchoRequest.Builder	file:
create	protorpc/echo/EchoProto.java	/^      private static Builder create() {$/;"	m	class:EchoProto.EchoResponse.Builder	file:
create	protorpc/muduo/codec/tests/QueryProtos.java	/^      private static Builder create() {$/;"	m	class:QueryProtos.Answer.Builder	file:
create	protorpc/muduo/codec/tests/QueryProtos.java	/^      private static Builder create() {$/;"	m	class:QueryProtos.Empty.Builder	file:
create	protorpc/muduo/codec/tests/QueryProtos.java	/^      private static Builder create() {$/;"	m	class:QueryProtos.Query.Builder	file:
create	protorpc/muduo/rpc/proto/RpcProto.java	/^      private static Builder create() {$/;"	m	class:RpcProto.RpcMessage.Builder	file:
create	protorpc/sudoku/Sudoku.java	/^      private static Builder create() {$/;"	m	class:Sudoku.SudokuRequest.Builder	file:
create	protorpc/sudoku/Sudoku.java	/^      private static Builder create() {$/;"	m	class:Sudoku.SudokuResponse.Builder	file:
createEventfd	reactor/s03/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s04/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s05/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s06/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s07/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s08/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s09/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s10/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s11/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s12/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createEventfd	reactor/s13/EventLoop.cc	/^static int createEventfd()$/;"	f	file:
createMessage	protobuf/codec.h	/^inline google::protobuf::Message* createMessage(const std::string& type_name)$/;"	f
createNonblockingOrDie	reactor/s04/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s05/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s06/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s07/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s08/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s09/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s10/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s11/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s12/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createNonblockingOrDie	reactor/s13/SocketsOps.cc	/^int sockets::createNonblockingOrDie()$/;"	f	class:sockets
createTCP	tpc/Socket.cc	/^Socket Socket::createTCP()$/;"	f	class:Socket
createTimerfd	reactor/s02/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s03/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s04/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s05/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s06/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s07/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s08/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s09/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s10/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s11/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s12/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createTimerfd	reactor/s13/TimerQueue.cc	/^int createTimerfd()$/;"	f	namespace:muduo::detail
createUDP	tpc/Socket.cc	/^Socket Socket::createUDP()$/;"	f	class:Socket
crop	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    private static void crop(String input) throws Exception {$/;"	m	class:PdfHack	file:
cur_	logging/LogStream.h	/^  char* cur_;$/;"	m	class:muduo::detail::FixedBuffer
cur_node_	puzzle/dance.cc	/^  int     cur_node_;$/;"	m	struct:Dance	file:
cur_node_	sudoku/sudoku_dancing_links.cc	/^    int     cur_node_;$/;"	m	struct:Dance	file:
current	logging/LogStream.h	/^  char* current() { return cur_; }$/;"	f	class:muduo::detail::FixedBuffer
currentBuffer_	logging/AsyncLoggingDoubleBuffering.h	/^  BufferPtr currentBuffer_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
custom_alloc_handler	pingpong/asio/handler_allocator.hpp	/^  custom_alloc_handler(handler_allocator& a, Handler h)$/;"	f	class:custom_alloc_handler
custom_alloc_handler	pingpong/asio/handler_allocator.hpp	/^class custom_alloc_handler$/;"	c
customer	java/bankqueue/event/CustomerArriveEvent.java	/^    private final Customer customer;$/;"	f	class:CustomerArriveEvent	file:
customer	java/bankqueue/event/CustomerLeaveEvent.java	/^    private final Customer customer;$/;"	f	class:CustomerLeaveEvent	file:
daddr	faketcp/faketcp.h	/^  uint32_t saddr, daddr;$/;"	m	struct:SocketAddr
data	esort/sort02.cc	/^  char data[kRecordSize];$/;"	m	struct:Record	file:
data	esort/sort03.cc	/^  char data[kRecordSize];$/;"	m	struct:Record	file:
data	esort/sort03.cc	/^  const Data& data() const$/;"	f	class:Task
data	esort/sort04.cc	/^  char data[kRecordSize];$/;"	m	struct:Record	file:
data	esort/sort04.cc	/^  char data[kRecordSize];$/;"	m	struct:Source	file:
data	esort/sort04.cc	/^  const Data& data() const$/;"	f	class:Task
data	esort/sort10.cc	/^  const std::vector<int64_t>* data;$/;"	m	struct:Source	file:
data	esort/sort11.cc	/^  const std::vector<int64_t>* data;$/;"	m	struct:Source	file:
data	esort/sort12.cc	/^  const std::vector<ElementType>* data;$/;"	m	struct:Source	file:
data	java/billing/Slip.java	/^    long data;$/;"	f	class:Slip
data	java/billing/UserMonthUsage.java	/^    public final Map<DataFields.UserField, Object> data;$/;"	f	class:UserMonthUsage
data	logging/AsyncLoggingQueue.h	/^  const char* data() const { return data_; }$/;"	f	struct:muduo::LogMessage
data	logging/LogStream.h	/^  const char* data() const { return buf_; }$/;"	f	class:muduo::Fmt
data	logging/LogStream.h	/^  const char* data() const { return data_; }$/;"	f	class:muduo::detail::FixedBuffer
data	python/chat-poll.py	/^            data = client_socket.recv(4096)$/;"	v
data	python/echo-poll.py	/^            data = client_socket.recv(4096)$/;"	v
data	string/StringEager.h	/^  const_pointer data() const  { return start_; }$/;"	f	class:muduo::StringEager
data	tpc/ttcp.cc	/^  char data[0];$/;"	m	struct:PayloadMessage	file:
data_	datetime/TimeZone.h	/^  boost::shared_ptr<Data> data_;$/;"	m	class:muduo::TimeZone
data_	esort/sort03.cc	/^  Data data_;$/;"	m	class:Task	file:
data_	esort/sort04.cc	/^  Data data_;$/;"	m	class:Task	file:
data_	logging/AsyncLoggingQueue.h	/^  char data_[4000];$/;"	m	struct:muduo::LogMessage
data_	logging/LogStream.h	/^  char data_[SIZE];$/;"	m	class:muduo::detail::FixedBuffer
data_	string/StringSso.h	/^  } data_;$/;"	m	class:muduo::StringSso	typeref:union:muduo::StringSso::__anon1
data_	string/StringTrivial.h	/^    : data_(rhs.data_)$/;"	f	class:trivial::String
data_	string/StringTrivial.h	/^  char* data_;$/;"	m	class:trivial2::String
data_	string/StringTrivial.h	/^  char* data_;$/;"	m	class:trivial::String
data_	thread/SignalSlot.h	/^  boost::weak_ptr<Data> data_;$/;"	m	struct:muduo::detail::SlotImpl
data_	thread/test/Customer.cc	/^  MapPtr data_;$/;"	m	class:CustomerData	file:
day	datetime/Date.h	/^    int day;  \/\/ [1..31]$/;"	m	struct:muduo::Date::YearMonthDay
day	datetime/Date.h	/^  int day() const$/;"	f	class:muduo::Date
daysOfMonth	datetime/Date_unittest.cc	/^int daysOfMonth(int year, int month)$/;"	f
days_per_year	puzzle/nbody.c	75;"	d	file:
days_per_year	puzzle/nbody.cc	/^double const days_per_year = 365.24;$/;"	v
deallocate	pingpong/asio/handler_allocator.hpp	/^  void deallocate(void* pointer)$/;"	f	class:handler_allocator
debugString	logging/LogStream.cc	/^const char* FixedBuffer<SIZE>::debugString()$/;"	f	class:FixedBuffer
decode	protobuf/codec.h	/^inline google::protobuf::Message* decode(const std::string& buf)$/;"	f
decode	protorpc/muduo/codec/ProtobufDecoder.java	/^    public Object decode(ChannelHandlerContext ctx, Channel channel, Object obj)$/;"	m	class:ProtobufDecoder
decode	protorpc/muduo/rpc/RpcDecoder.java	/^    public Object decode(ChannelHandlerContext ctx, Channel channel, Object obj)$/;"	m	class:RpcDecoder
decrement	thread/Atomic.h	/^  void decrement()$/;"	f	class:muduo::detail::AtomicIntegerT
defaultCallback_	protobuf/dispatcher.cc	/^  boost::function<void (google::protobuf::Message* message)> defaultCallback_;$/;"	m	class:ProtobufDispatcher	file:
defaultCallback_	protobuf/dispatcher_lite.cc	/^  ProtobufMessageCallback defaultCallback_;$/;"	m	class:ProtobufDispatcherLite	file:
defaultFlush	logging/Logging.cc	/^void defaultFlush()$/;"	f	namespace:muduo
defaultInstance	protorpc/echo/EchoProto.java	/^    private static final EchoRequest defaultInstance;$/;"	f	class:EchoProto.EchoRequest	file:
defaultInstance	protorpc/echo/EchoProto.java	/^    private static final EchoResponse defaultInstance;$/;"	f	class:EchoProto.EchoResponse	file:
defaultInstance	protorpc/muduo/codec/tests/QueryProtos.java	/^    private static final Answer defaultInstance;$/;"	f	class:QueryProtos.Answer	file:
defaultInstance	protorpc/muduo/codec/tests/QueryProtos.java	/^    private static final Empty defaultInstance;$/;"	f	class:QueryProtos.Empty	file:
defaultInstance	protorpc/muduo/codec/tests/QueryProtos.java	/^    private static final Query defaultInstance;$/;"	f	class:QueryProtos.Query	file:
defaultInstance	protorpc/muduo/rpc/proto/RpcProto.java	/^    private static final RpcMessage defaultInstance;$/;"	f	class:RpcProto.RpcMessage	file:
defaultInstance	protorpc/sudoku/Sudoku.java	/^    private static final SudokuRequest defaultInstance;$/;"	f	class:Sudoku.SudokuRequest	file:
defaultInstance	protorpc/sudoku/Sudoku.java	/^    private static final SudokuResponse defaultInstance;$/;"	f	class:Sudoku.SudokuResponse	file:
defaultOutput	logging/Logging.cc	/^void defaultOutput(const char* msg, int len)$/;"	f	namespace:muduo
deleteStock	thread/test/Factory.cc	/^  void deleteStock(Stock* stock)$/;"	f	class:version3::StockFactory	file:
deleteStock	thread/test/Factory.cc	/^  void deleteStock(Stock* stock)$/;"	f	class:version4::StockFactory	file:
dequeueFirstCustomer	java/bankqueue/Bank.java	/^    private <E> Customer dequeueFirstCustomer(Class<E> clazz) {$/;"	m	class:Bank	file:
descriptor	protorpc/echo/EchoProto.java	/^      descriptor;$/;"	f	class:EchoProto	file:
descriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^      descriptor;$/;"	f	class:QueryProtos	file:
descriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^      descriptor;$/;"	f	class:RpcProto	file:
descriptor	protorpc/sudoku/Sudoku.java	/^      descriptor;$/;"	f	class:Sudoku	file:
destroy	pingpong/asio/server.cpp	/^  static void destroy(session* s)$/;"	f	class:session
destroy	thread/Singleton.h	/^  static void destroy()$/;"	f	class:muduo::Singleton
destroy	thread/ThreadLocalSingleton.h	/^  static void destroy()$/;"	f	class:muduo::ThreadLocalSingleton
destructor	thread/ThreadLocal.h	/^  static void destructor(void *x)$/;"	f	class:muduo::ThreadLocal
detail	datetime/TimeZone.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	logging/LogStream.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	logging/LogStream.h	/^namespace detail$/;"	n	namespace:muduo
detail	reactor/s02/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s03/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s04/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s05/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s06/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s07/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s08/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s09/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s10/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s11/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s12/TcpClient.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s12/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s13/TcpClient.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	reactor/s13/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo	file:
detail	thread/Atomic.h	/^namespace detail$/;"	n	namespace:muduo
detail	thread/SignalSlot.h	/^namespace detail$/;"	n	namespace:muduo
detectEncoding	utility/cwc.cc	/^Encoding detectEncoding(const string& content)$/;"	f
devide	basic/uint.h	/^  uint32_t devide(const uint32_t x)$/;"	f	class:UnsignedInt
diagnoal	puzzle/nqueens.cc	/^  bool diagnoal[2*kMaxQueens], antidiagnoal[2*kMaxQueens];$/;"	m	struct:BackTracking	file:
diagnoal	puzzle/nqueens_mt.cc	/^  bool diagnoal[2*kMaxQueens], antidiagnoal[2*kMaxQueens];$/;"	m	struct:BackTracking	file:
diagnoal	puzzle/nqueens_opt.cc	/^  uint32_t diagnoal[kMaxQueens];$/;"	m	struct:BackTracking	file:
diff_a_file	reactor/mkdiff.sh	/^diff_a_file()$/;"	f
difference_type	string/StringEager.h	/^  typedef int32_t       difference_type;$/;"	t	class:muduo::StringEager
difference_type	string/StringSso.h	/^  typedef int32_t       difference_type;$/;"	t	class:muduo::StringSso
digits	logging/LogStream.cc	/^const char digits[] = "9876543210123456789";$/;"	m	namespace:muduo::detail	file:
digitsHex	logging/LogStream.cc	/^const char digitsHex[] = "0123456789abcdef";$/;"	m	namespace:muduo::detail	file:
disableAll	reactor/s06/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::Channel
disableAll	reactor/s07/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::Channel
disableAll	reactor/s08/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::Channel
disableAll	reactor/s09/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::Channel
disableAll	reactor/s10/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::Channel
disableAll	reactor/s11/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::Channel
disableAll	reactor/s12/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::Channel
disableAll	reactor/s13/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::Channel
disableWriting	reactor/s08/Channel.h	/^  void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:muduo::Channel
disableWriting	reactor/s09/Channel.h	/^  void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:muduo::Channel
disableWriting	reactor/s10/Channel.h	/^  void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:muduo::Channel
disableWriting	reactor/s11/Channel.h	/^  void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:muduo::Channel
disableWriting	reactor/s12/Channel.h	/^  void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:muduo::Channel
disableWriting	reactor/s13/Channel.h	/^  void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:muduo::Channel
discard	tpc/discard.cc	/^void discard(TcpStreamPtr stream)$/;"	f
discardProtobufMessage	protobuf/dispatcher.cc	/^void discardProtobufMessage(google::protobuf::Message* message)$/;"	f
disconnect	protorpc/muduo/rpc/RpcChannel.java	/^    public void disconnect() {$/;"	m	class:RpcChannel
disconnect	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture disconnect() {$/;"	m	class:MockChannel
disconnect	reactor/s12/TcpClient.cc	/^void TcpClient::disconnect()$/;"	f	class:TcpClient
disconnect	reactor/s13/TcpClient.cc	/^void TcpClient::disconnect()$/;"	f	class:TcpClient
doCall	protorpc/muduo/rpc/RpcChannel.java	/^    private boolean doCall(Message request, Service service, MethodDescriptor method,$/;"	m	class:RpcChannel	file:
doPendingFunctors	reactor/s03/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s04/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s05/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s06/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s07/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s08/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s09/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s10/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s11/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s12/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doPendingFunctors	reactor/s13/EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:EventLoop
doRequest	protorpc/muduo/rpc/RpcChannel.java	/^    private void doRequest(RpcMessage message) {$/;"	m	class:RpcChannel	file:
dobench	pingpong/libevent/run_bench.sh	/^dobench() {$/;"	f
dodist	pingpong/libevent/run_bench.sh	/^dodist() {$/;"	f
doit	thread/test/CopyOnWrite_test.cc	/^void Foo::doit() const$/;"	f	class:Foo
doit	thread/test/ExitDeadLock.cc	/^  void doit()$/;"	f	class:GlobalObject
doit	thread/test/NonRecursiveMutex_test.cc	/^void Foo::doit() const$/;"	f	class:Foo
done	protorpc/muduo/rpc/RpcChannel.java	/^        public RpcCallback<Message> done;$/;"	f	class:RpcChannel.Outstanding
done	protorpc/muduo/rpc/RpcChannel.java	/^    protected void done(Message response, long id) {$/;"	m	class:RpcChannel
doplot	pingpong/libevent/run_bench.sh	/^doplot() {$/;"	f
down	puzzle/dance.cc	/^    Node* down;$/;"	m	struct:Node	file:
down	sudoku/sudoku_dancing_links.cc	/^    Node* down;$/;"	m	struct:Node	file:
dport	faketcp/faketcp.h	/^  uint16_t sport, dport;$/;"	m	struct:SocketAddr
dryrun	java/bankqueue/Bank.java	/^    public void dryrun(List<CustomerArriveEvent> events, StringWriter sw) {$/;"	m	class:Bank
dummyOutput	logging/Logging_test.cc	/^void dummyOutput(const char* msg, int len)$/;"	f
echo	protorpc/echo/EchoClient.java	/^package echo;$/;"	p
echo	protorpc/echo/EchoProto.java	/^      public  void echo($/;"	m	class:EchoProto.EchoService.Stub
echo	protorpc/echo/EchoProto.java	/^      public abstract void echo($/;"	m	interface:EchoProto.EchoService.Interface
echo	protorpc/echo/EchoProto.java	/^      public echo.EchoProto.EchoResponse echo($/;"	m	class:EchoProto.EchoService.BlockingStub
echo	protorpc/echo/EchoProto.java	/^      public echo.EchoProto.EchoResponse echo($/;"	m	interface:EchoProto.EchoService.BlockingInterface
echo	protorpc/echo/EchoProto.java	/^    public abstract void echo($/;"	m	class:EchoProto.EchoService
echo	protorpc/echo/EchoProto.java	/^package echo;$/;"	p
echo	protorpc/echo/EchoServer.java	/^package echo;$/;"	p
echo_event_cb	pingpong/libevent/server-half-close.c	/^static void echo_event_cb(struct bufferevent *bev, short events, void *ctx)$/;"	f	file:
echo_event_cb	pingpong/libevent/server-line-echo.c	/^static void echo_event_cb(struct bufferevent *bev, short events, void *ctx)$/;"	f	file:
echo_event_cb	pingpong/libevent/server.c	/^static void echo_event_cb(struct bufferevent *bev, short events, void *ctx)$/;"	f	file:
echo_read_cb	pingpong/libevent/server-half-close.c	/^static void echo_read_cb(struct bufferevent *bev, void *ctx)$/;"	f	file:
echo_read_cb	pingpong/libevent/server-line-echo.c	/^static void echo_read_cb(struct bufferevent *bev, void *ctx)$/;"	f	file:
echo_read_cb	pingpong/libevent/server.c	/^static void echo_read_cb(struct bufferevent *bev, void *ctx)$/;"	f	file:
echo_write_complete_cb	pingpong/libevent/server-half-close.c	/^static void echo_write_complete_cb(struct bufferevent *bev, void *ctx)$/;"	f	file:
eightCustomers	java/bankqueue/tests/BankTest.java	/^    public void eightCustomers() {$/;"	m	class:BankTest
elapsed	puzzle/poker/bench.py	/^	elapsed = time.time() - start$/;"	v
empty	logging/AsyncLoggingQueue.h	/^  bool empty() const { return length_ == 0; }$/;"	f	struct:muduo::LogMessage
empty	puzzle/huarong.cc	/^  bool empty(int y, int x) const$/;"	f	struct:Mask
empty	string/StringEager.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:muduo::StringEager
empty	thread/BoundedBlockingQueue.h	/^  bool empty() const$/;"	f	class:muduo::BoundedBlockingQueue
emptyPackages	java/billing/UserMonthUsage.java	/^    private static final List<Package> emptyPackages = new ArrayList<Package>();$/;"	f	class:UserMonthUsage	file:
enableReading	reactor/s01/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s02/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s03/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s04/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s05/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s06/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s07/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s08/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s09/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s10/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s11/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s12/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableReading	reactor/s13/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::Channel
enableRetry	reactor/s12/TcpClient.h	/^  void enableRetry() { retry_ = true; }$/;"	f	class:muduo::TcpClient
enableRetry	reactor/s13/TcpClient.h	/^  void enableRetry() { retry_ = true; }$/;"	f	class:muduo::TcpClient
enableWriting	reactor/s08/Channel.h	/^  void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:muduo::Channel
enableWriting	reactor/s09/Channel.h	/^  void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:muduo::Channel
enableWriting	reactor/s10/Channel.h	/^  void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:muduo::Channel
enableWriting	reactor/s11/Channel.h	/^  void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:muduo::Channel
enableWriting	reactor/s12/Channel.h	/^  void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:muduo::Channel
enableWriting	reactor/s13/Channel.h	/^  void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:muduo::Channel
encode	protobuf/codec.h	/^inline std::string encode(const google::protobuf::Message& message)$/;"	f
encode	protorpc/muduo/codec/ProtobufEncoder.java	/^    public Object encode(ChannelHandlerContext ctx, Channel channel, Object obj)$/;"	m	class:ProtobufEncoder
encode	protorpc/muduo/rpc/RpcEncoder.java	/^    public Object encode(ChannelHandlerContext ctx, Channel channel, Object obj)$/;"	m	class:RpcEncoder
end	logging/LogStream.h	/^  const char* end() const { return data_ + sizeof data_; }$/;"	f	class:muduo::detail::FixedBuffer
end	string/StringEager.h	/^  const_iterator end() const  { return start_ + size_; }$/;"	f	class:muduo::StringEager
end	string/StringEager.h	/^  iterator end()              { return start_ + size_; }$/;"	f	class:muduo::StringEager
endIp	algorithm/iprange.cc	/^  uint32_t endIp;    \/\/ inclusive$/;"	m	struct:IPrange	file:
energy	puzzle/nbody.c	/^double energy(int nbodies, struct planet * bodies)$/;"	f
energy	puzzle/nbody.cc	/^double energy()$/;"	f
enqueueCustomer	java/bankqueue/Bank.java	/^    private void enqueueCustomer(Customer customer) {$/;"	m	class:Bank	file:
ensureQuestionIsMutable	protorpc/muduo/codec/tests/QueryProtos.java	/^      private void ensureQuestionIsMutable() {$/;"	m	class:QueryProtos.Query.Builder	file:
ensureSolutionIsMutable	protorpc/muduo/codec/tests/QueryProtos.java	/^      private void ensureSolutionIsMutable() {$/;"	m	class:QueryProtos.Answer.Builder	file:
ensureWritableBytes	reactor/s07/Buffer.h	/^  void ensureWritableBytes(size_t len)$/;"	f	class:muduo::Buffer
ensureWritableBytes	reactor/s08/Buffer.h	/^  void ensureWritableBytes(size_t len)$/;"	f	class:muduo::Buffer
ensureWritableBytes	reactor/s09/Buffer.h	/^  void ensureWritableBytes(size_t len)$/;"	f	class:muduo::Buffer
ensureWritableBytes	reactor/s10/Buffer.h	/^  void ensureWritableBytes(size_t len)$/;"	f	class:muduo::Buffer
ensureWritableBytes	reactor/s11/Buffer.h	/^  void ensureWritableBytes(size_t len)$/;"	f	class:muduo::Buffer
ensureWritableBytes	reactor/s12/Buffer.h	/^  void ensureWritableBytes(size_t len)$/;"	f	class:muduo::Buffer
ensureWritableBytes	reactor/s13/Buffer.h	/^  void ensureWritableBytes(size_t len)$/;"	f	class:muduo::Buffer
epollfd_	reactor/s13/EPoller.h	/^  int epollfd_;$/;"	m	class:muduo::EPoller
equal	datetime/TimeZone.cc	/^  bool equal(const Transition& lhs, const Transition& rhs) const$/;"	f	struct:muduo::detail::Comp
equals	java/billing/Money.java	/^    public boolean equals(Object obj) {$/;"	m	class:Money
equals	string/StringEager.cc	/^bool StringEager::equals(const char* str, size_t len) const$/;"	f	class:StringEager
errorCallback_	reactor/s01/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s02/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s03/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s04/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s05/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s06/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s07/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s08/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s09/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s10/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s11/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s12/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
errorCallback_	reactor/s13/Channel.h	/^  EventCallback errorCallback_;$/;"	m	class:muduo::Channel
error_	protorpc/muduo/rpc/proto/RpcProto.java	/^      private muduo.rpc.proto.RpcProto.ErrorCode error_ = muduo.rpc.proto.RpcProto.ErrorCode.WRONG_PROTO;$/;"	f	class:RpcProto.RpcMessage.Builder	file:
error_	protorpc/muduo/rpc/proto/RpcProto.java	/^    private muduo.rpc.proto.RpcProto.ErrorCode error_;$/;"	f	class:RpcProto.RpcMessage	file:
eventHandling_	reactor/s06/Channel.h	/^  bool eventHandling_;$/;"	m	class:muduo::Channel
eventHandling_	reactor/s07/Channel.h	/^  bool eventHandling_;$/;"	m	class:muduo::Channel
eventHandling_	reactor/s08/Channel.h	/^  bool eventHandling_;$/;"	m	class:muduo::Channel
eventHandling_	reactor/s09/Channel.h	/^  bool eventHandling_;$/;"	m	class:muduo::Channel
eventHandling_	reactor/s10/Channel.h	/^  bool eventHandling_;$/;"	m	class:muduo::Channel
eventHandling_	reactor/s11/Channel.h	/^  bool eventHandling_;$/;"	m	class:muduo::Channel
eventHandling_	reactor/s12/Channel.h	/^  bool eventHandling_;$/;"	m	class:muduo::Channel
eventHandling_	reactor/s13/Channel.h	/^  bool eventHandling_;$/;"	m	class:muduo::Channel
eventcb	pingpong/libevent/client.c	/^static void eventcb(struct bufferevent *bev, short events, void *ptr)$/;"	f	file:
events	java/bankqueue/tests/BankTest.java	/^    ArrayList<CustomerArriveEvent> events;$/;"	f	class:BankTest
events	pingpong/libevent/bench.c	/^static struct event *events;$/;"	v	typeref:struct:event	file:
events	python/chat-poll.py	/^    events = poll.poll(10000)  # 10 seconds$/;"	v
events	python/echo-poll.py	/^    events = poll.poll(10000)  # 10 seconds$/;"	v
events	reactor/s01/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s02/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s03/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s04/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s05/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s06/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s07/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s08/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s09/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s10/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s11/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s12/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events	reactor/s13/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::Channel
events_	reactor/s01/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s02/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s03/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s04/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s05/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s06/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s07/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s08/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s09/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s10/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s11/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s12/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s13/Channel.h	/^  int        events_;$/;"	m	class:muduo::Channel
events_	reactor/s13/EPoller.h	/^  EventList events_;$/;"	m	class:muduo::EPoller
exceptionCaught	protorpc/muduo/rpc/RpcMessageHandler.java	/^    public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {$/;"	m	class:RpcMessageHandler
exist	puzzle/waterpour.cc	/^bool exist(const std::vector<Step>& steps, int curr, State next)$/;"	f
exiting_	reactor/s03/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s04/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s05/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s06/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s07/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s08/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s09/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s10/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s11/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s12/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
exiting_	reactor/s13/EventLoopThread.h	/^  bool exiting_;$/;"	m	class:muduo::EventLoopThread
expand	puzzle/poker/poker2.py	/^def expand(counts, ranks):$/;"	f
expandAndAppend	string/StringEager.cc	/^void StringEager::expandAndAppend(const char* str, size_t len)$/;"	f	class:StringEager
expectedSeqs	faketcp/discardall2.cc	/^std::map<SocketAddr, TcpState> expectedSeqs;$/;"	v
expectedSeqs	faketcp/echoall2.cc	/^std::map<SocketAddr, TcpState> expectedSeqs;$/;"	v
expiration	reactor/s02/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s03/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s04/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s05/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s06/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s07/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s08/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s09/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s10/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s11/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s12/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration	reactor/s13/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::Timer
expiration_	reactor/s02/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s03/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s04/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s05/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s06/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s07/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s08/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s09/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s10/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s11/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s12/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
expiration_	reactor/s13/Timer.h	/^  Timestamp expiration_;$/;"	m	class:muduo::Timer
factorial	basic/tutorial/factorial.cc	/^BigInt factorial(int n)$/;"	f
factory	java/billing/BillCalculator.java	/^    private final RuleFactory factory;$/;"	f	class:BillCalculator	file:
factory	java/billing/Rule.java	/^    protected RuleFactory factory;$/;"	f	class:Rule
fastFibonacci	basic/fibonacci.cc	/^std::string fastFibonacci(int N)$/;"	f
fasterFibonacci	basic/fibonacci.cc	/^std::string fasterFibonacci(int N)$/;"	f
fd	reactor/s01/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s02/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s03/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s04/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s04/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s05/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s05/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s06/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s06/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s07/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s07/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s08/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s08/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s09/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s09/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s10/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s10/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s11/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s11/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s12/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s12/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	reactor/s13/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::Channel
fd	reactor/s13/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::Socket
fd	tpc/Socket.h	/^  int fd() { return sockfd_; }$/;"	f	class:Socket
fd_	reactor/s01/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s02/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s03/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s04/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s05/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s06/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s07/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s08/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s09/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s10/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s11/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s12/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
fd_	reactor/s13/Channel.h	/^  const int  fd_;$/;"	m	class:muduo::Channel
file	algorithm/mergeN.cc	/^  const File* file;$/;"	m	struct:Input	file:
file_	esort/sort00.cc	/^  FILE* file_;$/;"	m	class:InputFile	file:
file_	esort/sort00.cc	/^  FILE* file_;$/;"	m	class:OutputFile	file:
file_	esort/sort01.cc	/^  FILE* file_;$/;"	m	class:InputFile	file:
file_	esort/sort01.cc	/^  FILE* file_;$/;"	m	class:OutputFile	file:
file_	esort/sort02.cc	/^  FILE* file_;$/;"	m	class:InputFile	file:
file_	esort/sort02.cc	/^  FILE* file_;$/;"	m	class:OutputFile	file:
file_	esort/sort03.cc	/^  FILE* file_;$/;"	m	class:InputFile	file:
file_	esort/sort03.cc	/^  FILE* file_;$/;"	m	class:OutputFile	file:
file_	esort/sort04.cc	/^  FILE* file_;$/;"	m	class:InputFile	file:
file_	esort/sort04.cc	/^  FILE* file_;$/;"	m	class:OutputFile	file:
file_	esort/sort10.cc	/^  FILE* file_;$/;"	m	class:OutputFile	file:
file_	esort/sort11.cc	/^  FILE* file_;$/;"	m	class:OutputFile	file:
file_	esort/sort12.cc	/^  FILE* file_;$/;"	m	class:OutputFile	file:
file_	logging/LogFile.h	/^  boost::scoped_ptr<File> file_;$/;"	m	class:muduo::LogFile
fillActiveChannels	reactor/s01/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s02/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s03/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s04/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s05/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s06/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s07/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s08/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s09/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s10/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s11/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s12/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillActiveChannels	reactor/s13/EPoller.cc	/^void EPoller::fillActiveChannels(int numEvents,$/;"	f	class:EPoller
fillActiveChannels	reactor/s13/Poller.cc	/^void Poller::fillActiveChannels(int numEvents,$/;"	f	class:Poller
fillBuffer	topk/sender.cc	/^WordCountList::iterator fillBuffer(WordCountList::iterator first, Buffer* buf)$/;"	f
fillGroups	puzzle/poker/poker.cc	/^void fillGroups(const int ranks[], Group groups[], int* len)$/;"	f
fillHMS	datetime/TimeZone.cc	/^inline void fillHMS(unsigned seconds, struct tm* utc)$/;"	f	namespace:muduo::detail
findIpValue	algorithm/iprange.cc	/^int findIpValue(const std::vector<IPrange>& ranges, uint32_t ip)$/;"	f
findLocaltime	datetime/TimeZone.cc	/^const Localtime* findLocaltime(const TimeZone::Data& data, Transition sentry, Comp comp)$/;"	f	namespace:muduo::detail
findSpareWindow	java/bankqueue/customer/Customer.java	/^    public abstract boolean findSpareWindow(Bank bank);$/;"	m	class:Customer
findSpareWindow	java/bankqueue/customer/FastCustomer.java	/^    public boolean findSpareWindow(Bank bank) {$/;"	m	class:FastCustomer
findSpareWindow	java/bankqueue/customer/NormalCustomer.java	/^    public boolean findSpareWindow(Bank bank) {$/;"	m	class:NormalCustomer
findSpareWindow	java/bankqueue/customer/VipCustomer.java	/^    public boolean findSpareWindow(Bank bank) {$/;"	m	class:VipCustomer
find_min_arity	sudoku/sudoku_min_arity.cc	/^static void find_min_arity(int space)$/;"	f	file:
find_min_arity	sudoku/sudoku_min_arity_cache.cc	/^static void find_min_arity(int space)$/;"	f	file:
find_spaces	sudoku/sudoku_basic.cc	/^static void find_spaces()$/;"	f	file:
finish	logging/Logging.cc	/^void Logger::Impl::finish()$/;"	f	class:Logger::Impl
fired	pingpong/libevent/bench.c	/^static int count, writes, fired;$/;"	v	file:
first	esort/sort10.cc	/^  int first, last;$/;"	m	struct:Source	file:
first	esort/sort11.cc	/^  int first, last;$/;"	m	struct:Source	file:
first	esort/sort12.cc	/^  int first, last;$/;"	m	struct:Source	file:
flush	logging/LogFile.cc	/^  void flush()$/;"	f	class:LogFile::File
flush	logging/LogFile.cc	/^void LogFile::flush()$/;"	f	class:LogFile
flush	puzzle/poker/poker.py	/^def flush(hand):$/;"	f
flushFunc	logging/LogFile_test.cc	/^void flushFunc()$/;"	f
flushInterval_	logging/AsyncLoggingDoubleBuffering.h	/^  const int flushInterval_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
flushInterval_	logging/LogFile.h	/^  const int flushInterval_;$/;"	m	class:muduo::LogFile
foo	basic/counted_ptr_test.cc	/^counted_ptr<int> foo()$/;"	f
foo	string/StringTrivialTest.cc	/^void foo(String x)$/;"	f
foo	thread/test/Exception_test.cc	/^void foo()$/;"	f
foos	thread/test/NonRecursiveMutex_test.cc	/^std::vector<Foo> foos;$/;"	v
formHand	puzzle/poker/poker.cc	/^Hand formHand(int choose[])$/;"	f
formatInteger	logging/LogStream.cc	/^void LogStream::formatInteger(T v)$/;"	f	class:LogStream
formatTime	logging/Logging.cc	/^void Logger::Impl::formatTime()$/;"	f	class:Logger::Impl
forward	python/tcprelay.py	/^def forward(source, destination):$/;"	f
fp_	datetime/TimeZone.cc	/^  FILE* fp_;$/;"	m	class:muduo::detail::File	file:
fp_	logging/LogFile.cc	/^  FILE* fp_;$/;"	m	class:LogFile::File	file:
frameEncoder	protorpc/muduo/rpc/RpcChannelPiplineFactory.java	/^    private LengthFieldPrepender frameEncoder = new LengthFieldPrepender(4);$/;"	f	class:RpcChannelPiplineFactory	file:
fromByteString	protorpc/muduo/rpc/RpcChannel.java	/^    private Message fromByteString(Message prototype, ByteString bytes) {$/;"	m	class:RpcChannel	file:
fromDec	basic/uint.cc	/^uint32_t fromDec(char c)$/;"	f
fromHex	basic/uint.cc	/^uint32_t fromHex(char c)$/;"	f
fromHostPort	reactor/s04/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s05/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s06/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s07/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s08/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s09/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s10/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s11/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s12/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromHostPort	reactor/s13/SocketsOps.cc	/^void sockets::fromHostPort(const char* ip, uint16_t port,$/;"	f	class:sockets
fromLocalTime	datetime/TimeZone.cc	/^time_t TimeZone::fromLocalTime(const struct tm& localTm) const$/;"	f	class:TimeZone
fromUtcTime	datetime/TimeZone.cc	/^time_t TimeZone::fromUtcTime(const struct tm& utc)$/;"	f	class:TimeZone
fromUtcTime	datetime/TimeZone.cc	/^time_t TimeZone::fromUtcTime(int year, int month, int day,$/;"	f	class:TimeZone
full	thread/BoundedBlockingQueue.h	/^  bool full() const$/;"	f	class:muduo::BoundedBlockingQueue
fullname_	logging/Logging.h	/^  const char* fullname_;$/;"	m	class:muduo::Logger::Impl
func_	thread/Thread.cc	/^  ThreadFunc func_;$/;"	m	struct:__anon4::ThreadData	file:
func_	thread/Thread.h	/^  ThreadFunc  func_;$/;"	m	class:muduo::Thread
function_	thread/WeakCallback.h	/^  std::function<void (CLASS*, ARGS...)> function_;$/;"	m	class:muduo::WeakCallback
functors_	thread/SignalSlotTrivial.h	/^  std::vector<Functor> functors_;$/;"	m	class:SignalTrivial
fwrite_unlocked	logging/LogFile.cc	61;"	d	file:
g_asyncLog	logging/AsyncLogging_test.cc	/^void* g_asyncLog = NULL;$/;"	v
g_bytes	tpc/chargen.cc	/^muduo::AtomicInt64 g_bytes;$/;"	v
g_bytes	tpc/discard.cc	/^muduo::AtomicInt64 g_bytes;$/;"	v
g_file	logging/Logging_test.cc	/^FILE* g_file;$/;"	v
g_flag	reactor/s03/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s04/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s05/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s06/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s07/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s08/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s09/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s10/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s11/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s12/test5.cc	/^int g_flag = 0;$/;"	v
g_flag	reactor/s13/test5.cc	/^int g_flag = 0;$/;"	v
g_flush	logging/Logging.cc	/^Logger::FlushFunc g_flush = defaultFlush;$/;"	m	namespace:muduo	file:
g_foos	thread/test/CopyOnWrite_test.cc	/^FooListPtr g_foos;$/;"	v
g_int32	thread/test/destruct.cc	/^int32_t g_int32 = 123;$/;"	v
g_int64	thread/test/destruct.cc	/^int64_t g_int64 = 4321;$/;"	v
g_inventory	thread/test/MutualDeadLock.cc	/^Inventory g_inventory;$/;"	v
g_inventory	thread/test/RequestInventory_test.cc	/^Inventory g_inventory;$/;"	v
g_inventory	thread/test/RequestInventory_test2.cc	/^Inventory g_inventory;$/;"	v
g_logFile	logging/LogFile_test.cc	/^boost::scoped_ptr<muduo::LogFile> g_logFile;$/;"	v
g_logFile	logging/Logging_test.cc	/^boost::scoped_ptr<muduo::LogFile> g_logFile;$/;"	v
g_logLevel	logging/Logging.cc	/^Logger::LogLevel g_logLevel = initLogLevel();$/;"	m	namespace:muduo	file:
g_loop	reactor/s00/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s01/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s01/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s02/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s02/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s02/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s03/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s03/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s03/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s03/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s04/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s04/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s04/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s04/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s05/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s05/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s05/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s05/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s06/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s06/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s06/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s06/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s07/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s07/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s07/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s07/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s08/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s08/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s08/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s08/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s09/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s09/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s09/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s09/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s10/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s10/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s10/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s10/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s11/test12.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s11/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s11/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s11/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s11/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s12/test12.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s12/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s12/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s12/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s12/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s13/test12.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s13/test2.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s13/test3.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s13/test4.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_loop	reactor/s13/test5.cc	/^muduo::EventLoop* g_loop;$/;"	v
g_obj	thread/test/ExitDeadLock.cc	/^GlobalObject g_obj;$/;"	v
g_output	logging/Logging.cc	/^Logger::OutputFunc g_output = defaultOutput;$/;"	m	namespace:muduo	file:
g_port	tpc/roundtrip_udp.cc	/^const int g_port = 3123;$/;"	v
g_str	thread/test/destruct.cc	/^string g_str = "Hello";$/;"	v
g_total	logging/Logging_test.cc	/^long g_total;$/;"	v
g_wordCounts	topk/sender.cc	/^WordCountList g_wordCounts;$/;"	v
gen	basic/partitions.cc	/^void gen(int N)$/;"	f
gen	puzzle/poker/generate.py	/^def gen(num):$/;"	f
generalized_pentagonal_numbers	basic/partitions.cc	/^std::vector<int> generalized_pentagonal_numbers;$/;"	v
generateCustomers	java/bankqueue/Bank.java	/^    private void generateCustomers(int numCustomers) {$/;"	m	class:Bank	file:
get	java/billing/Money.java	/^    public static Money get(int yuan, int cents) {$/;"	m	class:Money
get	java/billing/UserMonthUsage.java	/^    Object get(DataFields.UserField field) {$/;"	m	class:UserMonthUsage
get	thread/Atomic.h	/^  T get() const$/;"	f	class:muduo::detail::AtomicIntegerT
get	thread/test/Factory.cc	/^  boost::shared_ptr<Stock> get(const string& key)$/;"	f	class:StockFactory
get	thread/test/Factory.cc	/^  boost::shared_ptr<Stock> get(const string& key)$/;"	f	class:version1::StockFactory
get	thread/test/Factory.cc	/^  boost::shared_ptr<Stock> get(const string& key)$/;"	f	class:version2::StockFactory
get	thread/test/Factory.cc	/^  boost::shared_ptr<Stock> get(const string& key)$/;"	f	class:version3::StockFactory
get	thread/test/Factory.cc	/^  boost::shared_ptr<Stock> get(const string& key)$/;"	f	class:version4::StockFactory
getAndAdd	thread/Atomic.h	/^  T getAndAdd(T x)$/;"	f	class:muduo::detail::AtomicIntegerT
getAndIncrease	thread/test/Counter.cc	/^int64_t Counter::getAndIncrease()$/;"	f	class:Counter
getAndSet	thread/Atomic.h	/^  T getAndSet(T newValue)$/;"	f	class:muduo::detail::AtomicIntegerT
getAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^      public String getAnswerer() {$/;"	m	class:QueryProtos.Answer.Builder
getAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^    String getAnswerer();$/;"	m	interface:QueryProtos.AnswerOrBuilder
getAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^    public String getAnswerer() {$/;"	m	class:QueryProtos.Answer
getAnswererBytes	protorpc/muduo/codec/tests/QueryProtos.java	/^    private com.google.protobuf.ByteString getAnswererBytes() {$/;"	m	class:QueryProtos.Answer	file:
getBoolean	java/billing/UserMonthUsage.java	/^    boolean getBoolean(DataFields.UserField field) {$/;"	m	class:UserMonthUsage
getCentsRoundDown	java/billing/Money.java	/^    public long getCentsRoundDown() {$/;"	m	class:Money
getCentsRoundUp	java/billing/Money.java	/^    public long getCentsRoundUp() {$/;"	m	class:Money
getChannel	protorpc/echo/EchoProto.java	/^      public com.google.protobuf.RpcChannel getChannel() {$/;"	m	class:EchoProto.EchoService.Stub
getChannel	protorpc/muduo/rpc/RpcChannel.java	/^    public Channel getChannel() {$/;"	m	class:RpcChannel
getChannel	protorpc/muduo/rpc/RpcClient.java	/^    public RpcChannel getChannel() {$/;"	m	class:RpcClient
getChannel	protorpc/muduo/rpc/RpcMessageHandler.java	/^    public RpcChannel getChannel() {$/;"	m	class:RpcMessageHandler
getChannel	protorpc/sudoku/Sudoku.java	/^      public com.google.protobuf.RpcChannel getChannel() {$/;"	m	class:Sudoku.SudokuService.Stub
getCheckerboard	protorpc/sudoku/Sudoku.java	/^      public String getCheckerboard() {$/;"	m	class:Sudoku.SudokuRequest.Builder
getCheckerboard	protorpc/sudoku/Sudoku.java	/^      public String getCheckerboard() {$/;"	m	class:Sudoku.SudokuResponse.Builder
getCheckerboard	protorpc/sudoku/Sudoku.java	/^    String getCheckerboard();$/;"	m	interface:Sudoku.SudokuRequestOrBuilder
getCheckerboard	protorpc/sudoku/Sudoku.java	/^    String getCheckerboard();$/;"	m	interface:Sudoku.SudokuResponseOrBuilder
getCheckerboard	protorpc/sudoku/Sudoku.java	/^    public String getCheckerboard() {$/;"	m	class:Sudoku.SudokuRequest
getCheckerboard	protorpc/sudoku/Sudoku.java	/^    public String getCheckerboard() {$/;"	m	class:Sudoku.SudokuResponse
getCheckerboardBytes	protorpc/sudoku/Sudoku.java	/^    private com.google.protobuf.ByteString getCheckerboardBytes() {$/;"	m	class:Sudoku.SudokuRequest	file:
getCheckerboardBytes	protorpc/sudoku/Sudoku.java	/^    private com.google.protobuf.ByteString getCheckerboardBytes() {$/;"	m	class:Sudoku.SudokuResponse	file:
getCloseFuture	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture getCloseFuture() {$/;"	m	class:MockChannel
getConfig	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelConfig getConfig() {$/;"	m	class:MockChannel
getCount	thread/CountDownLatch.h	/^  int getCount() const$/;"	f	class:muduo::CountDownLatch
getCustomerType	java/bankqueue/customer/CustomerFactory.java	/^    public static CustomerType getCustomerType(Random r) {$/;"	m	class:CustomerFactory
getData	thread/test/Customer.cc	/^  MapPtr getData() const$/;"	f	class:CustomerData	file:
getData	thread/test/RequestInventory_test.cc	/^  RequestListPtr getData() const$/;"	f	class:Inventory	file:
getData	thread/test/RequestInventory_test2.cc	/^  RequestListPtr getData() const$/;"	f	class:Inventory	file:
getDefaultInstance	protorpc/echo/EchoProto.java	/^    public static EchoRequest getDefaultInstance() {$/;"	m	class:EchoProto.EchoRequest
getDefaultInstance	protorpc/echo/EchoProto.java	/^    public static EchoResponse getDefaultInstance() {$/;"	m	class:EchoProto.EchoResponse
getDefaultInstance	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Answer getDefaultInstance() {$/;"	m	class:QueryProtos.Answer
getDefaultInstance	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Empty getDefaultInstance() {$/;"	m	class:QueryProtos.Empty
getDefaultInstance	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Query getDefaultInstance() {$/;"	m	class:QueryProtos.Query
getDefaultInstance	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static RpcMessage getDefaultInstance() {$/;"	m	class:RpcProto.RpcMessage
getDefaultInstance	protorpc/sudoku/Sudoku.java	/^    public static SudokuRequest getDefaultInstance() {$/;"	m	class:Sudoku.SudokuRequest
getDefaultInstance	protorpc/sudoku/Sudoku.java	/^    public static SudokuResponse getDefaultInstance() {$/;"	m	class:Sudoku.SudokuResponse
getDefaultInstanceForType	protorpc/echo/EchoProto.java	/^      public echo.EchoProto.EchoRequest getDefaultInstanceForType() {$/;"	m	class:EchoProto.EchoRequest.Builder
getDefaultInstanceForType	protorpc/echo/EchoProto.java	/^      public echo.EchoProto.EchoResponse getDefaultInstanceForType() {$/;"	m	class:EchoProto.EchoResponse.Builder
getDefaultInstanceForType	protorpc/echo/EchoProto.java	/^    public EchoRequest getDefaultInstanceForType() {$/;"	m	class:EchoProto.EchoRequest
getDefaultInstanceForType	protorpc/echo/EchoProto.java	/^    public EchoResponse getDefaultInstanceForType() {$/;"	m	class:EchoProto.EchoResponse
getDefaultInstanceForType	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Answer getDefaultInstanceForType() {$/;"	m	class:QueryProtos.Answer.Builder
getDefaultInstanceForType	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Empty getDefaultInstanceForType() {$/;"	m	class:QueryProtos.Empty.Builder
getDefaultInstanceForType	protorpc/muduo/codec/tests/QueryProtos.java	/^      public muduo.codec.tests.QueryProtos.Query getDefaultInstanceForType() {$/;"	m	class:QueryProtos.Query.Builder
getDefaultInstanceForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Answer getDefaultInstanceForType() {$/;"	m	class:QueryProtos.Answer
getDefaultInstanceForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Empty getDefaultInstanceForType() {$/;"	m	class:QueryProtos.Empty
getDefaultInstanceForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Query getDefaultInstanceForType() {$/;"	m	class:QueryProtos.Query
getDefaultInstanceForType	protorpc/muduo/rpc/proto/RpcProto.java	/^      public muduo.rpc.proto.RpcProto.RpcMessage getDefaultInstanceForType() {$/;"	m	class:RpcProto.RpcMessage.Builder
getDefaultInstanceForType	protorpc/muduo/rpc/proto/RpcProto.java	/^    public RpcMessage getDefaultInstanceForType() {$/;"	m	class:RpcProto.RpcMessage
getDefaultInstanceForType	protorpc/sudoku/Sudoku.java	/^      public sudoku.Sudoku.SudokuRequest getDefaultInstanceForType() {$/;"	m	class:Sudoku.SudokuRequest.Builder
getDefaultInstanceForType	protorpc/sudoku/Sudoku.java	/^      public sudoku.Sudoku.SudokuResponse getDefaultInstanceForType() {$/;"	m	class:Sudoku.SudokuResponse.Builder
getDefaultInstanceForType	protorpc/sudoku/Sudoku.java	/^    public SudokuRequest getDefaultInstanceForType() {$/;"	m	class:Sudoku.SudokuRequest
getDefaultInstanceForType	protorpc/sudoku/Sudoku.java	/^    public SudokuResponse getDefaultInstanceForType() {$/;"	m	class:Sudoku.SudokuResponse
getDescriptor	protorpc/echo/EchoProto.java	/^          getDescriptor() {$/;"	m	class:EchoProto.EchoRequest.Builder
getDescriptor	protorpc/echo/EchoProto.java	/^          getDescriptor() {$/;"	m	class:EchoProto.EchoResponse.Builder
getDescriptor	protorpc/echo/EchoProto.java	/^        getDescriptor() {$/;"	m	class:EchoProto.EchoRequest
getDescriptor	protorpc/echo/EchoProto.java	/^        getDescriptor() {$/;"	m	class:EchoProto.EchoResponse
getDescriptor	protorpc/echo/EchoProto.java	/^        getDescriptor() {$/;"	m	class:EchoProto.EchoService
getDescriptor	protorpc/echo/EchoProto.java	/^      getDescriptor() {$/;"	m	class:EchoProto
getDescriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^          getDescriptor() {$/;"	m	class:QueryProtos.Answer.Builder
getDescriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^          getDescriptor() {$/;"	m	class:QueryProtos.Empty.Builder
getDescriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^          getDescriptor() {$/;"	m	class:QueryProtos.Query.Builder
getDescriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^        getDescriptor() {$/;"	m	class:QueryProtos.Answer
getDescriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^        getDescriptor() {$/;"	m	class:QueryProtos.Empty
getDescriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^        getDescriptor() {$/;"	m	class:QueryProtos.Query
getDescriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^      getDescriptor() {$/;"	m	class:QueryProtos
getDescriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^          getDescriptor() {$/;"	m	class:RpcProto.RpcMessage.Builder
getDescriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^        getDescriptor() {$/;"	m	class:RpcProto.ErrorCode
getDescriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^        getDescriptor() {$/;"	m	class:RpcProto.MessageType
getDescriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^        getDescriptor() {$/;"	m	class:RpcProto.RpcMessage
getDescriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^      getDescriptor() {$/;"	m	class:RpcProto
getDescriptor	protorpc/sudoku/Sudoku.java	/^          getDescriptor() {$/;"	m	class:Sudoku.SudokuRequest.Builder
getDescriptor	protorpc/sudoku/Sudoku.java	/^          getDescriptor() {$/;"	m	class:Sudoku.SudokuResponse.Builder
getDescriptor	protorpc/sudoku/Sudoku.java	/^        getDescriptor() {$/;"	m	class:Sudoku.SudokuRequest
getDescriptor	protorpc/sudoku/Sudoku.java	/^        getDescriptor() {$/;"	m	class:Sudoku.SudokuResponse
getDescriptor	protorpc/sudoku/Sudoku.java	/^        getDescriptor() {$/;"	m	class:Sudoku.SudokuService
getDescriptor	protorpc/sudoku/Sudoku.java	/^      getDescriptor() {$/;"	m	class:Sudoku
getDescriptorForType	protorpc/echo/EchoProto.java	/^          getDescriptorForType() {$/;"	m	class:EchoProto.EchoRequest.Builder
getDescriptorForType	protorpc/echo/EchoProto.java	/^          getDescriptorForType() {$/;"	m	class:EchoProto.EchoResponse.Builder
getDescriptorForType	protorpc/echo/EchoProto.java	/^        getDescriptorForType() {$/;"	m	class:EchoProto.EchoService
getDescriptorForType	protorpc/muduo/codec/tests/QueryProtos.java	/^          getDescriptorForType() {$/;"	m	class:QueryProtos.Answer.Builder
getDescriptorForType	protorpc/muduo/codec/tests/QueryProtos.java	/^          getDescriptorForType() {$/;"	m	class:QueryProtos.Empty.Builder
getDescriptorForType	protorpc/muduo/codec/tests/QueryProtos.java	/^          getDescriptorForType() {$/;"	m	class:QueryProtos.Query.Builder
getDescriptorForType	protorpc/muduo/rpc/proto/RpcProto.java	/^          getDescriptorForType() {$/;"	m	class:RpcProto.RpcMessage.Builder
getDescriptorForType	protorpc/muduo/rpc/proto/RpcProto.java	/^        getDescriptorForType() {$/;"	m	class:RpcProto.ErrorCode
getDescriptorForType	protorpc/muduo/rpc/proto/RpcProto.java	/^        getDescriptorForType() {$/;"	m	class:RpcProto.MessageType
getDescriptorForType	protorpc/sudoku/Sudoku.java	/^          getDescriptorForType() {$/;"	m	class:Sudoku.SudokuRequest.Builder
getDescriptorForType	protorpc/sudoku/Sudoku.java	/^          getDescriptorForType() {$/;"	m	class:Sudoku.SudokuResponse.Builder
getDescriptorForType	protorpc/sudoku/Sudoku.java	/^        getDescriptorForType() {$/;"	m	class:Sudoku.SudokuService
getEncodingName	utility/cwc.cc	/^const char* getEncodingName(Encoding enc)$/;"	f
getError	protorpc/muduo/rpc/proto/RpcProto.java	/^      public muduo.rpc.proto.RpcProto.ErrorCode getError() {$/;"	m	class:RpcProto.RpcMessage.Builder
getError	protorpc/muduo/rpc/proto/RpcProto.java	/^    muduo.rpc.proto.RpcProto.ErrorCode getError();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
getError	protorpc/muduo/rpc/proto/RpcProto.java	/^    public muduo.rpc.proto.RpcProto.ErrorCode getError() {$/;"	m	class:RpcProto.RpcMessage
getExpired	reactor/s02/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s03/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s04/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s05/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s06/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s07/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s08/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s09/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s10/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s11/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s12/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getExpired	reactor/s13/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)$/;"	f	class:TimerQueue
getFactory	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFactory getFactory() {$/;"	m	class:MockChannel
getGmt	datetime/TimeZone_unittest.cc	/^time_t getGmt(const char* str)$/;"	f
getGmt	datetime/TimeZone_unittest.cc	/^time_t getGmt(int year, int month, int day,$/;"	f
getGroovyFile	java/billing/RuleFactory.java	/^    private File getGroovyFile(String name) {$/;"	m	class:RuleFactory	file:
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public int getId() {$/;"	m	class:QueryProtos.Empty.Builder
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public long getId() {$/;"	m	class:QueryProtos.Answer.Builder
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public long getId() {$/;"	m	class:QueryProtos.Query.Builder
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^    int getId();$/;"	m	interface:QueryProtos.EmptyOrBuilder
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^    long getId();$/;"	m	interface:QueryProtos.AnswerOrBuilder
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^    long getId();$/;"	m	interface:QueryProtos.QueryOrBuilder
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^    public int getId() {$/;"	m	class:QueryProtos.Empty
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^    public long getId() {$/;"	m	class:QueryProtos.Answer
getId	protorpc/muduo/codec/tests/QueryProtos.java	/^    public long getId() {$/;"	m	class:QueryProtos.Query
getId	protorpc/muduo/rpc/proto/RpcProto.java	/^      public long getId() {$/;"	m	class:RpcProto.RpcMessage.Builder
getId	protorpc/muduo/rpc/proto/RpcProto.java	/^    long getId();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
getId	protorpc/muduo/rpc/proto/RpcProto.java	/^    public long getId() {$/;"	m	class:RpcProto.RpcMessage
getId	protorpc/muduo/rpc/test/MockChannel.java	/^    public Integer getId() {$/;"	m	class:MockChannel
getInt32	thread/test/destruct.cc	/^int32_t getInt32()$/;"	f
getInt64	thread/test/destruct.cc	/^int64_t getInt64()$/;"	f
getInteger	java/billing/UserMonthUsage.java	/^    int getInteger(DataFields.UserField field) {$/;"	m	class:UserMonthUsage
getInterestOps	protorpc/muduo/rpc/test/MockChannel.java	/^    public int getInterestOps() {$/;"	m	class:MockChannel
getJulianDayNumber	datetime/Date.cc	/^int getJulianDayNumber(int year, int month, int day)$/;"	f	namespace:__anon3
getLocalAddr	reactor/s05/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	reactor/s06/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	reactor/s07/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	reactor/s08/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	reactor/s09/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	reactor/s10/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	reactor/s11/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	reactor/s12/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	reactor/s13/SocketsOps.cc	/^struct sockaddr_in sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getLocalAddr	tpc/Socket.cc	/^InetAddress Socket::getLocalAddr() const$/;"	f	class:Socket
getLocalAddress	protorpc/muduo/rpc/test/MockChannel.java	/^    public SocketAddress getLocalAddress() {$/;"	m	class:MockChannel
getLogFileName	logging/LogFile.cc	/^string LogFile::getLogFileName(const string& basename, time_t* now)$/;"	f	class:LogFile
getLoop	reactor/s05/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getLoop	reactor/s06/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getLoop	reactor/s07/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getLoop	reactor/s08/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getLoop	reactor/s09/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getLoop	reactor/s10/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getLoop	reactor/s11/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getLoop	reactor/s12/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getLoop	reactor/s13/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::TcpConnection
getMessage	tpc/chargen.cc	/^std::string getMessage()$/;"	f
getMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^      public String getMethod() {$/;"	m	class:RpcProto.RpcMessage.Builder
getMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^    String getMethod();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
getMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^    public String getMethod() {$/;"	m	class:RpcProto.RpcMessage
getMethodBytes	protorpc/muduo/rpc/proto/RpcProto.java	/^    private com.google.protobuf.ByteString getMethodBytes() {$/;"	m	class:RpcProto.RpcMessage	file:
getMoneyInPips	java/billing/DefaultRule.java	/^    public long getMoneyInPips(UserMonthUsage input) {$/;"	m	class:DefaultRule
getMoneyInPips	java/billing/Rule.java	/^    public abstract long getMoneyInPips(UserMonthUsage input);$/;"	m	class:Rule
getNextCustomer	java/bankqueue/Bank.java	/^    private Customer getNextCustomer(WindowType type) {$/;"	m	class:Bank	file:
getNextLoop	reactor/s10/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getNextLoop()$/;"	f	class:EventLoopThreadPool
getNextLoop	reactor/s11/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getNextLoop()$/;"	f	class:EventLoopThreadPool
getNextLoop	reactor/s12/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getNextLoop()$/;"	f	class:EventLoopThreadPool
getNextLoop	reactor/s13/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getNextLoop()$/;"	f	class:EventLoopThreadPool
getNow	java/bankqueue/event/EventSimulator.java	/^    public int getNow() {$/;"	m	class:EventSimulator
getNumber	protorpc/muduo/rpc/proto/RpcProto.java	/^    public final int getNumber() { return value; }$/;"	m	class:RpcProto.ErrorCode
getNumber	protorpc/muduo/rpc/proto/RpcProto.java	/^    public final int getNumber() { return value; }$/;"	m	class:RpcProto.MessageType
getPackages	java/billing/UserMonthUsage.java	/^    List<Package> getPackages() {$/;"	m	class:UserMonthUsage
getPackages	java/billing/test/NormalCustomerTest.java	/^    public List<PackageType> getPackages(PackageType... packages) {$/;"	m	class:NormalCustomerTest
getPackages	java/billing/test/VipCustomerTest.java	/^    public List<PackageType> getPackages(PackageType... packages) {$/;"	m	class:VipCustomerTest
getPage	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    private static PdfImportedPage getPage(PdfWriter writer, PdfReader reader, int page) {$/;"	m	class:PdfHack	file:
getParent	protorpc/muduo/rpc/test/MockChannel.java	/^    public Channel getParent() {$/;"	m	class:MockChannel
getPayload	protorpc/echo/EchoProto.java	/^      public String getPayload() {$/;"	m	class:EchoProto.EchoRequest.Builder
getPayload	protorpc/echo/EchoProto.java	/^      public String getPayload() {$/;"	m	class:EchoProto.EchoResponse.Builder
getPayload	protorpc/echo/EchoProto.java	/^    String getPayload();$/;"	m	interface:EchoProto.EchoRequestOrBuilder
getPayload	protorpc/echo/EchoProto.java	/^    String getPayload();$/;"	m	interface:EchoProto.EchoResponseOrBuilder
getPayload	protorpc/echo/EchoProto.java	/^    public String getPayload() {$/;"	m	class:EchoProto.EchoRequest
getPayload	protorpc/echo/EchoProto.java	/^    public String getPayload() {$/;"	m	class:EchoProto.EchoResponse
getPayloadBytes	protorpc/echo/EchoProto.java	/^    private com.google.protobuf.ByteString getPayloadBytes() {$/;"	m	class:EchoProto.EchoRequest	file:
getPayloadBytes	protorpc/echo/EchoProto.java	/^    private com.google.protobuf.ByteString getPayloadBytes() {$/;"	m	class:EchoProto.EchoResponse	file:
getPeerAddr	reactor/s11/SocketsOps.cc	/^struct sockaddr_in sockets::getPeerAddr(int sockfd)$/;"	f	class:sockets
getPeerAddr	reactor/s12/SocketsOps.cc	/^struct sockaddr_in sockets::getPeerAddr(int sockfd)$/;"	f	class:sockets
getPeerAddr	reactor/s13/SocketsOps.cc	/^struct sockaddr_in sockets::getPeerAddr(int sockfd)$/;"	f	class:sockets
getPeerAddr	tpc/Socket.cc	/^InetAddress Socket::getPeerAddr() const$/;"	f	class:Socket
getPipeline	protorpc/muduo/rpc/RpcChannelPiplineFactory.java	/^    public ChannelPipeline getPipeline() throws Exception {$/;"	m	class:RpcChannelPiplineFactory
getPipeline	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelPipeline getPipeline() {$/;"	m	class:MockChannel
getPthreadMutex	thread/Mutex.h	/^  pthread_mutex_t* getPthreadMutex() \/* non-const *\/$/;"	f	class:muduo::MutexLock
getQuestion	protorpc/muduo/codec/tests/QueryProtos.java	/^      public String getQuestion(int index) {$/;"	m	class:QueryProtos.Query.Builder
getQuestion	protorpc/muduo/codec/tests/QueryProtos.java	/^    String getQuestion(int index);$/;"	m	interface:QueryProtos.QueryOrBuilder
getQuestion	protorpc/muduo/codec/tests/QueryProtos.java	/^    public String getQuestion(int index) {$/;"	m	class:QueryProtos.Query
getQuestionCount	protorpc/muduo/codec/tests/QueryProtos.java	/^      public int getQuestionCount() {$/;"	m	class:QueryProtos.Query.Builder
getQuestionCount	protorpc/muduo/codec/tests/QueryProtos.java	/^    int getQuestionCount();$/;"	m	interface:QueryProtos.QueryOrBuilder
getQuestionCount	protorpc/muduo/codec/tests/QueryProtos.java	/^    public int getQuestionCount() {$/;"	m	class:QueryProtos.Query
getQuestionList	protorpc/muduo/codec/tests/QueryProtos.java	/^          getQuestionList() {$/;"	m	class:QueryProtos.Query.Builder
getQuestionList	protorpc/muduo/codec/tests/QueryProtos.java	/^        getQuestionList() {$/;"	m	class:QueryProtos.Query
getQuestionList	protorpc/muduo/codec/tests/QueryProtos.java	/^    java.util.List<String> getQuestionList();$/;"	m	interface:QueryProtos.QueryOrBuilder
getQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      public String getQuestioner() {$/;"	m	class:QueryProtos.Answer.Builder
getQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      public String getQuestioner() {$/;"	m	class:QueryProtos.Query.Builder
getQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^    String getQuestioner();$/;"	m	interface:QueryProtos.AnswerOrBuilder
getQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^    String getQuestioner();$/;"	m	interface:QueryProtos.QueryOrBuilder
getQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^    public String getQuestioner() {$/;"	m	class:QueryProtos.Answer
getQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^    public String getQuestioner() {$/;"	m	class:QueryProtos.Query
getQuestionerBytes	protorpc/muduo/codec/tests/QueryProtos.java	/^    private com.google.protobuf.ByteString getQuestionerBytes() {$/;"	m	class:QueryProtos.Answer	file:
getQuestionerBytes	protorpc/muduo/codec/tests/QueryProtos.java	/^    private com.google.protobuf.ByteString getQuestionerBytes() {$/;"	m	class:QueryProtos.Query	file:
getRemoteAddress	protorpc/muduo/rpc/test/MockChannel.java	/^    public SocketAddress getRemoteAddress() {$/;"	m	class:MockChannel
getRequest	protorpc/muduo/rpc/proto/RpcProto.java	/^      public com.google.protobuf.ByteString getRequest() {$/;"	m	class:RpcProto.RpcMessage.Builder
getRequest	protorpc/muduo/rpc/proto/RpcProto.java	/^    com.google.protobuf.ByteString getRequest();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
getRequest	protorpc/muduo/rpc/proto/RpcProto.java	/^    public com.google.protobuf.ByteString getRequest() {$/;"	m	class:RpcProto.RpcMessage
getRequestPrototype	protorpc/echo/EchoProto.java	/^        getRequestPrototype($/;"	m	class:EchoProto.EchoService
getRequestPrototype	protorpc/sudoku/Sudoku.java	/^        getRequestPrototype($/;"	m	class:Sudoku.SudokuService
getResponse	protorpc/muduo/rpc/proto/RpcProto.java	/^      public com.google.protobuf.ByteString getResponse() {$/;"	m	class:RpcProto.RpcMessage.Builder
getResponse	protorpc/muduo/rpc/proto/RpcProto.java	/^    com.google.protobuf.ByteString getResponse();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
getResponse	protorpc/muduo/rpc/proto/RpcProto.java	/^    public com.google.protobuf.ByteString getResponse() {$/;"	m	class:RpcProto.RpcMessage
getResponsePrototype	protorpc/echo/EchoProto.java	/^        getResponsePrototype($/;"	m	class:EchoProto.EchoService
getResponsePrototype	protorpc/sudoku/Sudoku.java	/^        getResponsePrototype($/;"	m	class:Sudoku.SudokuService
getRuleName	java/billing/DataFields.java	/^        public String getRuleName() {$/;"	m	class:DataFields.UserType
getScore	puzzle/poker/poker.cc	/^Score getScore(const Hand& hand)$/;"	f
getSerializedSize	protorpc/echo/EchoProto.java	/^    public int getSerializedSize() {$/;"	m	class:EchoProto.EchoRequest
getSerializedSize	protorpc/echo/EchoProto.java	/^    public int getSerializedSize() {$/;"	m	class:EchoProto.EchoResponse
getSerializedSize	protorpc/muduo/codec/tests/QueryProtos.java	/^    public int getSerializedSize() {$/;"	m	class:QueryProtos.Answer
getSerializedSize	protorpc/muduo/codec/tests/QueryProtos.java	/^    public int getSerializedSize() {$/;"	m	class:QueryProtos.Empty
getSerializedSize	protorpc/muduo/codec/tests/QueryProtos.java	/^    public int getSerializedSize() {$/;"	m	class:QueryProtos.Query
getSerializedSize	protorpc/muduo/rpc/proto/RpcProto.java	/^    public int getSerializedSize() {$/;"	m	class:RpcProto.RpcMessage
getSerializedSize	protorpc/sudoku/Sudoku.java	/^    public int getSerializedSize() {$/;"	m	class:Sudoku.SudokuRequest
getSerializedSize	protorpc/sudoku/Sudoku.java	/^    public int getSerializedSize() {$/;"	m	class:Sudoku.SudokuResponse
getService	protorpc/muduo/rpc/proto/RpcProto.java	/^      public String getService() {$/;"	m	class:RpcProto.RpcMessage.Builder
getService	protorpc/muduo/rpc/proto/RpcProto.java	/^    String getService();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
getService	protorpc/muduo/rpc/proto/RpcProto.java	/^    public String getService() {$/;"	m	class:RpcProto.RpcMessage
getServiceBytes	protorpc/muduo/rpc/proto/RpcProto.java	/^    private com.google.protobuf.ByteString getServiceBytes() {$/;"	m	class:RpcProto.RpcMessage	file:
getServiceTime	java/bankqueue/customer/CustomerFactory.java	/^    private static int getServiceTime(Random r, CustomerType type) {$/;"	m	class:CustomerFactory	file:
getSockAddrInet	reactor/s04/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s05/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s06/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s07/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s08/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s09/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s10/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s11/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s12/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	reactor/s13/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return addr_; }$/;"	f	class:muduo::InetAddress
getSockAddrInet	tpc/InetAddress.h	/^  const struct sockaddr_in& getSockAddrInet() const { return saddr_; }$/;"	f	class:InetAddress
getSocketError	reactor/s06/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
getSocketError	reactor/s07/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
getSocketError	reactor/s08/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
getSocketError	reactor/s09/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
getSocketError	reactor/s10/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
getSocketError	reactor/s11/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
getSocketError	reactor/s12/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
getSocketError	reactor/s13/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
getSolution	protorpc/muduo/codec/tests/QueryProtos.java	/^      public String getSolution(int index) {$/;"	m	class:QueryProtos.Answer.Builder
getSolution	protorpc/muduo/codec/tests/QueryProtos.java	/^    String getSolution(int index);$/;"	m	interface:QueryProtos.AnswerOrBuilder
getSolution	protorpc/muduo/codec/tests/QueryProtos.java	/^    public String getSolution(int index) {$/;"	m	class:QueryProtos.Answer
getSolutionCount	protorpc/muduo/codec/tests/QueryProtos.java	/^      public int getSolutionCount() {$/;"	m	class:QueryProtos.Answer.Builder
getSolutionCount	protorpc/muduo/codec/tests/QueryProtos.java	/^    int getSolutionCount();$/;"	m	interface:QueryProtos.AnswerOrBuilder
getSolutionCount	protorpc/muduo/codec/tests/QueryProtos.java	/^    public int getSolutionCount() {$/;"	m	class:QueryProtos.Answer
getSolutionList	protorpc/muduo/codec/tests/QueryProtos.java	/^          getSolutionList() {$/;"	m	class:QueryProtos.Answer.Builder
getSolutionList	protorpc/muduo/codec/tests/QueryProtos.java	/^        getSolutionList() {$/;"	m	class:QueryProtos.Answer
getSolutionList	protorpc/muduo/codec/tests/QueryProtos.java	/^    java.util.List<String> getSolutionList();$/;"	m	interface:QueryProtos.AnswerOrBuilder
getSolved	protorpc/sudoku/Sudoku.java	/^      public boolean getSolved() {$/;"	m	class:Sudoku.SudokuResponse.Builder
getSolved	protorpc/sudoku/Sudoku.java	/^    boolean getSolved();$/;"	m	interface:Sudoku.SudokuResponseOrBuilder
getSolved	protorpc/sudoku/Sudoku.java	/^    public boolean getSolved() {$/;"	m	class:Sudoku.SudokuResponse
getString	thread/test/WeakCallback_test.cc	/^String getString()$/;"	f
getString	thread/test/destruct.cc	/^string getString()$/;"	f
getTm	datetime/TimeZone_unittest.cc	/^struct tm getTm(const char* str)$/;"	f
getTm	datetime/TimeZone_unittest.cc	/^struct tm getTm(int year, int month, int day,$/;"	f
getType	protorpc/muduo/rpc/proto/RpcProto.java	/^      public muduo.rpc.proto.RpcProto.MessageType getType() {$/;"	m	class:RpcProto.RpcMessage.Builder
getType	protorpc/muduo/rpc/proto/RpcProto.java	/^    muduo.rpc.proto.RpcProto.MessageType getType();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
getType	protorpc/muduo/rpc/proto/RpcProto.java	/^    public muduo.rpc.proto.RpcProto.MessageType getType() {$/;"	m	class:RpcProto.RpcMessage
getTypeName	java/bankqueue/customer/Customer.java	/^    public String getTypeName() {$/;"	m	class:Customer
getValue	basic/uint.h	/^  const value_type& getValue() const$/;"	f	class:UnsignedInt
getValueDescriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^        getValueDescriptor() {$/;"	m	class:RpcProto.ErrorCode
getValueDescriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^        getValueDescriptor() {$/;"	m	class:RpcProto.MessageType
getValues	puzzle/Einstein.java	/^    public static <T> IntVar[] getValues(T[] x) {$/;"	m	class:Einstein
getYearMonthDay	datetime/Date.cc	/^struct Date::YearMonthDay getYearMonthDay(int julianDayNumber)$/;"	f	namespace:__anon3
get_box_col	sudoku/sudoku_dancing_links.cc	/^    int get_box_col(int box, int val)$/;"	f	struct:Dance
get_col_col	sudoku/sudoku_dancing_links.cc	/^    int get_col_col(int col, int val)$/;"	f	struct:Dance
get_endpoint	topk/merger.cc	/^boost::asio::ip::tcp::endpoint get_endpoint(const std::string& ipport)$/;"	f
get_message	python/chargen.py	/^def get_message():$/;"	f
get_min_column	puzzle/dance.cc	/^  Column* get_min_column()$/;"	f	struct:Dance
get_min_column	sudoku/sudoku_dancing_links.cc	/^    Column* get_min_column()$/;"	f	struct:Dance
get_ranks	puzzle/poker/poker.py	/^def get_ranks(hand):$/;"	f
get_ranks	puzzle/poker/poker2.py	/^def get_ranks(hand):$/;"	f
get_row_col	sudoku/sudoku_dancing_links.cc	/^    int get_row_col(int row, int val)$/;"	f	struct:Dance
gettid	thread/Thread.cc	/^pid_t gettid()$/;"	f	namespace:__anon4
gmt	datetime/TimeZone_unittest.cc	/^  const char* gmt;$/;"	m	struct:TestCase	file:
gmtOffset	datetime/TimeZone.cc	/^  time_t gmtOffset;$/;"	m	struct:muduo::detail::Localtime	file:
gmttime	datetime/TimeZone.cc	/^  time_t gmttime;$/;"	m	struct:muduo::detail::Transition	file:
gotRequest	protorpc/muduo/rpc/test/RpcTest.java	/^    SudokuRequest gotRequest;$/;"	f	class:RpcTest
gotResponse	protorpc/muduo/rpc/test/RpcTest.java	/^    SudokuResponse gotResponse;$/;"	f	class:RpcTest
gotoWindow	java/bankqueue/customer/Customer.java	/^    public abstract void gotoWindow(Bank bank);$/;"	m	class:Customer
gotoWindow	java/bankqueue/customer/FastCustomer.java	/^    public void gotoWindow(Bank bank) {$/;"	m	class:FastCustomer
gotoWindow	java/bankqueue/customer/NormalCustomer.java	/^    public void gotoWindow(Bank bank) {$/;"	m	class:NormalCustomer
gotoWindow	java/bankqueue/customer/VipCustomer.java	/^    public void gotoWindow(Bank bank) {$/;"	m	class:VipCustomer
gpn	basic/partitions.cc	/^int gpn(int m)$/;"	f
hand	puzzle/poker/poker.cc	/^  Hand hand;$/;"	m	struct:Score	file:
hand	puzzle/poker/poker.py	/^	hand = sys.argv[1:]$/;"	v
hand	puzzle/poker/poker2.py	/^	hand = sys.argv[1:]$/;"	v
handle	python/echo-fork.py	/^    def handle(self):$/;"	m	class:EchoHandler
handle	python/echo-iterative.py	/^def handle(client_socket, client_address):$/;"	f
handle	python/echo-single.py	/^    def handle(self):$/;"	m	class:EchoHandler
handle	python/echo-thread.py	/^    def handle(self):$/;"	m	class:EchoHandler
handleClose	reactor/s06/TcpConnection.cc	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleClose	reactor/s07/TcpConnection.cc	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleClose	reactor/s08/TcpConnection.cc	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleClose	reactor/s09/TcpConnection.cc	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleClose	reactor/s10/TcpConnection.cc	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleClose	reactor/s11/TcpConnection.cc	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleClose	reactor/s12/TcpConnection.cc	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleClose	reactor/s13/TcpConnection.cc	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection
handleError	reactor/s06/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleError	reactor/s07/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleError	reactor/s08/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleError	reactor/s09/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleError	reactor/s10/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleError	reactor/s11/Connector.cc	/^void Connector::handleError()$/;"	f	class:Connector
handleError	reactor/s11/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleError	reactor/s12/Connector.cc	/^void Connector::handleError()$/;"	f	class:Connector
handleError	reactor/s12/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleError	reactor/s13/Connector.cc	/^void Connector::handleError()$/;"	f	class:Connector
handleError	reactor/s13/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleEvent	reactor/s01/Channel.cc	/^void Channel::handleEvent()$/;"	f	class:Channel
handleEvent	reactor/s02/Channel.cc	/^void Channel::handleEvent()$/;"	f	class:Channel
handleEvent	reactor/s03/Channel.cc	/^void Channel::handleEvent()$/;"	f	class:Channel
handleEvent	reactor/s04/Channel.cc	/^void Channel::handleEvent()$/;"	f	class:Channel
handleEvent	reactor/s05/Channel.cc	/^void Channel::handleEvent()$/;"	f	class:Channel
handleEvent	reactor/s06/Channel.cc	/^void Channel::handleEvent()$/;"	f	class:Channel
handleEvent	reactor/s07/Channel.cc	/^void Channel::handleEvent(Timestamp receiveTime)$/;"	f	class:Channel
handleEvent	reactor/s08/Channel.cc	/^void Channel::handleEvent(Timestamp receiveTime)$/;"	f	class:Channel
handleEvent	reactor/s09/Channel.cc	/^void Channel::handleEvent(Timestamp receiveTime)$/;"	f	class:Channel
handleEvent	reactor/s10/Channel.cc	/^void Channel::handleEvent(Timestamp receiveTime)$/;"	f	class:Channel
handleEvent	reactor/s11/Channel.cc	/^void Channel::handleEvent(Timestamp receiveTime)$/;"	f	class:Channel
handleEvent	reactor/s12/Channel.cc	/^void Channel::handleEvent(Timestamp receiveTime)$/;"	f	class:Channel
handleEvent	reactor/s13/Channel.cc	/^void Channel::handleEvent(Timestamp receiveTime)$/;"	f	class:Channel
handleRead	reactor/s02/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s03/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s03/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s04/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s04/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s04/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s05/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s05/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s05/TcpConnection.cc	/^void TcpConnection::handleRead()$/;"	f	class:TcpConnection
handleRead	reactor/s05/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s06/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s06/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s06/TcpConnection.cc	/^void TcpConnection::handleRead()$/;"	f	class:TcpConnection
handleRead	reactor/s06/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s07/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s07/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s07/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime)$/;"	f	class:TcpConnection
handleRead	reactor/s07/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s08/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s08/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s08/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime)$/;"	f	class:TcpConnection
handleRead	reactor/s08/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s09/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s09/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s09/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime)$/;"	f	class:TcpConnection
handleRead	reactor/s09/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s10/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s10/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s10/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime)$/;"	f	class:TcpConnection
handleRead	reactor/s10/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s11/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s11/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s11/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime)$/;"	f	class:TcpConnection
handleRead	reactor/s11/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s12/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s12/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s12/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime)$/;"	f	class:TcpConnection
handleRead	reactor/s12/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleRead	reactor/s13/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
handleRead	reactor/s13/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
handleRead	reactor/s13/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime)$/;"	f	class:TcpConnection
handleRead	reactor/s13/TimerQueue.cc	/^void TimerQueue::handleRead()$/;"	f	class:TimerQueue
handleWrite	reactor/s06/TcpConnection.cc	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
handleWrite	reactor/s07/TcpConnection.cc	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
handleWrite	reactor/s08/TcpConnection.cc	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
handleWrite	reactor/s09/TcpConnection.cc	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
handleWrite	reactor/s10/TcpConnection.cc	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
handleWrite	reactor/s11/Connector.cc	/^void Connector::handleWrite()$/;"	f	class:Connector
handleWrite	reactor/s11/TcpConnection.cc	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
handleWrite	reactor/s12/Connector.cc	/^void Connector::handleWrite()$/;"	f	class:Connector
handleWrite	reactor/s12/TcpConnection.cc	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
handleWrite	reactor/s13/Connector.cc	/^void Connector::handleWrite()$/;"	f	class:Connector
handleWrite	reactor/s13/TcpConnection.cc	/^void TcpConnection::handleWrite()$/;"	f	class:TcpConnection
handle_accept	pingpong/asio/server.cpp	/^  void handle_accept(session* new_session, const asio::error_code& err)$/;"	f	class:server
handle_accept	python/chat-reactor.py	/^def handle_accept(fileno, event):$/;"	f
handle_accept	python/echo-reactor.py	/^def handle_accept(fileno, event):$/;"	f
handle_connect	pingpong/asio/client.cpp	/^  void handle_connect(const asio::error_code& err,$/;"	f	class:session	file:
handle_input	python/chat-reactor.py	/^def handle_input(socket, data):$/;"	f
handle_input	python/echo-reactor.py	/^def handle_input(socket, data):$/;"	f
handle_read	pingpong/asio/client.cpp	/^  void handle_read(const asio::error_code& err, size_t length)$/;"	f	class:session	file:
handle_read	pingpong/asio/server.cpp	/^  void handle_read(const asio::error_code& err, size_t length)$/;"	f	class:session
handle_request	python/chat-reactor.py	/^def handle_request(fileno, event):$/;"	f
handle_request	python/echo-reactor.py	/^def handle_request(fileno, event):$/;"	f
handle_timeout	pingpong/asio/client.cpp	/^  void handle_timeout()$/;"	f	class:client
handle_write	pingpong/asio/client.cpp	/^  void handle_write(const asio::error_code& err, size_t length)$/;"	f	class:session	file:
handle_write	pingpong/asio/server.cpp	/^  void handle_write(const asio::error_code& err)$/;"	f	class:session
handler_	pingpong/asio/handler_allocator.hpp	/^  Handler handler_;$/;"	m	class:custom_alloc_handler
handler_allocator	pingpong/asio/handler_allocator.hpp	/^  handler_allocator()$/;"	f	class:handler_allocator
handler_allocator	pingpong/asio/handler_allocator.hpp	/^class handler_allocator$/;"	c
handlers	python/chat-reactor.py	/^handlers = {}$/;"	v
handlers	python/echo-reactor.py	/^handlers = {}$/;"	v
happen	java/bankqueue/event/CustomerArriveEvent.java	/^    public void happen(EventSimulator simulator) {$/;"	m	class:CustomerArriveEvent
happen	java/bankqueue/event/CustomerLeaveEvent.java	/^    public void happen(EventSimulator simulator) {$/;"	m	class:CustomerLeaveEvent
happen	java/bankqueue/event/Event.java	/^    public abstract void happen(EventSimulator simulator);$/;"	m	class:Event
hasAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^      public boolean hasAnswerer() {$/;"	m	class:QueryProtos.Answer.Builder
hasAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^    boolean hasAnswerer();$/;"	m	interface:QueryProtos.AnswerOrBuilder
hasAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^    public boolean hasAnswerer() {$/;"	m	class:QueryProtos.Answer
hasAnySpareWindow	java/bankqueue/Bank.java	/^    public boolean hasAnySpareWindow() {$/;"	m	class:Bank
hasCheckerboard	protorpc/sudoku/Sudoku.java	/^      public boolean hasCheckerboard() {$/;"	m	class:Sudoku.SudokuRequest.Builder
hasCheckerboard	protorpc/sudoku/Sudoku.java	/^      public boolean hasCheckerboard() {$/;"	m	class:Sudoku.SudokuResponse.Builder
hasCheckerboard	protorpc/sudoku/Sudoku.java	/^    boolean hasCheckerboard();$/;"	m	interface:Sudoku.SudokuRequestOrBuilder
hasCheckerboard	protorpc/sudoku/Sudoku.java	/^    boolean hasCheckerboard();$/;"	m	interface:Sudoku.SudokuResponseOrBuilder
hasCheckerboard	protorpc/sudoku/Sudoku.java	/^    public boolean hasCheckerboard() {$/;"	m	class:Sudoku.SudokuRequest
hasCheckerboard	protorpc/sudoku/Sudoku.java	/^    public boolean hasCheckerboard() {$/;"	m	class:Sudoku.SudokuResponse
hasError	protorpc/muduo/rpc/proto/RpcProto.java	/^      public boolean hasError() {$/;"	m	class:RpcProto.RpcMessage.Builder
hasError	protorpc/muduo/rpc/proto/RpcProto.java	/^    boolean hasError();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
hasError	protorpc/muduo/rpc/proto/RpcProto.java	/^    public boolean hasError() {$/;"	m	class:RpcProto.RpcMessage
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public boolean hasId() {$/;"	m	class:QueryProtos.Answer.Builder
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public boolean hasId() {$/;"	m	class:QueryProtos.Empty.Builder
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public boolean hasId() {$/;"	m	class:QueryProtos.Query.Builder
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^    boolean hasId();$/;"	m	interface:QueryProtos.AnswerOrBuilder
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^    boolean hasId();$/;"	m	interface:QueryProtos.EmptyOrBuilder
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^    boolean hasId();$/;"	m	interface:QueryProtos.QueryOrBuilder
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^    public boolean hasId() {$/;"	m	class:QueryProtos.Answer
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^    public boolean hasId() {$/;"	m	class:QueryProtos.Empty
hasId	protorpc/muduo/codec/tests/QueryProtos.java	/^    public boolean hasId() {$/;"	m	class:QueryProtos.Query
hasId	protorpc/muduo/rpc/proto/RpcProto.java	/^      public boolean hasId() {$/;"	m	class:RpcProto.RpcMessage.Builder
hasId	protorpc/muduo/rpc/proto/RpcProto.java	/^    boolean hasId();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
hasId	protorpc/muduo/rpc/proto/RpcProto.java	/^    public boolean hasId() {$/;"	m	class:RpcProto.RpcMessage
hasMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^      public boolean hasMethod() {$/;"	m	class:RpcProto.RpcMessage.Builder
hasMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^    boolean hasMethod();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
hasMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^    public boolean hasMethod() {$/;"	m	class:RpcProto.RpcMessage
hasPayload	protorpc/echo/EchoProto.java	/^      public boolean hasPayload() {$/;"	m	class:EchoProto.EchoRequest.Builder
hasPayload	protorpc/echo/EchoProto.java	/^      public boolean hasPayload() {$/;"	m	class:EchoProto.EchoResponse.Builder
hasPayload	protorpc/echo/EchoProto.java	/^    boolean hasPayload();$/;"	m	interface:EchoProto.EchoRequestOrBuilder
hasPayload	protorpc/echo/EchoProto.java	/^    boolean hasPayload();$/;"	m	interface:EchoProto.EchoResponseOrBuilder
hasPayload	protorpc/echo/EchoProto.java	/^    public boolean hasPayload() {$/;"	m	class:EchoProto.EchoRequest
hasPayload	protorpc/echo/EchoProto.java	/^    public boolean hasPayload() {$/;"	m	class:EchoProto.EchoResponse
hasQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      public boolean hasQuestioner() {$/;"	m	class:QueryProtos.Answer.Builder
hasQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      public boolean hasQuestioner() {$/;"	m	class:QueryProtos.Query.Builder
hasQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^    boolean hasQuestioner();$/;"	m	interface:QueryProtos.AnswerOrBuilder
hasQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^    boolean hasQuestioner();$/;"	m	interface:QueryProtos.QueryOrBuilder
hasQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^    public boolean hasQuestioner() {$/;"	m	class:QueryProtos.Answer
hasQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^    public boolean hasQuestioner() {$/;"	m	class:QueryProtos.Query
hasRequest	protorpc/muduo/rpc/proto/RpcProto.java	/^      public boolean hasRequest() {$/;"	m	class:RpcProto.RpcMessage.Builder
hasRequest	protorpc/muduo/rpc/proto/RpcProto.java	/^    boolean hasRequest();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
hasRequest	protorpc/muduo/rpc/proto/RpcProto.java	/^    public boolean hasRequest() {$/;"	m	class:RpcProto.RpcMessage
hasResponse	protorpc/muduo/rpc/proto/RpcProto.java	/^      public boolean hasResponse() {$/;"	m	class:RpcProto.RpcMessage.Builder
hasResponse	protorpc/muduo/rpc/proto/RpcProto.java	/^    boolean hasResponse();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
hasResponse	protorpc/muduo/rpc/proto/RpcProto.java	/^    public boolean hasResponse() {$/;"	m	class:RpcProto.RpcMessage
hasService	protorpc/muduo/rpc/proto/RpcProto.java	/^      public boolean hasService() {$/;"	m	class:RpcProto.RpcMessage.Builder
hasService	protorpc/muduo/rpc/proto/RpcProto.java	/^    boolean hasService();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
hasService	protorpc/muduo/rpc/proto/RpcProto.java	/^    public boolean hasService() {$/;"	m	class:RpcProto.RpcMessage
hasSolved	protorpc/sudoku/Sudoku.java	/^      public boolean hasSolved() {$/;"	m	class:Sudoku.SudokuResponse.Builder
hasSolved	protorpc/sudoku/Sudoku.java	/^    boolean hasSolved();$/;"	m	interface:Sudoku.SudokuResponseOrBuilder
hasSolved	protorpc/sudoku/Sudoku.java	/^    public boolean hasSolved() {$/;"	m	class:Sudoku.SudokuResponse
hasSpareWindow	java/bankqueue/Bank.java	/^    public boolean hasSpareWindow(WindowType type) {$/;"	m	class:Bank
hasType	protorpc/muduo/rpc/proto/RpcProto.java	/^      public boolean hasType() {$/;"	m	class:RpcProto.RpcMessage.Builder
hasType	protorpc/muduo/rpc/proto/RpcProto.java	/^    boolean hasType();$/;"	m	interface:RpcProto.RpcMessageOrBuilder
hasType	protorpc/muduo/rpc/proto/RpcProto.java	/^    public boolean hasType() {$/;"	m	class:RpcProto.RpcMessage
hasWritten	reactor/s07/Buffer.h	/^  void hasWritten(size_t len)$/;"	f	class:muduo::Buffer
hasWritten	reactor/s08/Buffer.h	/^  void hasWritten(size_t len)$/;"	f	class:muduo::Buffer
hasWritten	reactor/s09/Buffer.h	/^  void hasWritten(size_t len)$/;"	f	class:muduo::Buffer
hasWritten	reactor/s10/Buffer.h	/^  void hasWritten(size_t len)$/;"	f	class:muduo::Buffer
hasWritten	reactor/s11/Buffer.h	/^  void hasWritten(size_t len)$/;"	f	class:muduo::Buffer
hasWritten	reactor/s12/Buffer.h	/^  void hasWritten(size_t len)$/;"	f	class:muduo::Buffer
hasWritten	reactor/s13/Buffer.h	/^  void hasWritten(size_t len)$/;"	f	class:muduo::Buffer
hash	puzzle/huarong.cc	/^  template<> struct hash<Mask>$/;"	s	namespace:std	file:
hashCode	java/billing/Money.java	/^    public int hashCode() {$/;"	m	class:Money
hashValue	puzzle/huarong.cc	/^  size_t hashValue() const$/;"	f	struct:Mask
help	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    private static void help() {$/;"	m	class:PdfHack	file:
high	basic/int128.h	/^  uint64_t low, high;$/;"	m	struct:uint128
highest	basic/uint.h	/^  uint32_t highest() const$/;"	f	class:UnsignedInt
holder_	thread/Mutex.h	/^  pid_t holder_;$/;"	m	class:muduo::MutexLock
host	tpc/ttcp.cc	/^  std::string host;$/;"	m	struct:Options	file:
hostToNetwork16	reactor/s04/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s05/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s06/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s07/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s08/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s09/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s10/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s11/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s12/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork16	reactor/s13/SocketsOps.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s04/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s05/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s06/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s07/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s08/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s09/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s10/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s11/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s12/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork32	reactor/s13/SocketsOps.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s04/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s05/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s06/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s07/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s08/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s09/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s10/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s11/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s12/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
hostToNetwork64	reactor/s13/SocketsOps.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::sockets
howMuchTimeFromNow	reactor/s02/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s03/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s04/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s05/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s06/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s07/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s08/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s09/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s10/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s11/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s12/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
howMuchTimeFromNow	reactor/s13/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)$/;"	f	namespace:muduo::detail
icmp_input	faketcp/faketcp.cc	/^void icmp_input(int fd, const void* input, const void* payload, int len)$/;"	f
id	java/bankqueue/customer/Customer.java	/^    public final int id;$/;"	f	class:Customer
id	java/billing/UserMonthUsage.java	/^    public final int id;$/;"	f	class:UserMonthUsage
id	protorpc/muduo/rpc/RpcChannel.java	/^    private AtomicLong id = new AtomicLong(1);$/;"	f	class:RpcChannel	file:
id_	esort/sort03.cc	/^  int id_;$/;"	m	class:Task	file:
id_	esort/sort04.cc	/^  int id_;$/;"	m	class:Task	file:
id_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private int id_ ;$/;"	f	class:QueryProtos.Empty.Builder	file:
id_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private long id_ ;$/;"	f	class:QueryProtos.Answer.Builder	file:
id_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private long id_ ;$/;"	f	class:QueryProtos.Query.Builder	file:
id_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private int id_;$/;"	f	class:QueryProtos.Empty	file:
id_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private long id_;$/;"	f	class:QueryProtos.Answer	file:
id_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private long id_;$/;"	f	class:QueryProtos.Query	file:
id_	protorpc/muduo/rpc/proto/RpcProto.java	/^      private long id_ ;$/;"	f	class:RpcProto.RpcMessage.Builder	file:
id_	protorpc/muduo/rpc/proto/RpcProto.java	/^    private long id_;$/;"	f	class:RpcProto.RpcMessage	file:
impl_	logging/Logging.h	/^  Impl impl_;$/;"	m	class:muduo::Logger
impl_	thread/SignalSlot.h	/^  const boost::shared_ptr<SignalImpl> impl_;$/;"	m	class:muduo::Signal
implicit_cast	logging/Logging.h	/^inline To implicit_cast(From const &f) {$/;"	f	namespace:muduo
implicit_cast	tpc/Common.h	/^inline To implicit_cast(const From &f)$/;"	f
in_	puzzle/query_freq.cc	/^  std::ifstream* in_;$/;"	m	class:Source	file:
in_	topk/merger.cc	/^  std::istream* in_;$/;"	m	class:Source	file:
in_checksum	faketcp/faketcp.cc	/^uint16_t in_checksum(const void* buf, int len)$/;"	f
in_use_	pingpong/asio/handler_allocator.hpp	/^  bool in_use_;$/;"	m	class:handler_allocator
increment	thread/Atomic.h	/^  void increment()$/;"	f	class:muduo::detail::AtomicIntegerT
incrementAndGet	thread/Atomic.h	/^  T incrementAndGet()$/;"	f	class:muduo::detail::AtomicIntegerT
index	algorithm/mergeN.cc	/^  size_t index;$/;"	m	struct:Input	file:
index	esort/sort01.cc	/^  int index;$/;"	m	struct:Key	file:
index	esort/sort02.cc	/^  int index;$/;"	m	struct:Key	file:
index	esort/sort03.cc	/^  int index;$/;"	m	struct:Key	file:
index	esort/sort04.cc	/^  int index;$/;"	m	struct:Key	file:
index	protorpc/muduo/rpc/proto/RpcProto.java	/^    private final int index;$/;"	f	class:RpcProto.ErrorCode	file:
index	protorpc/muduo/rpc/proto/RpcProto.java	/^    private final int index;$/;"	f	class:RpcProto.MessageType	file:
index	reactor/s01/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s02/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s03/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s04/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s05/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s06/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s07/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s08/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s09/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s10/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s11/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s12/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index	reactor/s13/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::Channel
index_	reactor/s01/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s02/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s03/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s04/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s05/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s06/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s07/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s08/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s09/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s10/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s11/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s12/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
index_	reactor/s13/Channel.h	/^  int        index_; \/\/ used by Poller.$/;"	m	class:muduo::Channel
init	string/StringEager.cc	/^void StringEager::init(const char* str)$/;"	f	class:StringEager
init	thread/Singleton.h	/^  static void init()$/;"	f	class:muduo::Singleton
init	thread/Thread.cc	/^ThreadNameInitializer init;$/;"	m	namespace:__anon4	file:
initAndRefresh	thread/test/Waiter_test.cc	/^void initAndRefresh(Waiter* waiter)$/;"	f
initFields	protorpc/echo/EchoProto.java	/^    private void initFields() {$/;"	m	class:EchoProto.EchoRequest	file:
initFields	protorpc/echo/EchoProto.java	/^    private void initFields() {$/;"	m	class:EchoProto.EchoResponse	file:
initFields	protorpc/muduo/codec/tests/QueryProtos.java	/^    private void initFields() {$/;"	m	class:QueryProtos.Answer	file:
initFields	protorpc/muduo/codec/tests/QueryProtos.java	/^    private void initFields() {$/;"	m	class:QueryProtos.Empty	file:
initFields	protorpc/muduo/codec/tests/QueryProtos.java	/^    private void initFields() {$/;"	m	class:QueryProtos.Query	file:
initFields	protorpc/muduo/rpc/proto/RpcProto.java	/^    private void initFields() {$/;"	m	class:RpcProto.RpcMessage	file:
initFields	protorpc/sudoku/Sudoku.java	/^    private void initFields() {$/;"	m	class:Sudoku.SudokuRequest	file:
initFields	protorpc/sudoku/Sudoku.java	/^    private void initFields() {$/;"	m	class:Sudoku.SudokuResponse	file:
initLogLevel	logging/Logging.cc	/^Logger::LogLevel initLogLevel()$/;"	f	namespace:muduo
initObj	reactor/s09/EventLoop.cc	/^IgnoreSigPipe initObj;$/;"	v
initObj	reactor/s10/EventLoop.cc	/^IgnoreSigPipe initObj;$/;"	v
initObj	reactor/s11/EventLoop.cc	/^IgnoreSigPipe initObj;$/;"	v
initObj	reactor/s12/EventLoop.cc	/^IgnoreSigPipe initObj;$/;"	v
initObj	reactor/s13/EventLoop.cc	/^IgnoreSigPipe initObj;$/;"	v
initObj	tpc/TcpStream.cc	/^} initObj;$/;"	m	namespace:__anon16	typeref:class:__anon16::IgnoreSigPipe	file:
init_cache	sudoku/sudoku_min_arity_cache.cc	/^void init_cache()$/;"	f
init_neighbors	sudoku/neighbor.cc	/^\/*public*\/ void init_neighbors()$/;"	f
inout_	puzzle/dance.cc	/^  int*    inout_;$/;"	m	struct:Dance	file:
inout_	sudoku/sudoku_dancing_links.cc	/^    int*    inout_;$/;"	m	struct:Dance	file:
input	esort/sort02.cc	/^  InputFile* input;$/;"	m	struct:Record	file:
input	esort/sort03.cc	/^  InputFile* input;$/;"	m	struct:Record	file:
input	esort/sort04.cc	/^  InputFile* input;$/;"	m	struct:Source	file:
input	sudoku/sudoku_basic.cc	/^void input(const char in[N])$/;"	f
inputBuffer_	reactor/s07/TcpConnection.h	/^  Buffer inputBuffer_;$/;"	m	class:muduo::TcpConnection
inputBuffer_	reactor/s08/TcpConnection.h	/^  Buffer inputBuffer_;$/;"	m	class:muduo::TcpConnection
inputBuffer_	reactor/s09/TcpConnection.h	/^  Buffer inputBuffer_;$/;"	m	class:muduo::TcpConnection
inputBuffer_	reactor/s10/TcpConnection.h	/^  Buffer inputBuffer_;$/;"	m	class:muduo::TcpConnection
inputBuffer_	reactor/s11/TcpConnection.h	/^  Buffer inputBuffer_;$/;"	m	class:muduo::TcpConnection
inputBuffer_	reactor/s12/TcpConnection.h	/^  Buffer inputBuffer_;$/;"	m	class:muduo::TcpConnection
inputBuffer_	reactor/s13/TcpConnection.h	/^  Buffer inputBuffer_;$/;"	m	class:muduo::TcpConnection
insert	reactor/s02/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s03/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s04/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s05/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s06/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s07/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s08/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s09/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s10/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s11/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s12/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
insert	reactor/s13/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer)$/;"	f	class:TimerQueue
instance	thread/Singleton.h	/^  static T& instance()$/;"	f	class:muduo::Singleton
instance	thread/ThreadLocalSingleton.h	/^  static T& instance()$/;"	f	class:muduo::ThreadLocalSingleton
internalGetFieldAccessorTable	protorpc/echo/EchoProto.java	/^          internalGetFieldAccessorTable() {$/;"	m	class:EchoProto.EchoRequest.Builder
internalGetFieldAccessorTable	protorpc/echo/EchoProto.java	/^          internalGetFieldAccessorTable() {$/;"	m	class:EchoProto.EchoResponse.Builder
internalGetFieldAccessorTable	protorpc/echo/EchoProto.java	/^        internalGetFieldAccessorTable() {$/;"	m	class:EchoProto.EchoRequest
internalGetFieldAccessorTable	protorpc/echo/EchoProto.java	/^        internalGetFieldAccessorTable() {$/;"	m	class:EchoProto.EchoResponse
internalGetFieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^          internalGetFieldAccessorTable() {$/;"	m	class:QueryProtos.Answer.Builder
internalGetFieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^          internalGetFieldAccessorTable() {$/;"	m	class:QueryProtos.Empty.Builder
internalGetFieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^          internalGetFieldAccessorTable() {$/;"	m	class:QueryProtos.Query.Builder
internalGetFieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^        internalGetFieldAccessorTable() {$/;"	m	class:QueryProtos.Answer
internalGetFieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^        internalGetFieldAccessorTable() {$/;"	m	class:QueryProtos.Empty
internalGetFieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^        internalGetFieldAccessorTable() {$/;"	m	class:QueryProtos.Query
internalGetFieldAccessorTable	protorpc/muduo/rpc/proto/RpcProto.java	/^          internalGetFieldAccessorTable() {$/;"	m	class:RpcProto.RpcMessage.Builder
internalGetFieldAccessorTable	protorpc/muduo/rpc/proto/RpcProto.java	/^        internalGetFieldAccessorTable() {$/;"	m	class:RpcProto.RpcMessage
internalGetFieldAccessorTable	protorpc/sudoku/Sudoku.java	/^          internalGetFieldAccessorTable() {$/;"	m	class:Sudoku.SudokuRequest.Builder
internalGetFieldAccessorTable	protorpc/sudoku/Sudoku.java	/^          internalGetFieldAccessorTable() {$/;"	m	class:Sudoku.SudokuResponse.Builder
internalGetFieldAccessorTable	protorpc/sudoku/Sudoku.java	/^        internalGetFieldAccessorTable() {$/;"	m	class:Sudoku.SudokuRequest
internalGetFieldAccessorTable	protorpc/sudoku/Sudoku.java	/^        internalGetFieldAccessorTable() {$/;"	m	class:Sudoku.SudokuResponse
internalGetValueMap	protorpc/muduo/rpc/proto/RpcProto.java	/^        internalGetValueMap() {$/;"	m	class:RpcProto.ErrorCode
internalGetValueMap	protorpc/muduo/rpc/proto/RpcProto.java	/^        internalGetValueMap() {$/;"	m	class:RpcProto.MessageType
internalValueMap	protorpc/muduo/rpc/proto/RpcProto.java	/^        internalValueMap =$/;"	f	class:RpcProto.ErrorCode	file:
internalValueMap	protorpc/muduo/rpc/proto/RpcProto.java	/^        internalValueMap =$/;"	f	class:RpcProto.MessageType	file:
internal_static_RpcMessage_descriptor	protorpc/muduo/rpc/proto/RpcProto.java	/^    internal_static_RpcMessage_descriptor;$/;"	f	class:RpcProto	file:
internal_static_RpcMessage_fieldAccessorTable	protorpc/muduo/rpc/proto/RpcProto.java	/^      internal_static_RpcMessage_fieldAccessorTable;$/;"	f	class:RpcProto	file:
internal_static_echo_EchoRequest_descriptor	protorpc/echo/EchoProto.java	/^    internal_static_echo_EchoRequest_descriptor;$/;"	f	class:EchoProto	file:
internal_static_echo_EchoRequest_fieldAccessorTable	protorpc/echo/EchoProto.java	/^      internal_static_echo_EchoRequest_fieldAccessorTable;$/;"	f	class:EchoProto	file:
internal_static_echo_EchoResponse_descriptor	protorpc/echo/EchoProto.java	/^    internal_static_echo_EchoResponse_descriptor;$/;"	f	class:EchoProto	file:
internal_static_echo_EchoResponse_fieldAccessorTable	protorpc/echo/EchoProto.java	/^      internal_static_echo_EchoResponse_fieldAccessorTable;$/;"	f	class:EchoProto	file:
internal_static_muduo_Answer_descriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^    internal_static_muduo_Answer_descriptor;$/;"	f	class:QueryProtos	file:
internal_static_muduo_Answer_fieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^      internal_static_muduo_Answer_fieldAccessorTable;$/;"	f	class:QueryProtos	file:
internal_static_muduo_Empty_descriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^    internal_static_muduo_Empty_descriptor;$/;"	f	class:QueryProtos	file:
internal_static_muduo_Empty_fieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^      internal_static_muduo_Empty_fieldAccessorTable;$/;"	f	class:QueryProtos	file:
internal_static_muduo_Query_descriptor	protorpc/muduo/codec/tests/QueryProtos.java	/^    internal_static_muduo_Query_descriptor;$/;"	f	class:QueryProtos	file:
internal_static_muduo_Query_fieldAccessorTable	protorpc/muduo/codec/tests/QueryProtos.java	/^      internal_static_muduo_Query_fieldAccessorTable;$/;"	f	class:QueryProtos	file:
internal_static_sudoku_SudokuRequest_descriptor	protorpc/sudoku/Sudoku.java	/^    internal_static_sudoku_SudokuRequest_descriptor;$/;"	f	class:Sudoku	file:
internal_static_sudoku_SudokuRequest_fieldAccessorTable	protorpc/sudoku/Sudoku.java	/^      internal_static_sudoku_SudokuRequest_fieldAccessorTable;$/;"	f	class:Sudoku	file:
internal_static_sudoku_SudokuResponse_descriptor	protorpc/sudoku/Sudoku.java	/^    internal_static_sudoku_SudokuResponse_descriptor;$/;"	f	class:Sudoku	file:
internal_static_sudoku_SudokuResponse_fieldAccessorTable	protorpc/sudoku/Sudoku.java	/^      internal_static_sudoku_SudokuResponse_fieldAccessorTable;$/;"	f	class:Sudoku	file:
interval_	reactor/s02/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s03/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s04/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s05/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s06/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s07/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s08/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s09/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s10/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s11/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s12/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
interval_	reactor/s13/Timer.h	/^  const double interval_;$/;"	m	class:muduo::Timer
invalid	datetime/Timestamp.cc	/^Timestamp Timestamp::invalid()$/;"	f	class:Timestamp
io_service_	pingpong/asio/client.cpp	/^  asio::io_service& io_service_;$/;"	m	class:client	file:
io_service_	pingpong/asio/server.cpp	/^  asio::io_service& io_service_;$/;"	m	class:server	file:
io_service_	pingpong/asio/server.cpp	/^  asio::io_service& io_service_;$/;"	m	class:session	file:
ipHostEndian	tpc/InetAddress.h	/^  uint32_t ipHostEndian() const { return ntohl(saddr_.sin_addr.s_addr); }$/;"	f	class:InetAddress
ipNetEndian	tpc/InetAddress.h	/^  uint32_t ipNetEndian() const { return saddr_.sin_addr.s_addr; }$/;"	f	class:InetAddress
isBound	protorpc/muduo/rpc/test/MockChannel.java	/^    public boolean isBound() {$/;"	m	class:MockChannel
isConnected	protorpc/muduo/rpc/test/MockChannel.java	/^    public boolean isConnected() {$/;"	m	class:MockChannel
isDst	datetime/TimeZone.cc	/^  bool isDst;$/;"	m	struct:muduo::detail::Localtime	file:
isInLoopThread	reactor/s00/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s01/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s02/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s03/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s04/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s05/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s06/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s07/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s08/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s09/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s10/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s11/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s12/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInLoopThread	reactor/s13/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:muduo::EventLoop
isInitialized	protorpc/echo/EchoProto.java	/^      public final boolean isInitialized() {$/;"	m	class:EchoProto.EchoRequest.Builder
isInitialized	protorpc/echo/EchoProto.java	/^      public final boolean isInitialized() {$/;"	m	class:EchoProto.EchoResponse.Builder
isInitialized	protorpc/echo/EchoProto.java	/^    public final boolean isInitialized() {$/;"	m	class:EchoProto.EchoRequest
isInitialized	protorpc/echo/EchoProto.java	/^    public final boolean isInitialized() {$/;"	m	class:EchoProto.EchoResponse
isInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^      public final boolean isInitialized() {$/;"	m	class:QueryProtos.Answer.Builder
isInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^      public final boolean isInitialized() {$/;"	m	class:QueryProtos.Empty.Builder
isInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^      public final boolean isInitialized() {$/;"	m	class:QueryProtos.Query.Builder
isInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^    public final boolean isInitialized() {$/;"	m	class:QueryProtos.Answer
isInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^    public final boolean isInitialized() {$/;"	m	class:QueryProtos.Empty
isInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^    public final boolean isInitialized() {$/;"	m	class:QueryProtos.Query
isInitialized	protorpc/muduo/rpc/proto/RpcProto.java	/^      public final boolean isInitialized() {$/;"	m	class:RpcProto.RpcMessage.Builder
isInitialized	protorpc/muduo/rpc/proto/RpcProto.java	/^    public final boolean isInitialized() {$/;"	m	class:RpcProto.RpcMessage
isInitialized	protorpc/sudoku/Sudoku.java	/^      public final boolean isInitialized() {$/;"	m	class:Sudoku.SudokuRequest.Builder
isInitialized	protorpc/sudoku/Sudoku.java	/^      public final boolean isInitialized() {$/;"	m	class:Sudoku.SudokuResponse.Builder
isInitialized	protorpc/sudoku/Sudoku.java	/^    public final boolean isInitialized() {$/;"	m	class:Sudoku.SudokuRequest
isInitialized	protorpc/sudoku/Sudoku.java	/^    public final boolean isInitialized() {$/;"	m	class:Sudoku.SudokuResponse
isLeapYear	datetime/Date_unittest.cc	/^int isLeapYear(int year)$/;"	f
isLockedByThisThread	thread/Mutex.h	/^  bool isLockedByThisThread()$/;"	f	class:muduo::MutexLock
isMainThread	thread/Thread.cc	/^bool CurrentThread::isMainThread()$/;"	f	class:CurrentThread
isNoneEvent	reactor/s01/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s02/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s03/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s04/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s05/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s06/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s07/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s08/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s09/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s10/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s11/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s12/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNoneEvent	reactor/s13/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::Channel
isNormal	basic/uint.h	/^  bool isNormal() const { return isZero() || limbs_.back() != 0; }$/;"	f	class:UnsignedInt
isOdd	algorithm/partition.cc	/^bool isOdd(int x)$/;"	f
isOpen	protorpc/muduo/rpc/test/MockChannel.java	/^    public boolean isOpen() {$/;"	m	class:MockChannel
isReadable	protorpc/muduo/rpc/test/MockChannel.java	/^    public boolean isReadable() {$/;"	m	class:MockChannel
isSelfConnect	reactor/s11/SocketsOps.cc	/^bool sockets::isSelfConnect(int sockfd)$/;"	f	class:sockets
isSelfConnect	reactor/s12/SocketsOps.cc	/^bool sockets::isSelfConnect(int sockfd)$/;"	f	class:sockets
isSelfConnect	reactor/s13/SocketsOps.cc	/^bool sockets::isSelfConnect(int sockfd)$/;"	f	class:sockets
isSelfConnection	tpc/TcpStream.cc	/^bool isSelfConnection(const Socket& sock)$/;"	f	namespace:__anon16
isSolved	puzzle/huarong.cc	/^  bool isSolved() const$/;"	f	struct:State
isWritable	protorpc/muduo/rpc/test/MockChannel.java	/^    public boolean isWritable() {$/;"	m	class:MockChannel
isWriting	reactor/s08/Channel.h	/^  bool isWriting() const { return events_ & kWriteEvent; }$/;"	f	class:muduo::Channel
isWriting	reactor/s09/Channel.h	/^  bool isWriting() const { return events_ & kWriteEvent; }$/;"	f	class:muduo::Channel
isWriting	reactor/s10/Channel.h	/^  bool isWriting() const { return events_ & kWriteEvent; }$/;"	f	class:muduo::Channel
isWriting	reactor/s11/Channel.h	/^  bool isWriting() const { return events_ & kWriteEvent; }$/;"	f	class:muduo::Channel
isWriting	reactor/s12/Channel.h	/^  bool isWriting() const { return events_ & kWriteEvent; }$/;"	f	class:muduo::Channel
isWriting	reactor/s13/Channel.h	/^  bool isWriting() const { return events_ & kWriteEvent; }$/;"	f	class:muduo::Channel
isZero	basic/uint.h	/^  bool isZero() const { return limbs_.empty(); }$/;"	f	class:UnsignedInt
isdst	datetime/TimeZone_unittest.cc	/^  bool isdst;$/;"	m	struct:TestCase	file:
iterator	string/StringEager.h	/^  typedef pointer       iterator;$/;"	t	class:muduo::StringEager
iterator	string/StringSso.h	/^  typedef pointer       iterator;$/;"	t	class:muduo::StringSso
join	thread/Thread.cc	/^void Thread::join()$/;"	f	class:Thread
joinAll	thread/test/BlockingQueue_test.cc	/^  void joinAll()$/;"	f	class:Test
joinAll	thread/test/BoundedBlockingQueue_test.cc	/^  void joinAll()$/;"	f	class:Test
joined_	thread/Thread.h	/^  bool        joined_;$/;"	m	class:muduo::Thread
julianDayNumber	datetime/Date.h	/^  int julianDayNumber() const { return julianDayNumber_; }$/;"	f	class:muduo::Date
julianDayNumber_	datetime/Date.h	/^  int julianDayNumber_;$/;"	m	class:muduo::Date
kAdded	reactor/s13/EPoller.cc	/^const int kAdded = 1;$/;"	m	namespace:__anon9	file:
kBatchRecords	esort/sort02.cc	/^const int kBatchRecords = 10000000;$/;"	v
kBatchRecords	esort/sort03.cc	/^const int kBatchRecords = 10000000;$/;"	v
kBatchRecords	esort/sort04.cc	/^const int kBatchRecords = 10000000;$/;"	v
kBlocks	puzzle/huarong.cc	/^const int kBlocks = 10;$/;"	v
kBox	sudoku/sudoku_dancing_links.cc	/^const int kRow = 100, kCol = 200, kBox = 300;$/;"	v
kCentsPerYuan	java/billing/Money.java	/^    public static final long kCentsPerYuan = 100;$/;"	f	class:Money
kCheapPrepend	reactor/s07/Buffer.h	/^  static const size_t kCheapPrepend = 8;$/;"	m	class:muduo::Buffer
kCheapPrepend	reactor/s08/Buffer.h	/^  static const size_t kCheapPrepend = 8;$/;"	m	class:muduo::Buffer
kCheapPrepend	reactor/s09/Buffer.h	/^  static const size_t kCheapPrepend = 8;$/;"	m	class:muduo::Buffer
kCheapPrepend	reactor/s10/Buffer.h	/^  static const size_t kCheapPrepend = 8;$/;"	m	class:muduo::Buffer
kCheapPrepend	reactor/s11/Buffer.h	/^  static const size_t kCheapPrepend = 8;$/;"	m	class:muduo::Buffer
kCheapPrepend	reactor/s12/Buffer.h	/^  static const size_t kCheapPrepend = 8;$/;"	m	class:muduo::Buffer
kCheapPrepend	reactor/s13/Buffer.h	/^  static const size_t kCheapPrepend = 8;$/;"	m	class:muduo::Buffer
kCheckTimeRoll_	logging/LogFile.h	/^  const static int kCheckTimeRoll_ = 1024;$/;"	m	class:muduo::LogFile
kCol	sudoku/sudoku_dancing_links.cc	/^const int kRow = 100, kCol = 200, kBox = 300;$/;"	v
kColumns	puzzle/huarong.cc	/^const int kColumns = 4;$/;"	v
kConnected	reactor/s05/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnected	reactor/s06/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnected	reactor/s07/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnected	reactor/s08/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnected	reactor/s09/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnected	reactor/s10/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnected	reactor/s11/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kConnected	reactor/s11/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnected	reactor/s12/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kConnected	reactor/s12/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnected	reactor/s13/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kConnected	reactor/s13/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s05/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s06/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s07/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s08/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s09/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s10/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s11/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kConnecting	reactor/s11/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s12/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kConnecting	reactor/s12/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kConnecting	reactor/s13/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kConnecting	reactor/s13/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDaysPerWeek	datetime/Date.h	/^  static const int kDaysPerWeek = 7;$/;"	m	class:muduo::Date
kDaysServed	java/billing/DataFields.java	/^        kDaysServed,$/;"	e	enum:DataFields.UserField	file:
kDec	basic/uint.h	/^    kDec,$/;"	e	enum:UnsignedInt::Radix
kDeleted	reactor/s13/EPoller.cc	/^const int kDeleted = 2;$/;"	m	namespace:__anon9	file:
kDigits	basic/uint.cc	/^const char kDigits[] = "0123456789abcdef";$/;"	v
kDisconnected	reactor/s06/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnected	reactor/s07/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnected	reactor/s08/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnected	reactor/s09/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnected	reactor/s10/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnected	reactor/s11/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kDisconnected	reactor/s11/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnected	reactor/s12/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kDisconnected	reactor/s12/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnected	reactor/s13/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::Connector::States
kDisconnected	reactor/s13/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnecting	reactor/s08/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnecting	reactor/s09/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnecting	reactor/s10/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnecting	reactor/s11/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnecting	reactor/s12/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kDisconnecting	reactor/s13/TcpConnection.h	/^  enum StateE { kConnecting, kConnected, kDisconnecting, kDisconnected, };$/;"	e	enum:muduo::TcpConnection::StateE
kEmpty	string/StringTrivial.h	/^  static const char kEmpty[];$/;"	m	class:trivial2::String
kEmpty	string/StringTrivialTest.cc	/^const char String::kEmpty[] = "";$/;"	m	class:String	file:
kEmpty_	string/StringEager.cc	/^char muduo::StringEager::kEmpty_[] = "";$/;"	m	class:muduo::StringEager	file:
kEmpty_	string/StringEager.h	/^  static char kEmpty_[1];$/;"	m	class:muduo::StringEager
kFast	java/bankqueue/WindowType.java	/^    kNormal, kFast, kVip, kNumWindows$/;"	e	enum:WindowType	file:
kFast	java/bankqueue/customer/CustomerType.java	/^    kNormal, kFast, kVip$/;"	e	enum:CustomerType	file:
kGBK	utility/cwc.cc	/^  kUnknown, kUnicode, kGBK, kUTF8,$/;"	e	enum:Encoding	file:
kHeaderLen	protobuf/codec.h	/^const int kHeaderLen = sizeof(int32_t);$/;"	v
kHex	basic/uint.h	/^    kHex,$/;"	e	enum:UnsignedInt::Radix
kHorizon	puzzle/huarong.cc	/^  kHorizon,$/;"	m	class:Shape	file:
kInaddrAny	reactor/s04/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s05/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s06/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s07/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s08/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s09/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s10/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s11/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s12/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrAny	reactor/s13/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInitEventListSize	reactor/s13/EPoller.h	/^  static const int kInitEventListSize = 16;$/;"	m	class:muduo::EPoller
kInitRetryDelayMs	reactor/s11/Connector.h	/^  static const int kInitRetryDelayMs = 500;$/;"	m	class:muduo::Connector
kInitRetryDelayMs	reactor/s12/Connector.h	/^  static const int kInitRetryDelayMs = 500;$/;"	m	class:muduo::Connector
kInitRetryDelayMs	reactor/s13/Connector.h	/^  static const int kInitRetryDelayMs = 500;$/;"	m	class:muduo::Connector
kInitialSize	reactor/s07/Buffer.h	/^  static const size_t kInitialSize = 1024;$/;"	m	class:muduo::Buffer
kInitialSize	reactor/s08/Buffer.h	/^  static const size_t kInitialSize = 1024;$/;"	m	class:muduo::Buffer
kInitialSize	reactor/s09/Buffer.h	/^  static const size_t kInitialSize = 1024;$/;"	m	class:muduo::Buffer
kInitialSize	reactor/s10/Buffer.h	/^  static const size_t kInitialSize = 1024;$/;"	m	class:muduo::Buffer
kInitialSize	reactor/s11/Buffer.h	/^  static const size_t kInitialSize = 1024;$/;"	m	class:muduo::Buffer
kInitialSize	reactor/s12/Buffer.h	/^  static const size_t kInitialSize = 1024;$/;"	m	class:muduo::Buffer
kInitialSize	reactor/s13/Buffer.h	/^  static const size_t kInitialSize = 1024;$/;"	m	class:muduo::Buffer
kInternet	java/billing/DataFields.java	/^        kInternet,$/;"	e	enum:DataFields.SlipType	file:
kInvalid	puzzle/huarong.cc	/^  kInvalid,$/;"	m	class:Shape	file:
kIsNewUser	java/billing/DataFields.java	/^        kIsNewUser,$/;"	e	enum:DataFields.UserField	file:
kJoinTime	java/billing/DataFields.java	/^        kJoinTime,$/;"	e	enum:DataFields.UserField	file:
kJulianDayOf1970_01_01	datetime/Date.cc	/^const int Date::kJulianDayOf1970_01_01 = getJulianDayNumber(1970, 1, 1);$/;"	m	class:Date	file:
kJulianDayOf1970_01_01	datetime/Date.h	/^  static const int kJulianDayOf1970_01_01;$/;"	m	class:muduo::Date
kKeySize	esort/sort01.cc	/^const int kKeySize = 10;$/;"	v
kKeySize	esort/sort02.cc	/^const int kKeySize = 10;$/;"	v
kKeySize	esort/sort03.cc	/^const int kKeySize = 10;$/;"	v
kKeySize	esort/sort04.cc	/^const int kKeySize = 10;$/;"	v
kLargeBuffer	logging/LogStream.h	/^const int kLargeBuffer = 4000*1000;$/;"	m	namespace:muduo::detail
kLocalBuffer	string/StringSso.h	/^  const static int kLocalBuffer = sizeof(void*) == 8 ? 19 : 15;$/;"	m	class:muduo::StringSso
kMargin	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    static final float kMargin = Float.parseFloat(System.getProperty("Margin", "10"));$/;"	f	class:PdfHack
kMask_	basic/uint.h	/^  const static uint32_t kMask_ = 0xFFFFFFFF;$/;"	m	class:UnsignedInt
kMaxColumns	puzzle/dance.cc	/^const int kMaxColumns = 5 * 2 * 5;$/;"	v
kMaxColumns	sudoku/sudoku_dancing_links.cc	/^const int kMaxColumns = 400;$/;"	v
kMaxInterval	java/bankqueue/Bank.java	/^    private static final int kMaxInterval = 60;$/;"	f	class:Bank	file:
kMaxNodes	puzzle/dance.cc	/^const int kMaxNodes = 25 * 2 * 5 * 2;$/;"	v
kMaxNodes	sudoku/sudoku_dancing_links.cc	/^const int kMaxNodes = 1 + 81*4 + 9*9*9*4;$/;"	v
kMaxNumericSize	logging/LogStream.h	/^  static const int kMaxNumericSize = 32;$/;"	m	class:muduo::LogStream
kMaxQueens	puzzle/nqueens.cc	/^  const static int kMaxQueens = 16;$/;"	m	struct:BackTracking	file:
kMaxQueens	puzzle/nqueens_mt.cc	/^  const static int kMaxQueens = 20;$/;"	m	struct:BackTracking	file:
kMaxQueens	puzzle/nqueens_opt.cc	/^  const static int kMaxQueens = 20;$/;"	m	struct:BackTracking	file:
kMaxQueens	puzzle/nqueens_opt_mt.cc	/^  static const int kMaxQueens = 20;$/;"	m	struct:BackTracking	file:
kMaxRetryDelayMs	reactor/s11/Connector.cc	/^const int Connector::kMaxRetryDelayMs;$/;"	m	class:Connector	file:
kMaxRetryDelayMs	reactor/s11/Connector.h	/^  static const int kMaxRetryDelayMs = 30*1000;$/;"	m	class:muduo::Connector
kMaxRetryDelayMs	reactor/s12/Connector.cc	/^const int Connector::kMaxRetryDelayMs;$/;"	m	class:Connector	file:
kMaxRetryDelayMs	reactor/s12/Connector.h	/^  static const int kMaxRetryDelayMs = 30*1000;$/;"	m	class:muduo::Connector
kMaxRetryDelayMs	reactor/s13/Connector.cc	/^const int Connector::kMaxRetryDelayMs;$/;"	m	class:Connector	file:
kMaxRetryDelayMs	reactor/s13/Connector.h	/^  static const int kMaxRetryDelayMs = 30*1000;$/;"	m	class:muduo::Connector
kMaxServiceTime	java/bankqueue/customer/CustomerFactory.java	/^    private static final int kMaxServiceTime = 5 * 60; \/\/ five minutes$/;"	f	class:CustomerFactory	file:
kMaxSize	puzzle/query_freq.cc	/^const size_t kMaxSize = 10 * 1000 * 1000;$/;"	v
kMicroSecondsPerSecond	datetime/Timestamp.h	/^  static const int kMicroSecondsPerSecond = 1000 * 1000;$/;"	m	class:muduo::Timestamp
kMinCapacity_	string/StringEager.cc	/^const uint32_t muduo::StringEager::kMinCapacity_;$/;"	m	class:muduo::StringEager	file:
kMinCapacity_	string/StringEager.h	/^  static const size_type kMinCapacity_ = 15;$/;"	m	class:muduo::StringEager
kMinInterval	java/bankqueue/Bank.java	/^    private static final int kMinInterval = 0;$/;"	f	class:Bank	file:
kMinServiceTime	java/bankqueue/customer/CustomerFactory.java	/^    private static final int kMinServiceTime = 30; \/\/ half a minute$/;"	f	class:CustomerFactory	file:
kMonthsOfYear	datetime/Date_unittest.cc	/^const int kMonthsOfYear = 12;$/;"	v
kNew	reactor/s13/EPoller.cc	/^const int kNew = -1;$/;"	m	namespace:__anon9	file:
kNoneEvent	reactor/s01/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s01/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s02/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s02/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s03/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s03/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s04/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s04/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s05/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s05/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s06/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s06/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s07/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s07/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s08/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s08/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s09/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s09/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s10/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s10/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s11/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s11/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s12/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s12/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNoneEvent	reactor/s13/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kNoneEvent	reactor/s13/Channel.h	/^  static const int kNoneEvent;$/;"	m	class:muduo::Channel
kNormal	java/bankqueue/WindowType.java	/^    kNormal, kFast, kVip, kNumWindows$/;"	e	enum:WindowType	file:
kNormal	java/bankqueue/customer/CustomerType.java	/^    kNormal, kFast, kVip$/;"	e	enum:CustomerType	file:
kNormal	java/billing/DataFields.java	/^        kNormal,$/;"	e	enum:DataFields.UserType	file:
kNormalUserInternet	java/billing/DataFields.java	/^        kNormalUserInternet,$/;"	e	enum:DataFields.PackageType	file:
kNormalUserPhoneCall	java/billing/DataFields.java	/^        kNormalUserPhoneCall,$/;"	e	enum:DataFields.PackageType	file:
kNormalUserShortMessage	java/billing/DataFields.java	/^        kNormalUserShortMessage,$/;"	e	enum:DataFields.PackageType	file:
kNumWindows	java/bankqueue/WindowType.java	/^    kNormal, kFast, kVip, kNumWindows$/;"	e	enum:WindowType	file:
kOffset	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    static final float kOffset = Float.parseFloat(System.getProperty("Offset", "0"));$/;"	f	class:PdfHack
kOne	puzzle/Einstein.java	/^    static final IntVar kOne = new IntVar(store, 1, 1);$/;"	f	class:Einstein
kPackages	java/billing/DataFields.java	/^        kPackages,$/;"	e	enum:DataFields.UserField	file:
kPhoneCall	java/billing/DataFields.java	/^        kPhoneCall,$/;"	e	enum:DataFields.SlipType	file:
kPipsPerCent	java/billing/Money.java	/^    public static final long kPipsPerCent = 100;$/;"	f	class:Money
kPipsPerYuan	java/billing/Money.java	/^    public static final long kPipsPerYuan = kPipsPerCent * kCentsPerYuan;$/;"	f	class:Money
kPollTimeMs	reactor/s01/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s02/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s03/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s04/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s05/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s06/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s07/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s08/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s09/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s10/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s11/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s12/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kPollTimeMs	reactor/s13/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	v
kReadEvent	reactor/s01/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s01/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s02/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s02/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s03/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s03/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s04/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s04/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s05/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s05/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s06/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s06/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s07/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s07/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s08/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s08/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s09/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s09/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s10/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s10/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s11/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s11/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s12/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s12/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kReadEvent	reactor/s13/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kReadEvent	reactor/s13/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::Channel
kRecordSize	esort/sort00.cc	/^const int kRecordSize = 100;$/;"	v
kRecordSize	esort/sort01.cc	/^const int kRecordSize = 100;$/;"	v
kRecordSize	esort/sort02.cc	/^const int kRecordSize = 100;$/;"	v
kRecordSize	esort/sort03.cc	/^const int kRecordSize = 100;$/;"	v
kRecordSize	esort/sort04.cc	/^const int kRecordSize = 100;$/;"	v
kRequests	protorpc/echo/EchoClient.java	/^    static final int kRequests = 50000;$/;"	f	class:EchoClient
kResolveBufSize	tpc/InetAddress.cc	/^static const int kResolveBufSize = 4096; \/\/ RFC6891: EDNS payload 4096 bytes$/;"	v	file:
kRollPerSeconds_	logging/LogFile.h	/^  const static int kRollPerSeconds_ = 60*60*24;$/;"	m	class:muduo::LogFile
kRollSize	logging/AsyncLogging_test.cc	/^int kRollSize = 500*1000*1000;$/;"	v
kRow	sudoku/sudoku_dancing_links.cc	/^const int kRow = 100, kCol = 200, kBox = 300;$/;"	v
kRows	puzzle/huarong.cc	/^const int kRows = 5;$/;"	v
kSecondsPerDay	datetime/TimeZone.cc	/^const int kSecondsPerDay = 24*60*60;$/;"	m	namespace:muduo	file:
kShortMessage	java/billing/DataFields.java	/^        kShortMessage,$/;"	e	enum:DataFields.SlipType	file:
kSingle	puzzle/huarong.cc	/^  kSingle,$/;"	m	class:Shape	file:
kSlips	java/billing/DataFields.java	/^        kSlips,$/;"	e	enum:DataFields.UserField	file:
kSmallBuffer	logging/LogStream.h	/^const int kSmallBuffer = 4000;$/;"	m	namespace:muduo::detail
kSquare	puzzle/huarong.cc	/^  kSquare,$/;"	m	class:Shape	file:
kTextHeight	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    static final float kTextHeight = Float.parseFloat(System.getProperty("TextWidth", "590"));$/;"	f	class:PdfHack
kTextWidth	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    static final float kTextWidth = Float.parseFloat(System.getProperty("TextWidth", "370"));$/;"	f	class:PdfHack
kUTF8	utility/cwc.cc	/^  kUnknown, kUnicode, kGBK, kUTF8,$/;"	e	enum:Encoding	file:
kUnicode	utility/cwc.cc	/^  kUnknown, kUnicode, kGBK, kUTF8,$/;"	e	enum:Encoding	file:
kUnknown	utility/cwc.cc	/^  kUnknown, kUnicode, kGBK, kUTF8,$/;"	e	enum:Encoding	file:
kUseReadLine	esort/sort01.cc	/^const bool kUseReadLine = false;$/;"	v
kUseReadLine	esort/sort02.cc	/^const bool kUseReadLine = false;$/;"	v
kUseReadLine	esort/sort03.cc	/^const bool kUseReadLine = false;$/;"	v
kUseReadLine	esort/sort04.cc	/^const bool kUseReadLine = false;$/;"	v
kUserType	java/billing/DataFields.java	/^        kUserType,$/;"	e	enum:DataFields.UserField	file:
kVertical	puzzle/huarong.cc	/^  kVertical,$/;"	m	class:Shape	file:
kVip	java/bankqueue/WindowType.java	/^    kNormal, kFast, kVip, kNumWindows$/;"	e	enum:WindowType	file:
kVip	java/bankqueue/customer/CustomerType.java	/^    kNormal, kFast, kVip$/;"	e	enum:CustomerType	file:
kVip	java/billing/DataFields.java	/^        kVip;$/;"	e	enum:DataFields.UserType	file:
kVipUserPackage1	java/billing/DataFields.java	/^        kVipUserPackage1,$/;"	e	enum:DataFields.PackageType	file:
kVipUserPackage2	java/billing/DataFields.java	/^        kVipUserPackage2,$/;"	e	enum:DataFields.PackageType	file:
kWriteEvent	reactor/s01/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s01/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s02/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s02/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s03/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s03/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s04/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s04/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s05/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s05/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s06/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s06/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s07/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s07/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s08/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s08/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s09/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s09/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s10/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s10/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s11/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s11/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s12/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s12/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
kWriteEvent	reactor/s13/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
kWriteEvent	reactor/s13/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::Channel
key	esort/sort01.cc	/^  char key[kKeySize];$/;"	m	struct:Key	file:
key	esort/sort02.cc	/^  char key[kKeySize];$/;"	m	struct:Key	file:
key	esort/sort03.cc	/^  char key[kKeySize];$/;"	m	struct:Key	file:
key	esort/sort04.cc	/^  char key[kKeySize];$/;"	m	struct:Key	file:
key	thread/test/Factory.cc	/^  const string& key() const { return name_; }$/;"	f	class:Stock
keys_	esort/sort03.cc	/^  std::vector<Key> keys_;$/;"	m	class:Task	file:
keys_	esort/sort04.cc	/^  std::vector<Key> keys_;$/;"	m	class:Task	file:
kind	puzzle/poker/poker.py	/^def kind(n, ranks):$/;"	f
knownTypes	protorpc/muduo/codec/ProtobufDecoder.java	/^    private Map<String, Message> knownTypes = new HashMap<String, Message>();$/;"	f	class:ProtobufDecoder	file:
last	esort/sort10.cc	/^  int first, last;$/;"	m	struct:Source	file:
last	esort/sort11.cc	/^  int first, last;$/;"	m	struct:Source	file:
last	esort/sort12.cc	/^  int first, last;$/;"	m	struct:Source	file:
lastFlush_	logging/LogFile.h	/^  time_t lastFlush_;$/;"	m	class:muduo::LogFile
lastModified	java/billing/RuleFactory.java	/^        public final long lastModified;$/;"	f	class:RuleFactory.CachedRule
lastRoll_	logging/LogFile.h	/^  time_t lastRoll_;$/;"	m	class:muduo::LogFile
latch_	logging/AsyncLoggingDoubleBuffering.h	/^  muduo::CountDownLatch latch_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
latch_	logging/AsyncLoggingQueue.h	/^  muduo::CountDownLatch latch_;$/;"	m	class:muduo::AsyncLoggingT
latch_	thread/test/BlockingQueue_test.cc	/^  muduo::CountDownLatch latch_;$/;"	m	class:Test	file:
latch_	thread/test/BoundedBlockingQueue_test.cc	/^  muduo::CountDownLatch latch_;$/;"	m	class:Test	file:
leave	java/bankqueue/Bank.java	/^    public void leave(int now, Customer customer, WindowType type) {$/;"	m	class:Bank
left	puzzle/dance.cc	/^    Node* left;$/;"	m	struct:Node	file:
left	puzzle/huarong.cc	/^  int left, top;  \/\/ int8_t$/;"	m	struct:Block	file:
left	sudoku/sudoku_dancing_links.cc	/^    Node* left;$/;"	m	struct:Node	file:
len_	logging/LogStream.h	/^  const size_t len_;$/;"	m	class:muduo::T
len_	string/StringTrivial.h	/^    : data_(rhs.data_), len_(rhs.len_)$/;"	f	class:trivial2::String
len_	string/StringTrivial.h	/^  size_t len_;$/;"	m	class:trivial2::String
length	logging/AsyncLoggingQueue.h	/^  int length() const { return length_; }$/;"	f	struct:muduo::LogMessage
length	logging/LogStream.h	/^  int length() const { return cur_ - data_; }$/;"	f	class:muduo::detail::FixedBuffer
length	logging/LogStream.h	/^  int length() const { return length_; }$/;"	f	class:muduo::Fmt
length	string/StringEager.h	/^  size_type length() const { return size_; }$/;"	f	class:muduo::StringEager
length	tpc/ttcp.cc	/^  int length;$/;"	m	struct:Options	file:
length	tpc/ttcp.cc	/^  int32_t length;$/;"	m	struct:PayloadMessage	file:
length	tpc/ttcp.cc	/^  int32_t length;$/;"	m	struct:SessionMessage	file:
length_	logging/AsyncLoggingQueue.h	/^  size_t length_;$/;"	m	struct:muduo::LogMessage
length_	logging/LogStream.h	/^  int length_;$/;"	m	class:muduo::Fmt
lessThan	basic/uint.h	/^  bool lessThan(const UnsignedInt& x) const$/;"	f	class:UnsignedInt
lessThan	string/StringEager.cc	/^bool StringEager::lessThan(const char* str, size_t strsize) const$/;"	f	class:StringEager
level_	logging/Logging.h	/^  LogLevel level_;$/;"	m	class:muduo::Logger::Impl
limbs_	basic/uint.h	/^  value_type limbs_;$/;"	m	class:UnsignedInt
line_	logging/Logging.h	/^  int line_;$/;"	m	class:muduo::Logger::Impl
linearFibonacci	basic/fibonacci.cc	/^std::string linearFibonacci(int N)$/;"	f
listen	reactor/s04/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s04/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s05/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s05/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s06/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s06/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s07/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s07/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s08/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s08/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s09/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s09/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s10/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s10/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s11/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s11/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s12/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s12/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listen	reactor/s13/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
listen	reactor/s13/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
listenOrDie	reactor/s04/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s05/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s06/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s07/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s08/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s09/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s10/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s11/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s12/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	reactor/s13/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
listenOrDie	tpc/Socket.cc	/^void Socket::listenOrDie()$/;"	f	class:Socket
listenSock_	tpc/Acceptor.h	/^  Socket listenSock_;$/;"	m	class:Acceptor
listen_address	python/echo-fork.py	/^    listen_address = ("0.0.0.0", 2007)$/;"	v	class:EchoHandler
listen_address	python/echo-iterative.py	/^    listen_address = ("0.0.0.0", 2007)$/;"	v
listen_address	python/echo-single.py	/^    listen_address = ("0.0.0.0", 2007)$/;"	v	class:EchoHandler
listen_address	python/echo-thread.py	/^    listen_address = ("0.0.0.0", 2007)$/;"	v	class:EchoHandler
listen_port	python/tcprelay.py	/^listen_port = 3007$/;"	v
listenning	reactor/s04/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s05/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s06/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s07/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s08/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s09/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s10/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s11/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s12/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning	reactor/s13/Acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:muduo::Acceptor
listenning_	reactor/s04/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s05/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s06/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s07/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s08/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s09/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s10/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s11/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s12/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
listenning_	reactor/s13/Acceptor.h	/^  bool listenning_;$/;"	m	class:muduo::Acceptor
loadGroovy	java/billing/RuleFactory.java	/^    private CachedRule loadGroovy(File file) {$/;"	m	class:RuleFactory	file:
local	datetime/TimeZone_unittest.cc	/^  const char* local;$/;"	m	struct:TestCase	file:
localAddr_	reactor/s05/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddr_	reactor/s06/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddr_	reactor/s07/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddr_	reactor/s08/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddr_	reactor/s09/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddr_	reactor/s10/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddr_	reactor/s11/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddr_	reactor/s12/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddr_	reactor/s13/TcpConnection.h	/^  InetAddress localAddr_;$/;"	m	class:muduo::TcpConnection
localAddress	reactor/s05/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localAddress	reactor/s06/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localAddress	reactor/s07/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localAddress	reactor/s08/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localAddress	reactor/s09/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localAddress	reactor/s10/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localAddress	reactor/s11/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localAddress	reactor/s12/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localAddress	reactor/s13/TcpConnection.h	/^  const InetAddress& localAddress() { return localAddr_; }$/;"	f	class:muduo::TcpConnection
localtime	datetime/TimeZone.cc	/^  time_t localtime;$/;"	m	struct:muduo::detail::Transition	file:
localtimeIdx	datetime/TimeZone.cc	/^  int localtimeIdx;$/;"	m	struct:muduo::detail::Transition	file:
localtimes	datetime/TimeZone.cc	/^  vector<detail::Localtime> localtimes;$/;"	m	struct:TimeZone::Data	file:
lock	thread/Mutex.h	/^  void lock()$/;"	f	class:muduo::MutexLock
logLevel	logging/Logging.cc	/^Logger::LogLevel Logger::logLevel()$/;"	f	class:Logger
loop	reactor/s00/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s01/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s02/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s03/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s04/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s05/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s06/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s07/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s08/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s09/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s10/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s11/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s12/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop	reactor/s13/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
loop_	reactor/s01/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s02/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s02/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s03/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s03/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s03/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s04/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s04/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s04/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s04/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s05/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s05/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s05/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s05/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s05/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s05/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s06/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s06/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s06/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s06/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s06/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s06/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s07/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s07/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s07/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s07/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s07/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s07/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s08/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s08/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s08/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s08/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s08/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s08/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s09/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s09/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s09/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s09/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s09/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s09/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s10/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s10/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s10/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s10/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s10/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s10/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s11/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s11/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s11/Connector.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Connector
loop_	reactor/s11/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s11/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s11/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s11/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s12/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s12/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s12/Connector.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Connector
loop_	reactor/s12/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s12/TcpClient.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpClient
loop_	reactor/s12/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s12/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s12/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
loop_	reactor/s13/Acceptor.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Acceptor
loop_	reactor/s13/Channel.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Channel
loop_	reactor/s13/Connector.h	/^  EventLoop* loop_;$/;"	m	class:muduo::Connector
loop_	reactor/s13/EventLoopThread.h	/^  EventLoop* loop_;$/;"	m	class:muduo::EventLoopThread
loop_	reactor/s13/TcpClient.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpClient
loop_	reactor/s13/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TcpConnection
loop_	reactor/s13/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop$/;"	m	class:muduo::TcpServer
loop_	reactor/s13/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::TimerQueue
looping_	reactor/s00/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s01/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s02/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s03/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s04/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s05/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s06/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s07/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s08/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s09/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s10/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s11/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s12/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
looping_	reactor/s13/EventLoop.h	/^  bool looping_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
loops_	reactor/s10/EventLoopThreadPool.h	/^  std::vector<EventLoop*> loops_;$/;"	m	class:muduo::EventLoopThreadPool
loops_	reactor/s11/EventLoopThreadPool.h	/^  std::vector<EventLoop*> loops_;$/;"	m	class:muduo::EventLoopThreadPool
loops_	reactor/s12/EventLoopThreadPool.h	/^  std::vector<EventLoop*> loops_;$/;"	m	class:muduo::EventLoopThreadPool
loops_	reactor/s13/EventLoopThreadPool.h	/^  std::vector<EventLoop*> loops_;$/;"	m	class:muduo::EventLoopThreadPool
low	basic/int128.h	/^  uint64_t low, high;$/;"	m	struct:uint128
magnitude	puzzle/nbody.cc	/^inline double magnitude(const Vector3& vec)$/;"	f
magnitude_squared	puzzle/nbody.cc	/^inline double magnitude_squared(const Vector3& vec)$/;"	f
main	algorithm/combination.cc	/^int main()$/;"	f
main	algorithm/iprange.cc	/^int main()$/;"	f
main	algorithm/mergeN.cc	/^int main()$/;"	f
main	algorithm/partition.cc	/^int main()$/;"	f
main	algorithm/permutation.cc	/^int main()$/;"	f
main	algorithm/permutation2.cc	/^int main()$/;"	f
main	algorithm/removeContinuousSpaces.cc	/^int main()$/;"	f
main	algorithm/select.cc	/^int main()$/;"	f
main	basic/bench.cc	/^int main()$/;"	f
main	basic/combination.cc	/^int main(int argc, char* argv[])$/;"	f
main	basic/counted_ptr_test.cc	/^int main()$/;"	f
main	basic/factorial.cc	/^int main(int argc, char* argv[])$/;"	f
main	basic/fibonacci.cc	/^int main(int argc, char* argv[])$/;"	f
main	basic/partitions.cc	/^int main(int argc, char* argv[])$/;"	f
main	basic/tutorial/factorial.cc	/^int main()$/;"	f
main	basic/tutorial/sieve.cc	/^int main(int argc, char* argv[])$/;"	f
main	datetime/Date_test.cc	/^int main(int argc, char* argv[])$/;"	f
main	datetime/Date_unittest.cc	/^int main()$/;"	f
main	datetime/TimeZone_dump.cc	/^int main(int argc, char* argv[])$/;"	f
main	datetime/TimeZone_unittest.cc	/^int main()$/;"	f
main	datetime/Timestamp_unittest.cc	/^int main()$/;"	f
main	datetime/time_benchmark.c	/^int main(int argc, char* argv[])$/;"	f
main	esort/sort00.cc	/^int main(int argc, char* argv[])$/;"	f
main	esort/sort01.cc	/^int main(int argc, char* argv[])$/;"	f
main	esort/sort02.cc	/^int main(int argc, char* argv[])$/;"	f
main	esort/sort03.cc	/^int main(int argc, char* argv[])$/;"	f
main	esort/sort04.cc	/^int main(int argc, char* argv[])$/;"	f
main	esort/sort10.cc	/^int main(int argc, char* argv[])$/;"	f
main	esort/sort11.cc	/^int main(int argc, char* argv[])$/;"	f
main	esort/sort12.cc	/^int main(int argc, char* argv[])$/;"	f
main	faketcp/acceptall.cc	/^int main()$/;"	f
main	faketcp/connectmany.cc	/^int main(int argc, char* argv[])$/;"	f
main	faketcp/discardall.cc	/^int main()$/;"	f
main	faketcp/discardall2.cc	/^int main()$/;"	f
main	faketcp/echoall.cc	/^int main()$/;"	f
main	faketcp/echoall2.cc	/^int main()$/;"	f
main	faketcp/icmpecho.cc	/^int main()$/;"	f
main	faketcp/rejectall.cc	/^int main()$/;"	f
main	java/bankqueue/Bank.java	/^    public static void main(String[] args) throws Exception {$/;"	m	class:Bank
main	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    public static void main(String[] args) {$/;"	m	class:PdfHack
main	logging/AsyncLogging_test.cc	/^int main(int argc, char* argv[])$/;"	f
main	logging/LogFile_test.cc	/^int main(int argc, char* argv[])$/;"	f
main	logging/LogStream_bench.cc	/^int main()$/;"	f
main	logging/Logging_test.cc	/^int main()$/;"	f
main	pingpong/asio/client.cpp	/^int main(int argc, char* argv[])$/;"	f
main	pingpong/asio/server.cpp	/^int main(int argc, char* argv[])$/;"	f
main	pingpong/libevent/bench.c	/^main(int argc, char **argv)$/;"	f
main	pingpong/libevent/client.c	/^int main(int argc, char **argv)$/;"	f
main	pingpong/libevent/server-half-close.c	/^int main(int argc, char **argv)$/;"	f
main	pingpong/libevent/server-line-echo.c	/^int main(int argc, char **argv)$/;"	f
main	pingpong/libevent/server.c	/^int main(int argc, char **argv)$/;"	f
main	protobuf/codec_test.cc	/^int main()$/;"	f
main	protobuf/descriptor_test.cc	/^int main()$/;"	f
main	protobuf/dispatcher.cc	/^int main()$/;"	f
main	protobuf/dispatcher_lite.cc	/^int main()$/;"	f
main	protorpc/echo/EchoClient.java	/^    public static void main(String[] args) throws Exception {$/;"	m	class:EchoClient
main	protorpc/echo/EchoServer.java	/^    public static void main(String[] args) {$/;"	m	class:EchoServer
main	protorpc/sudoku/Client.java	/^    public static void main(String[] args) throws Exception {$/;"	m	class:Client
main	protorpc/sudoku/Server.java	/^    public static void main(String[] args) {$/;"	m	class:Server
main	puzzle/Einstein.java	/^    public static void main(String[] args) throws Exception {$/;"	m	class:Einstein
main	puzzle/buysell.cc	/^int main()$/;"	f
main	puzzle/dance.cc	/^int main()$/;"	f
main	puzzle/huarong.cc	/^int main()$/;"	f
main	puzzle/latin_square.cc	/^int main(int argc, char* argv[])$/;"	f
main	puzzle/nbody.c	/^int main(int argc, char ** argv)$/;"	f
main	puzzle/nbody.cc	/^int main(int argc, char * * argv)$/;"	f
main	puzzle/nqueens.cc	/^int main(int argc, char* argv[])$/;"	f
main	puzzle/nqueens_mt.cc	/^int main(int argc, char* argv[])$/;"	f
main	puzzle/nqueens_opt.cc	/^int main(int argc, char* argv[])$/;"	f
main	puzzle/nqueens_opt_mt.cc	/^int main(int argc, char* argv[])$/;"	f
main	puzzle/poker/poker.cc	/^int main()$/;"	f
main	puzzle/query_freq.cc	/^int main(int argc, char* argv[])$/;"	f
main	puzzle/typoglycemia.cc	/^int main()$/;"	f
main	puzzle/waterpour.cc	/^int main(int argc, char* argv[])$/;"	f
main	python/chargen.py	/^def main(argv):$/;"	f
main	python/netcat-nonblock.py	/^def main(argv):$/;"	f
main	python/netcat.py	/^def main(argv):$/;"	f
main	reactor/s00/test1.cc	/^int main()$/;"	f
main	reactor/s00/test2.cc	/^int main()$/;"	f
main	reactor/s01/test1.cc	/^int main()$/;"	f
main	reactor/s01/test2.cc	/^int main()$/;"	f
main	reactor/s01/test3.cc	/^int main()$/;"	f
main	reactor/s02/test1.cc	/^int main()$/;"	f
main	reactor/s02/test2.cc	/^int main()$/;"	f
main	reactor/s02/test3.cc	/^int main()$/;"	f
main	reactor/s02/test4.cc	/^int main()$/;"	f
main	reactor/s03/test1.cc	/^int main()$/;"	f
main	reactor/s03/test2.cc	/^int main()$/;"	f
main	reactor/s03/test3.cc	/^int main()$/;"	f
main	reactor/s03/test4.cc	/^int main()$/;"	f
main	reactor/s03/test5.cc	/^int main()$/;"	f
main	reactor/s03/test6.cc	/^int main()$/;"	f
main	reactor/s04/test1.cc	/^int main()$/;"	f
main	reactor/s04/test2.cc	/^int main()$/;"	f
main	reactor/s04/test3.cc	/^int main()$/;"	f
main	reactor/s04/test4.cc	/^int main()$/;"	f
main	reactor/s04/test5.cc	/^int main()$/;"	f
main	reactor/s04/test6.cc	/^int main()$/;"	f
main	reactor/s04/test7.cc	/^int main()$/;"	f
main	reactor/s05/test1.cc	/^int main()$/;"	f
main	reactor/s05/test2.cc	/^int main()$/;"	f
main	reactor/s05/test3.cc	/^int main()$/;"	f
main	reactor/s05/test4.cc	/^int main()$/;"	f
main	reactor/s05/test5.cc	/^int main()$/;"	f
main	reactor/s05/test6.cc	/^int main()$/;"	f
main	reactor/s05/test7.cc	/^int main()$/;"	f
main	reactor/s05/test8.cc	/^int main()$/;"	f
main	reactor/s06/test1.cc	/^int main()$/;"	f
main	reactor/s06/test2.cc	/^int main()$/;"	f
main	reactor/s06/test3.cc	/^int main()$/;"	f
main	reactor/s06/test4.cc	/^int main()$/;"	f
main	reactor/s06/test5.cc	/^int main()$/;"	f
main	reactor/s06/test6.cc	/^int main()$/;"	f
main	reactor/s06/test7.cc	/^int main()$/;"	f
main	reactor/s06/test8.cc	/^int main()$/;"	f
main	reactor/s07/test1.cc	/^int main()$/;"	f
main	reactor/s07/test2.cc	/^int main()$/;"	f
main	reactor/s07/test3.cc	/^int main()$/;"	f
main	reactor/s07/test4.cc	/^int main()$/;"	f
main	reactor/s07/test5.cc	/^int main()$/;"	f
main	reactor/s07/test6.cc	/^int main()$/;"	f
main	reactor/s07/test7.cc	/^int main()$/;"	f
main	reactor/s07/test8.cc	/^int main()$/;"	f
main	reactor/s08/test1.cc	/^int main()$/;"	f
main	reactor/s08/test10.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s08/test2.cc	/^int main()$/;"	f
main	reactor/s08/test3.cc	/^int main()$/;"	f
main	reactor/s08/test4.cc	/^int main()$/;"	f
main	reactor/s08/test5.cc	/^int main()$/;"	f
main	reactor/s08/test6.cc	/^int main()$/;"	f
main	reactor/s08/test7.cc	/^int main()$/;"	f
main	reactor/s08/test8.cc	/^int main()$/;"	f
main	reactor/s08/test9.cc	/^int main()$/;"	f
main	reactor/s09/test1.cc	/^int main()$/;"	f
main	reactor/s09/test10.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s09/test11.cc	/^int main()$/;"	f
main	reactor/s09/test2.cc	/^int main()$/;"	f
main	reactor/s09/test3.cc	/^int main()$/;"	f
main	reactor/s09/test4.cc	/^int main()$/;"	f
main	reactor/s09/test5.cc	/^int main()$/;"	f
main	reactor/s09/test6.cc	/^int main()$/;"	f
main	reactor/s09/test7.cc	/^int main()$/;"	f
main	reactor/s09/test8.cc	/^int main()$/;"	f
main	reactor/s09/test9.cc	/^int main()$/;"	f
main	reactor/s10/test1.cc	/^int main()$/;"	f
main	reactor/s10/test10.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s10/test11.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s10/test2.cc	/^int main()$/;"	f
main	reactor/s10/test3.cc	/^int main()$/;"	f
main	reactor/s10/test4.cc	/^int main()$/;"	f
main	reactor/s10/test5.cc	/^int main()$/;"	f
main	reactor/s10/test6.cc	/^int main()$/;"	f
main	reactor/s10/test7.cc	/^int main()$/;"	f
main	reactor/s10/test8.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s10/test9.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s11/test1.cc	/^int main()$/;"	f
main	reactor/s11/test10.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s11/test11.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s11/test12.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s11/test2.cc	/^int main()$/;"	f
main	reactor/s11/test3.cc	/^int main()$/;"	f
main	reactor/s11/test4.cc	/^int main()$/;"	f
main	reactor/s11/test5.cc	/^int main()$/;"	f
main	reactor/s11/test6.cc	/^int main()$/;"	f
main	reactor/s11/test7.cc	/^int main()$/;"	f
main	reactor/s11/test8.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s11/test9.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s12/test1.cc	/^int main()$/;"	f
main	reactor/s12/test10.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s12/test11.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s12/test12.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s12/test13.cc	/^int main()$/;"	f
main	reactor/s12/test2.cc	/^int main()$/;"	f
main	reactor/s12/test3.cc	/^int main()$/;"	f
main	reactor/s12/test4.cc	/^int main()$/;"	f
main	reactor/s12/test5.cc	/^int main()$/;"	f
main	reactor/s12/test6.cc	/^int main()$/;"	f
main	reactor/s12/test7.cc	/^int main()$/;"	f
main	reactor/s12/test8.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s12/test9.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s13/test1.cc	/^int main()$/;"	f
main	reactor/s13/test10.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s13/test11.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s13/test12.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s13/test13.cc	/^int main()$/;"	f
main	reactor/s13/test2.cc	/^int main()$/;"	f
main	reactor/s13/test3.cc	/^int main()$/;"	f
main	reactor/s13/test4.cc	/^int main()$/;"	f
main	reactor/s13/test5.cc	/^int main()$/;"	f
main	reactor/s13/test6.cc	/^int main()$/;"	f
main	reactor/s13/test7.cc	/^int main()$/;"	f
main	reactor/s13/test8.cc	/^int main(int argc, char* argv[])$/;"	f
main	reactor/s13/test9.cc	/^int main(int argc, char* argv[])$/;"	f
main	ssl/benchmark-openssl.cc	/^int main(int argc, char* argv[])$/;"	f
main	ssl/benchmark-polarssl.cc	/^int main(int argc, char* argv[])$/;"	f
main	ssl/loop-polarssl.cc	/^int main(int argc, char* argv[])$/;"	f
main	string/StringTrivialTest.cc	/^int main()$/;"	f
main	string/main.cc	/^int main()$/;"	f
main	sudoku/main.cc	/^int main(int argc, char* argv[])$/;"	f
main	thread/test/Atomic_unittest.cc	/^int main()$/;"	f
main	thread/test/BlockingQueue_test.cc	/^int main()$/;"	f
main	thread/test/BoundedBlockingQueue_test.cc	/^int main()$/;"	f
main	thread/test/CopyOnWrite_test.cc	/^int main()$/;"	f
main	thread/test/Counter.cc	/^int main()$/;"	f
main	thread/test/Customer.cc	/^int main()$/;"	f
main	thread/test/Exception_test.cc	/^int main()$/;"	f
main	thread/test/ExitDeadLock.cc	/^int main()$/;"	f
main	thread/test/Factory.cc	/^int main()$/;"	f
main	thread/test/Fork_test.cc	/^int main()$/;"	f
main	thread/test/MutualDeadLock.cc	/^int main()$/;"	f
main	thread/test/NonRecursiveMutex_test.cc	/^int main()$/;"	f
main	thread/test/Observer.cc	/^int main()$/;"	f
main	thread/test/Observer_safe.cc	/^int main()$/;"	f
main	thread/test/RequestInventory_test.cc	/^int main()$/;"	f
main	thread/test/RequestInventory_test2.cc	/^int main()$/;"	f
main	thread/test/SelfDeadLock.cc	/^int main()$/;"	f
main	thread/test/SingletonThreadLocal_test.cc	/^int main()$/;"	f
main	thread/test/Singleton_test.cc	/^int main()$/;"	f
main	thread/test/ThreadLocalSingleton_test.cc	/^int main()$/;"	f
main	thread/test/ThreadLocal_test.cc	/^int main()$/;"	f
main	thread/test/ThreadPool_test.cc	/^int main()$/;"	f
main	thread/test/Thread_test.cc	/^int main()$/;"	f
main	thread/test/Waiter_test.cc	/^int main(int argc, char* argv[])$/;"	f
main	thread/test/destruct.cc	/^int main()$/;"	f
main	topk/merger.cc	/^int main(int argc, char* argv[])$/;"	f
main	topk/sender.cc	/^int main(int argc, char* argv[])$/;"	f
main	tpc/chargen.cc	/^int main(int argc, char* argv[])$/;"	f
main	tpc/discard.cc	/^int main(int argc, char* argv[])$/;"	f
main	tpc/echo.cc	/^int main(int argc, char* argv[])$/;"	f
main	tpc/echo_client.cc	/^int main(int argc, const char* argv[])$/;"	f
main	tpc/netcat.cc	/^int main(int argc, const char* argv[])$/;"	f
main	tpc/nodelay.cc	/^int main(int argc, char* argv[])$/;"	f
main	tpc/nodelay_server.cc	/^int main(int argc, char* argv[])$/;"	f
main	tpc/roundtrip_udp.cc	/^int main(int argc, const char* argv[])$/;"	f
main	tpc/sender.cc	/^int main(int argc, char* argv[])$/;"	f
main	tpc/ttcp.cc	/^int main(int argc, char* argv[])$/;"	f
main	utility/cwc.cc	/^int main(int argc, char* argv[])$/;"	f
makeSpace	reactor/s07/Buffer.h	/^  void makeSpace(size_t len)$/;"	f	class:muduo::Buffer
makeSpace	reactor/s08/Buffer.h	/^  void makeSpace(size_t len)$/;"	f	class:muduo::Buffer
makeSpace	reactor/s09/Buffer.h	/^  void makeSpace(size_t len)$/;"	f	class:muduo::Buffer
makeSpace	reactor/s10/Buffer.h	/^  void makeSpace(size_t len)$/;"	f	class:muduo::Buffer
makeSpace	reactor/s11/Buffer.h	/^  void makeSpace(size_t len)$/;"	f	class:muduo::Buffer
makeSpace	reactor/s12/Buffer.h	/^  void makeSpace(size_t len)$/;"	f	class:muduo::Buffer
makeSpace	reactor/s13/Buffer.h	/^  void makeSpace(size_t len)$/;"	f	class:muduo::Buffer
makeWeakCallback	thread/WeakCallback.h	/^WeakCallback<CLASS, ARGS...> makeWeakCallback(const std::shared_ptr<CLASS>& object,$/;"	f	namespace:muduo
make_custom_alloc_handler	pingpong/asio/handler_allocator.hpp	/^inline custom_alloc_handler<Handler> make_custom_alloc_handler($/;"	f
mark_adjacent	sudoku/neighbor.cc	/^static void mark_adjacent(bool adjacent[ROW][COL], int row, int col)$/;"	f	file:
mask	puzzle/huarong.cc	/^inline void Block::mask(int8_t value, Mask* mask) const$/;"	f	class:Block
mask	puzzle/nqueens_opt_mt.cc	/^  const uint32_t mask;$/;"	m	struct:BackTracking	file:
mass	puzzle/nbody.c	/^  double mass;$/;"	m	struct:planet	file:
mass	puzzle/nbody.cc	/^  const double mass;$/;"	m	struct:Planet	file:
max1	puzzle/poker/bench.py	/^	max1 = max(generate.gen(5))$/;"	v
max2	puzzle/poker/bench.py	/^	max2 = max(generate.gen(5), key=poker.score)$/;"	v
max3	puzzle/poker/bench.py	/^	max3 = max(generate.gen(5), key=poker2.score2)$/;"	v
max_size	string/StringEager.h	/^  size_type max_size() const { return 1 << 30; }$/;"	f	class:muduo::StringEager
maybeForceBuilderInitialization	protorpc/echo/EchoProto.java	/^      private void maybeForceBuilderInitialization() {$/;"	m	class:EchoProto.EchoRequest.Builder	file:
maybeForceBuilderInitialization	protorpc/echo/EchoProto.java	/^      private void maybeForceBuilderInitialization() {$/;"	m	class:EchoProto.EchoResponse.Builder	file:
maybeForceBuilderInitialization	protorpc/muduo/codec/tests/QueryProtos.java	/^      private void maybeForceBuilderInitialization() {$/;"	m	class:QueryProtos.Answer.Builder	file:
maybeForceBuilderInitialization	protorpc/muduo/codec/tests/QueryProtos.java	/^      private void maybeForceBuilderInitialization() {$/;"	m	class:QueryProtos.Empty.Builder	file:
maybeForceBuilderInitialization	protorpc/muduo/codec/tests/QueryProtos.java	/^      private void maybeForceBuilderInitialization() {$/;"	m	class:QueryProtos.Query.Builder	file:
maybeForceBuilderInitialization	protorpc/muduo/rpc/proto/RpcProto.java	/^      private void maybeForceBuilderInitialization() {$/;"	m	class:RpcProto.RpcMessage.Builder	file:
maybeForceBuilderInitialization	protorpc/sudoku/Sudoku.java	/^      private void maybeForceBuilderInitialization() {$/;"	m	class:Sudoku.SudokuRequest.Builder	file:
maybeForceBuilderInitialization	protorpc/sudoku/Sudoku.java	/^      private void maybeForceBuilderInitialization() {$/;"	m	class:Sudoku.SudokuResponse.Builder	file:
measure	tpc/chargen.cc	/^void measure()$/;"	f
measure	tpc/discard.cc	/^void measure()$/;"	f
memberFunc	thread/test/Thread_test.cc	/^  void memberFunc()$/;"	f	class:Foo
memberFunc2	thread/test/Thread_test.cc	/^  void memberFunc2(const std::string& text)$/;"	f	class:Foo
memoizedIsInitialized	protorpc/echo/EchoProto.java	/^    private byte memoizedIsInitialized = -1;$/;"	f	class:EchoProto.EchoRequest	file:
memoizedIsInitialized	protorpc/echo/EchoProto.java	/^    private byte memoizedIsInitialized = -1;$/;"	f	class:EchoProto.EchoResponse	file:
memoizedIsInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^    private byte memoizedIsInitialized = -1;$/;"	f	class:QueryProtos.Answer	file:
memoizedIsInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^    private byte memoizedIsInitialized = -1;$/;"	f	class:QueryProtos.Empty	file:
memoizedIsInitialized	protorpc/muduo/codec/tests/QueryProtos.java	/^    private byte memoizedIsInitialized = -1;$/;"	f	class:QueryProtos.Query	file:
memoizedIsInitialized	protorpc/muduo/rpc/proto/RpcProto.java	/^    private byte memoizedIsInitialized = -1;$/;"	f	class:RpcProto.RpcMessage	file:
memoizedIsInitialized	protorpc/sudoku/Sudoku.java	/^    private byte memoizedIsInitialized = -1;$/;"	f	class:Sudoku.SudokuRequest	file:
memoizedIsInitialized	protorpc/sudoku/Sudoku.java	/^    private byte memoizedIsInitialized = -1;$/;"	f	class:Sudoku.SudokuResponse	file:
memoizedSerializedSize	protorpc/echo/EchoProto.java	/^    private int memoizedSerializedSize = -1;$/;"	f	class:EchoProto.EchoRequest	file:
memoizedSerializedSize	protorpc/echo/EchoProto.java	/^    private int memoizedSerializedSize = -1;$/;"	f	class:EchoProto.EchoResponse	file:
memoizedSerializedSize	protorpc/muduo/codec/tests/QueryProtos.java	/^    private int memoizedSerializedSize = -1;$/;"	f	class:QueryProtos.Answer	file:
memoizedSerializedSize	protorpc/muduo/codec/tests/QueryProtos.java	/^    private int memoizedSerializedSize = -1;$/;"	f	class:QueryProtos.Empty	file:
memoizedSerializedSize	protorpc/muduo/codec/tests/QueryProtos.java	/^    private int memoizedSerializedSize = -1;$/;"	f	class:QueryProtos.Query	file:
memoizedSerializedSize	protorpc/muduo/rpc/proto/RpcProto.java	/^    private int memoizedSerializedSize = -1;$/;"	f	class:RpcProto.RpcMessage	file:
memoizedSerializedSize	protorpc/sudoku/Sudoku.java	/^    private int memoizedSerializedSize = -1;$/;"	f	class:Sudoku.SudokuRequest	file:
memoizedSerializedSize	protorpc/sudoku/Sudoku.java	/^    private int memoizedSerializedSize = -1;$/;"	f	class:Sudoku.SudokuResponse	file:
merge	esort/sort02.cc	/^void merge(const int batch)$/;"	f
merge	esort/sort03.cc	/^void merge(const int batch)$/;"	f
merge	esort/sort04.cc	/^void merge(const int batch)$/;"	f
merge	esort/sort10.cc	/^void merge(const std::vector<int64_t>& data, const int kChunkSize)$/;"	f
merge	esort/sort11.cc	/^void merge(const std::vector<int64_t>& data, const int kChunkSize)$/;"	f
merge	esort/sort12.cc	/^void merge(const std::vector<ElementType>& data, const int kChunkSize)$/;"	f
merge	puzzle/query_freq.cc	/^void merge(const int nbuckets)$/;"	f
mergeFrom	protorpc/echo/EchoProto.java	/^      public Builder mergeFrom($/;"	m	class:EchoProto.EchoRequest.Builder
mergeFrom	protorpc/echo/EchoProto.java	/^      public Builder mergeFrom($/;"	m	class:EchoProto.EchoResponse.Builder
mergeFrom	protorpc/echo/EchoProto.java	/^      public Builder mergeFrom(com.google.protobuf.Message other) {$/;"	m	class:EchoProto.EchoRequest.Builder
mergeFrom	protorpc/echo/EchoProto.java	/^      public Builder mergeFrom(com.google.protobuf.Message other) {$/;"	m	class:EchoProto.EchoResponse.Builder
mergeFrom	protorpc/echo/EchoProto.java	/^      public Builder mergeFrom(echo.EchoProto.EchoRequest other) {$/;"	m	class:EchoProto.EchoRequest.Builder
mergeFrom	protorpc/echo/EchoProto.java	/^      public Builder mergeFrom(echo.EchoProto.EchoResponse other) {$/;"	m	class:EchoProto.EchoResponse.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom($/;"	m	class:QueryProtos.Answer.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom($/;"	m	class:QueryProtos.Empty.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom($/;"	m	class:QueryProtos.Query.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom(com.google.protobuf.Message other) {$/;"	m	class:QueryProtos.Answer.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom(com.google.protobuf.Message other) {$/;"	m	class:QueryProtos.Empty.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom(com.google.protobuf.Message other) {$/;"	m	class:QueryProtos.Query.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom(muduo.codec.tests.QueryProtos.Answer other) {$/;"	m	class:QueryProtos.Answer.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom(muduo.codec.tests.QueryProtos.Empty other) {$/;"	m	class:QueryProtos.Empty.Builder
mergeFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder mergeFrom(muduo.codec.tests.QueryProtos.Query other) {$/;"	m	class:QueryProtos.Query.Builder
mergeFrom	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder mergeFrom($/;"	m	class:RpcProto.RpcMessage.Builder
mergeFrom	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder mergeFrom(com.google.protobuf.Message other) {$/;"	m	class:RpcProto.RpcMessage.Builder
mergeFrom	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder mergeFrom(muduo.rpc.proto.RpcProto.RpcMessage other) {$/;"	m	class:RpcProto.RpcMessage.Builder
mergeFrom	protorpc/sudoku/Sudoku.java	/^      public Builder mergeFrom($/;"	m	class:Sudoku.SudokuRequest.Builder
mergeFrom	protorpc/sudoku/Sudoku.java	/^      public Builder mergeFrom($/;"	m	class:Sudoku.SudokuResponse.Builder
mergeFrom	protorpc/sudoku/Sudoku.java	/^      public Builder mergeFrom(com.google.protobuf.Message other) {$/;"	m	class:Sudoku.SudokuRequest.Builder
mergeFrom	protorpc/sudoku/Sudoku.java	/^      public Builder mergeFrom(com.google.protobuf.Message other) {$/;"	m	class:Sudoku.SudokuResponse.Builder
mergeFrom	protorpc/sudoku/Sudoku.java	/^      public Builder mergeFrom(sudoku.Sudoku.SudokuRequest other) {$/;"	m	class:Sudoku.SudokuRequest.Builder
mergeFrom	protorpc/sudoku/Sudoku.java	/^      public Builder mergeFrom(sudoku.Sudoku.SudokuResponse other) {$/;"	m	class:Sudoku.SudokuResponse.Builder
mergeN	algorithm/mergeN.cc	/^File mergeN(const std::vector<File>& files)$/;"	f
message	protorpc/muduo/rpc/test/MockChannel.java	/^    Object message;$/;"	f	class:MockChannel
message	reactor/s09/test11.cc	/^std::string message;$/;"	v
message	reactor/s10/test11.cc	/^std::string message;$/;"	v
message	reactor/s11/test11.cc	/^std::string message;$/;"	v
message	reactor/s12/test11.cc	/^std::string message;$/;"	v
message	reactor/s12/test13.cc	/^std::string message = "Hello\\n";$/;"	v
message	reactor/s13/test11.cc	/^std::string message;$/;"	v
message	reactor/s13/test13.cc	/^std::string message = "Hello\\n";$/;"	v
message1	reactor/s08/test10.cc	/^std::string message1;$/;"	v
message1	reactor/s09/test10.cc	/^std::string message1;$/;"	v
message1	reactor/s10/test10.cc	/^std::string message1;$/;"	v
message1	reactor/s11/test10.cc	/^std::string message1;$/;"	v
message1	reactor/s12/test10.cc	/^std::string message1;$/;"	v
message1	reactor/s13/test10.cc	/^std::string message1;$/;"	v
message2	reactor/s08/test10.cc	/^std::string message2;$/;"	v
message2	reactor/s09/test10.cc	/^std::string message2;$/;"	v
message2	reactor/s10/test10.cc	/^std::string message2;$/;"	v
message2	reactor/s11/test10.cc	/^std::string message2;$/;"	v
message2	reactor/s12/test10.cc	/^std::string message2;$/;"	v
message2	reactor/s13/test10.cc	/^std::string message2;$/;"	v
messageCallback_	reactor/s05/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s05/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageCallback_	reactor/s06/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s06/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageCallback_	reactor/s07/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s07/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageCallback_	reactor/s08/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s08/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageCallback_	reactor/s09/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s09/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageCallback_	reactor/s10/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s10/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageCallback_	reactor/s11/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s11/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageCallback_	reactor/s12/TcpClient.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpClient
messageCallback_	reactor/s12/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s12/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageCallback_	reactor/s13/TcpClient.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpClient
messageCallback_	reactor/s13/TcpConnection.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpConnection
messageCallback_	reactor/s13/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::TcpServer
messageReceived	protorpc/muduo/rpc/RpcChannel.java	/^    public void messageReceived(ChannelHandlerContext ctx, final MessageEvent e) {$/;"	m	class:RpcChannel
messageReceived	protorpc/muduo/rpc/RpcMessageHandler.java	/^    public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {$/;"	m	class:RpcMessageHandler
message_	thread/Exception.h	/^  std::string message_;$/;"	m	class:muduo::Exception
method_	protorpc/muduo/rpc/proto/RpcProto.java	/^      private Object method_ = "";$/;"	f	class:RpcProto.RpcMessage.Builder	file:
method_	protorpc/muduo/rpc/proto/RpcProto.java	/^    private Object method_;$/;"	f	class:RpcProto.RpcMessage	file:
microSecondsSinceEpoch	datetime/Timestamp.h	/^  int64_t microSecondsSinceEpoch() const { return microSecondsSinceEpoch_; }$/;"	f	class:muduo::Timestamp
microSecondsSinceEpoch_	datetime/Timestamp.h	/^  int64_t microSecondsSinceEpoch_;$/;"	m	class:muduo::Timestamp
month	datetime/Date.h	/^    int month;  \/\/ [1..12]$/;"	m	struct:muduo::Date::YearMonthDay
month	datetime/Date.h	/^  int month() const$/;"	f	class:muduo::Date
more	thread/test/Singleton_test.cc	/^  void more()$/;"	f	class:Destruct
more	thread/test/Singleton_test.cc	/^void Destruct<0>::more()$/;"	f	class:Destruct
move	puzzle/huarong.cc	/^  void move(const FUNC& func) const$/;"	f	struct:State
moveOddsBeforeEvens	algorithm/partition.cc	/^void moveOddsBeforeEvens()$/;"	f
muduo	datetime/Date.h	/^namespace muduo$/;"	n
muduo	datetime/TimeZone.cc	/^namespace muduo$/;"	n	file:
muduo	datetime/TimeZone.h	/^namespace muduo$/;"	n
muduo	datetime/Timestamp.h	/^namespace muduo$/;"	n
muduo	datetime/copyable.h	/^namespace muduo$/;"	n
muduo	logging/AsyncLoggingDoubleBuffering.h	/^namespace muduo$/;"	n
muduo	logging/AsyncLoggingQueue.h	/^namespace muduo$/;"	n
muduo	logging/LogFile.h	/^namespace muduo$/;"	n
muduo	logging/LogStream.cc	/^namespace muduo$/;"	n	file:
muduo	logging/LogStream.h	/^namespace muduo$/;"	n
muduo	logging/Logging.cc	/^namespace muduo$/;"	n	file:
muduo	logging/Logging.h	/^namespace muduo$/;"	n
muduo	reactor/s00/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s01/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s01/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s01/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s02/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s02/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s02/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s02/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s02/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s02/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s02/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s02/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s03/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s03/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s03/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s03/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s03/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s03/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s03/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s03/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s03/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s04/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s04/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s04/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s04/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s04/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s04/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s04/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s04/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s04/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s04/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s04/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s04/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s04/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s05/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s05/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s05/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s05/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s05/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s05/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s05/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s05/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s05/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s05/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s05/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s05/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s05/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s05/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s05/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s06/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s06/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s06/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s06/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s06/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s06/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s06/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s06/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s06/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s06/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s06/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s06/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s06/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s06/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s06/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s07/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s07/Buffer.h	/^namespace muduo$/;"	n
muduo	reactor/s07/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s07/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s07/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s07/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s07/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s07/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s07/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s07/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s07/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s07/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s07/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s07/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s07/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s07/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s08/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s08/Buffer.h	/^namespace muduo$/;"	n
muduo	reactor/s08/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s08/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s08/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s08/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s08/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s08/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s08/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s08/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s08/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s08/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s08/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s08/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s08/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s08/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s09/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s09/Buffer.h	/^namespace muduo$/;"	n
muduo	reactor/s09/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s09/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s09/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s09/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s09/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s09/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s09/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s09/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s09/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s09/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s09/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s09/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s09/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s09/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s10/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s10/Buffer.h	/^namespace muduo$/;"	n
muduo	reactor/s10/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s10/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s10/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s10/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s10/EventLoopThreadPool.h	/^namespace muduo$/;"	n
muduo	reactor/s10/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s10/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s10/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s10/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s10/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s10/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s10/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s10/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s10/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s10/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s11/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s11/Buffer.h	/^namespace muduo$/;"	n
muduo	reactor/s11/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s11/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s11/Connector.h	/^namespace muduo$/;"	n
muduo	reactor/s11/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s11/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s11/EventLoopThreadPool.h	/^namespace muduo$/;"	n
muduo	reactor/s11/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s11/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s11/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s11/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s11/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s11/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s11/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s11/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s11/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s11/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s12/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s12/Buffer.h	/^namespace muduo$/;"	n
muduo	reactor/s12/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s12/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s12/Connector.h	/^namespace muduo$/;"	n
muduo	reactor/s12/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s12/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s12/EventLoopThreadPool.h	/^namespace muduo$/;"	n
muduo	reactor/s12/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s12/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s12/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s12/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s12/TcpClient.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s12/TcpClient.h	/^namespace muduo$/;"	n
muduo	reactor/s12/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s12/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s12/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s12/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s12/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s12/TimerQueue.h	/^namespace muduo$/;"	n
muduo	reactor/s13/Acceptor.h	/^namespace muduo$/;"	n
muduo	reactor/s13/Buffer.h	/^namespace muduo$/;"	n
muduo	reactor/s13/Callbacks.h	/^namespace muduo$/;"	n
muduo	reactor/s13/Channel.h	/^namespace muduo$/;"	n
muduo	reactor/s13/Connector.h	/^namespace muduo$/;"	n
muduo	reactor/s13/EPoller.h	/^namespace muduo$/;"	n
muduo	reactor/s13/EventLoop.h	/^namespace muduo$/;"	n
muduo	reactor/s13/EventLoopThread.h	/^namespace muduo$/;"	n
muduo	reactor/s13/EventLoopThreadPool.h	/^namespace muduo$/;"	n
muduo	reactor/s13/InetAddress.h	/^namespace muduo$/;"	n
muduo	reactor/s13/Poller.h	/^namespace muduo$/;"	n
muduo	reactor/s13/Socket.h	/^namespace muduo$/;"	n
muduo	reactor/s13/SocketsOps.h	/^namespace muduo$/;"	n
muduo	reactor/s13/TcpClient.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s13/TcpClient.h	/^namespace muduo$/;"	n
muduo	reactor/s13/TcpConnection.h	/^namespace muduo$/;"	n
muduo	reactor/s13/TcpServer.h	/^namespace muduo$/;"	n
muduo	reactor/s13/Timer.h	/^namespace muduo$/;"	n
muduo	reactor/s13/TimerId.h	/^namespace muduo$/;"	n
muduo	reactor/s13/TimerQueue.cc	/^namespace muduo$/;"	n	file:
muduo	reactor/s13/TimerQueue.h	/^namespace muduo$/;"	n
muduo	string/StringEager.h	/^namespace muduo$/;"	n
muduo	string/StringSso.h	/^namespace muduo$/;"	n
muduo	thread/Atomic.h	/^namespace muduo$/;"	n
muduo	thread/BlockingQueue.h	/^namespace muduo$/;"	n
muduo	thread/BoundedBlockingQueue.h	/^namespace muduo$/;"	n
muduo	thread/Condition.h	/^namespace muduo$/;"	n
muduo	thread/CountDownLatch.h	/^namespace muduo$/;"	n
muduo	thread/Exception.h	/^namespace muduo$/;"	n
muduo	thread/Mutex.h	/^namespace muduo$/;"	n
muduo	thread/SignalSlot.h	/^namespace muduo$/;"	n
muduo	thread/Singleton.h	/^namespace muduo$/;"	n
muduo	thread/Thread.cc	/^namespace muduo$/;"	n	file:
muduo	thread/Thread.h	/^namespace muduo$/;"	n
muduo	thread/ThreadLocal.h	/^namespace muduo$/;"	n
muduo	thread/ThreadLocalSingleton.h	/^namespace muduo$/;"	n
muduo	thread/ThreadPool.h	/^namespace muduo$/;"	n
muduo	thread/WeakCallback.h	/^namespace muduo$/;"	n
muduo.codec	protorpc/muduo/codec/ProtobufDecoder.java	/^package muduo.codec;$/;"	p
muduo.codec	protorpc/muduo/codec/ProtobufEncoder.java	/^package muduo.codec;$/;"	p
muduo.codec.tests	protorpc/muduo/codec/tests/CodecTest.java	/^package muduo.codec.tests;$/;"	p
muduo.codec.tests	protorpc/muduo/codec/tests/QueryProtos.java	/^package muduo.codec.tests;$/;"	p
muduo.rpc	protorpc/muduo/rpc/NewChannelCallback.java	/^package muduo.rpc;$/;"	p
muduo.rpc	protorpc/muduo/rpc/RpcChannel.java	/^package muduo.rpc;$/;"	p
muduo.rpc	protorpc/muduo/rpc/RpcChannelPiplineFactory.java	/^package muduo.rpc;$/;"	p
muduo.rpc	protorpc/muduo/rpc/RpcClient.java	/^package muduo.rpc;$/;"	p
muduo.rpc	protorpc/muduo/rpc/RpcDecoder.java	/^package muduo.rpc;$/;"	p
muduo.rpc	protorpc/muduo/rpc/RpcEncoder.java	/^package muduo.rpc;$/;"	p
muduo.rpc	protorpc/muduo/rpc/RpcMessageHandler.java	/^package muduo.rpc;$/;"	p
muduo.rpc	protorpc/muduo/rpc/RpcPeer.java	/^package muduo.rpc;$/;"	p
muduo.rpc	protorpc/muduo/rpc/RpcServer.java	/^package muduo.rpc;$/;"	p
muduo.rpc.proto	protorpc/muduo/rpc/proto/RpcProto.java	/^package muduo.rpc.proto;$/;"	p
muduo.rpc.test	protorpc/muduo/rpc/test/MockChannel.java	/^package muduo.rpc.test;$/;"	p
muduo.rpc.test	protorpc/muduo/rpc/test/RpcTest.java	/^package muduo.rpc.test;$/;"	p
multiply	basic/int128.h	/^  uint128& multiply(uint128 rhs) \/\/ __attribute__ ((noinline))$/;"	f	struct:uint128
multiply	basic/int128.h	/^  uint128& multiply(uint64_t rhs)$/;"	f	struct:uint128
multiply	basic/uint.h	/^  void multiply(const UnsignedInt& x)$/;"	f	class:UnsignedInt
multiply	basic/uint.h	/^  void multiply(const uint32_t x)$/;"	f	class:UnsignedInt
multiply128	basic/int128.h	/^  static uint128 multiply128(uint64_t x, uint64_t y) \/\/ __attribute__ ((noinline))$/;"	f	struct:uint128
mutex	thread/test/CopyOnWrite_test.cc	/^MutexLock mutex;$/;"	v
mutex	thread/test/NonRecursiveMutex_test.cc	/^MutexLock mutex;$/;"	v
mutex_	logging/AsyncLoggingDoubleBuffering.h	/^  muduo::MutexLock mutex_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
mutex_	logging/LogFile.h	/^  boost::scoped_ptr<MutexLock> mutex_;$/;"	m	class:muduo::LogFile
mutex_	pingpong/asio/client.cpp	/^  asio::detail::mutex mutex_;$/;"	m	class:stats	file:
mutex_	reactor/s03/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s03/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s04/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s04/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s05/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s05/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s06/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s06/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s07/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s07/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s08/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s08/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s09/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s09/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s10/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s10/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s11/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s11/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s12/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s12/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s12/TcpClient.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::TcpClient
mutex_	reactor/s13/EventLoop.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoop
mutex_	reactor/s13/EventLoopThread.h	/^  MutexLock mutex_;$/;"	m	class:muduo::EventLoopThread
mutex_	reactor/s13/TcpClient.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::TcpClient
mutex_	thread/BlockingQueue.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::BlockingQueue
mutex_	thread/BoundedBlockingQueue.h	/^  mutable MutexLock          mutex_;$/;"	m	class:muduo::BoundedBlockingQueue
mutex_	thread/Condition.h	/^  MutexLock& mutex_;$/;"	m	class:muduo::Condition
mutex_	thread/CountDownLatch.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::CountDownLatch
mutex_	thread/Mutex.h	/^  MutexLock& mutex_;$/;"	m	class:muduo::MutexLockGuard
mutex_	thread/Mutex.h	/^  pthread_mutex_t mutex_;$/;"	m	class:muduo::MutexLock
mutex_	thread/SignalSlot.h	/^  MutexLock mutex_;$/;"	m	struct:muduo::detail::SignalImpl
mutex_	thread/ThreadPool.h	/^  MutexLock mutex_;$/;"	m	class:muduo::ThreadPool
mutex_	thread/test/Counter.cc	/^  mutable MutexLock mutex_;$/;"	m	class:Counter	file:
mutex_	thread/test/Customer.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:CustomerData	file:
mutex_	thread/test/ExitDeadLock.cc	/^  MutexLock mutex_;$/;"	m	class:GlobalObject	file:
mutex_	thread/test/Factory.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:StockFactory	file:
mutex_	thread/test/Factory.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:version1::StockFactory	file:
mutex_	thread/test/Factory.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:version2::StockFactory	file:
mutex_	thread/test/Factory.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:version3::StockFactory	file:
mutex_	thread/test/Factory.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:version4::StockFactory	file:
mutex_	thread/test/MutualDeadLock.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:Inventory	file:
mutex_	thread/test/MutualDeadLock.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:Request	file:
mutex_	thread/test/Observer_safe.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:Observable	file:
mutex_	thread/test/RequestInventory_test.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:Inventory	file:
mutex_	thread/test/RequestInventory_test.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:Request	file:
mutex_	thread/test/RequestInventory_test2.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:Inventory	file:
mutex_	thread/test/RequestInventory_test2.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:Request	file:
mutex_	thread/test/SelfDeadLock.cc	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:Request	file:
mutex_	thread/test/Waiter_test.cc	/^  muduo::MutexLock mutex_;$/;"	m	class:WaiterInMuduo	file:
mutex_	thread/test/Waiter_test.cc	/^  pthread_mutex_t mutex_;$/;"	m	class:Waiter	file:
nPipelines	protorpc/echo/EchoClient.java	/^        private int nPipelines = 1;$/;"	f	class:EchoClient.AsyncClient	file:
name	java/billing/DefaultRule.java	/^    private final String name;$/;"	f	class:DefaultRule	file:
name	puzzle/dance.cc	/^    const char* name;$/;"	m	struct:Node	file:
name	reactor/s05/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	reactor/s06/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	reactor/s07/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	reactor/s08/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	reactor/s09/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	reactor/s10/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	reactor/s11/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	reactor/s12/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	reactor/s13/TcpConnection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::TcpConnection
name	sudoku/sudoku_dancing_links.cc	/^    int name;$/;"	m	struct:Node	file:
name	thread/Thread.cc	/^const char* CurrentThread::name()$/;"	f	class:CurrentThread
name	thread/Thread.h	/^  const std::string& name() const { return name_; }$/;"	f	class:muduo::Thread
name	thread/test/SingletonThreadLocal_test.cc	/^  const std::string& name() const { return name_; }$/;"	f	class:Test
name	thread/test/Singleton_test.cc	/^  const std::string& name() const { return name_; }$/;"	f	class:Test
name	thread/test/ThreadLocalSingleton_test.cc	/^  const std::string& name() const { return name_; }$/;"	f	class:Test
name	thread/test/ThreadLocal_test.cc	/^  const std::string& name() const { return name_; }$/;"	f	class:Test
name_	reactor/s05/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s05/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	reactor/s06/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s06/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	reactor/s07/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s07/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	reactor/s08/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s08/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	reactor/s09/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s09/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	reactor/s10/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s10/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	reactor/s11/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s11/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	reactor/s12/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s12/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	reactor/s13/TcpConnection.h	/^  std::string name_;$/;"	m	class:muduo::TcpConnection
name_	reactor/s13/TcpServer.h	/^  const std::string name_;$/;"	m	class:muduo::TcpServer
name_	thread/Thread.cc	/^  std::string name_;$/;"	m	struct:__anon4::ThreadData	file:
name_	thread/Thread.h	/^  std::string name_;$/;"	m	class:muduo::Thread
name_	thread/ThreadPool.h	/^  std::string name_;$/;"	m	class:muduo::ThreadPool
name_	thread/test/Factory.cc	/^  string name_;$/;"	m	class:Stock	file:
name_	thread/test/SingletonThreadLocal_test.cc	/^  std::string name_;$/;"	m	class:Test	file:
name_	thread/test/Singleton_test.cc	/^  std::string name_;$/;"	m	class:Test	file:
name_	thread/test/ThreadLocalSingleton_test.cc	/^  std::string name_;$/;"	m	class:Test	file:
name_	thread/test/ThreadLocal_test.cc	/^  std::string name_;$/;"	m	class:Test	file:
names	datetime/TimeZone.cc	/^  vector<string> names;$/;"	m	struct:TimeZone::Data	file:
neighbors	sudoku/neighbor.cc	/^int neighbors[N][NEIGHBOR];$/;"	v
net_recv	ssl/benchmark-polarssl.cc	/^int net_recv(void* ctx, unsigned char* buf, size_t len)$/;"	f
net_send	ssl/benchmark-polarssl.cc	/^int net_send(void* ctx, const unsigned char* buf, size_t len)$/;"	f
networkToHost16	reactor/s04/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s05/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s06/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s07/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s08/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s09/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s10/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s11/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s12/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost16	reactor/s13/SocketsOps.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s04/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s05/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s06/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s07/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s08/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s09/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s10/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s11/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s12/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost32	reactor/s13/SocketsOps.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s04/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s05/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s06/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s07/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s08/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s09/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s10/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s11/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s12/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
networkToHost64	reactor/s13/SocketsOps.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::sockets
newBlockingStub	protorpc/echo/EchoProto.java	/^    public static BlockingInterface newBlockingStub($/;"	m	class:EchoProto.EchoService
newBlockingStub	protorpc/sudoku/Sudoku.java	/^    public static BlockingInterface newBlockingStub($/;"	m	class:Sudoku.SudokuService
newBuilder	protorpc/echo/EchoProto.java	/^    public static Builder newBuilder() { return Builder.create(); }$/;"	m	class:EchoProto.EchoRequest
newBuilder	protorpc/echo/EchoProto.java	/^    public static Builder newBuilder() { return Builder.create(); }$/;"	m	class:EchoProto.EchoResponse
newBuilder	protorpc/echo/EchoProto.java	/^    public static Builder newBuilder(echo.EchoProto.EchoRequest prototype) {$/;"	m	class:EchoProto.EchoRequest
newBuilder	protorpc/echo/EchoProto.java	/^    public static Builder newBuilder(echo.EchoProto.EchoResponse prototype) {$/;"	m	class:EchoProto.EchoResponse
newBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Builder newBuilder() { return Builder.create(); }$/;"	m	class:QueryProtos.Answer
newBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Builder newBuilder() { return Builder.create(); }$/;"	m	class:QueryProtos.Empty
newBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Builder newBuilder() { return Builder.create(); }$/;"	m	class:QueryProtos.Query
newBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Builder newBuilder(muduo.codec.tests.QueryProtos.Answer prototype) {$/;"	m	class:QueryProtos.Answer
newBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Builder newBuilder(muduo.codec.tests.QueryProtos.Empty prototype) {$/;"	m	class:QueryProtos.Empty
newBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static Builder newBuilder(muduo.codec.tests.QueryProtos.Query prototype) {$/;"	m	class:QueryProtos.Query
newBuilder	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static Builder newBuilder() { return Builder.create(); }$/;"	m	class:RpcProto.RpcMessage
newBuilder	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static Builder newBuilder(muduo.rpc.proto.RpcProto.RpcMessage prototype) {$/;"	m	class:RpcProto.RpcMessage
newBuilder	protorpc/sudoku/Sudoku.java	/^    public static Builder newBuilder() { return Builder.create(); }$/;"	m	class:Sudoku.SudokuRequest
newBuilder	protorpc/sudoku/Sudoku.java	/^    public static Builder newBuilder() { return Builder.create(); }$/;"	m	class:Sudoku.SudokuResponse
newBuilder	protorpc/sudoku/Sudoku.java	/^    public static Builder newBuilder(sudoku.Sudoku.SudokuRequest prototype) {$/;"	m	class:Sudoku.SudokuRequest
newBuilder	protorpc/sudoku/Sudoku.java	/^    public static Builder newBuilder(sudoku.Sudoku.SudokuResponse prototype) {$/;"	m	class:Sudoku.SudokuResponse
newBuilderForType	protorpc/echo/EchoProto.java	/^    protected Builder newBuilderForType($/;"	m	class:EchoProto.EchoRequest
newBuilderForType	protorpc/echo/EchoProto.java	/^    protected Builder newBuilderForType($/;"	m	class:EchoProto.EchoResponse
newBuilderForType	protorpc/echo/EchoProto.java	/^    public Builder newBuilderForType() { return newBuilder(); }$/;"	m	class:EchoProto.EchoRequest
newBuilderForType	protorpc/echo/EchoProto.java	/^    public Builder newBuilderForType() { return newBuilder(); }$/;"	m	class:EchoProto.EchoResponse
newBuilderForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    protected Builder newBuilderForType($/;"	m	class:QueryProtos.Answer
newBuilderForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    protected Builder newBuilderForType($/;"	m	class:QueryProtos.Empty
newBuilderForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    protected Builder newBuilderForType($/;"	m	class:QueryProtos.Query
newBuilderForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Builder newBuilderForType() { return newBuilder(); }$/;"	m	class:QueryProtos.Answer
newBuilderForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Builder newBuilderForType() { return newBuilder(); }$/;"	m	class:QueryProtos.Empty
newBuilderForType	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Builder newBuilderForType() { return newBuilder(); }$/;"	m	class:QueryProtos.Query
newBuilderForType	protorpc/muduo/rpc/proto/RpcProto.java	/^    protected Builder newBuilderForType($/;"	m	class:RpcProto.RpcMessage
newBuilderForType	protorpc/muduo/rpc/proto/RpcProto.java	/^    public Builder newBuilderForType() { return newBuilder(); }$/;"	m	class:RpcProto.RpcMessage
newBuilderForType	protorpc/sudoku/Sudoku.java	/^    protected Builder newBuilderForType($/;"	m	class:Sudoku.SudokuRequest
newBuilderForType	protorpc/sudoku/Sudoku.java	/^    protected Builder newBuilderForType($/;"	m	class:Sudoku.SudokuResponse
newBuilderForType	protorpc/sudoku/Sudoku.java	/^    public Builder newBuilderForType() { return newBuilder(); }$/;"	m	class:Sudoku.SudokuRequest
newBuilderForType	protorpc/sudoku/Sudoku.java	/^    public Builder newBuilderForType() { return newBuilder(); }$/;"	m	class:Sudoku.SudokuResponse
newChannelCallback	protorpc/muduo/rpc/RpcPeer.java	/^    protected NewChannelCallback newChannelCallback;$/;"	f	class:RpcPeer
newConnection	reactor/s04/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s05/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s05/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s06/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s06/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s07/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s07/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s08/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s08/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s09/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s09/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s10/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s10/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s11/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s11/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s12/TcpClient.cc	/^void TcpClient::newConnection(int sockfd)$/;"	f	class:TcpClient
newConnection	reactor/s12/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s12/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnection	reactor/s13/TcpClient.cc	/^void TcpClient::newConnection(int sockfd)$/;"	f	class:TcpClient
newConnection	reactor/s13/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
newConnection	reactor/s13/test7.cc	/^void newConnection(int sockfd, const muduo::InetAddress& peerAddr)$/;"	f
newConnectionCallback_	reactor/s04/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s05/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s06/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s07/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s08/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s09/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s10/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s11/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s11/Connector.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Connector
newConnectionCallback_	reactor/s12/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s12/Connector.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Connector
newConnectionCallback_	reactor/s13/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Acceptor
newConnectionCallback_	reactor/s13/Connector.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::Connector
newCustomer	java/bankqueue/customer/CustomerFactory.java	/^    public static Customer newCustomer(int id, Random r) {$/;"	m	class:CustomerFactory
newReflectiveBlockingService	protorpc/echo/EchoProto.java	/^        newReflectiveBlockingService(final BlockingInterface impl) {$/;"	m	class:EchoProto.EchoService
newReflectiveBlockingService	protorpc/sudoku/Sudoku.java	/^        newReflectiveBlockingService(final BlockingInterface impl) {$/;"	m	class:Sudoku.SudokuService
newReflectiveService	protorpc/echo/EchoProto.java	/^    public static com.google.protobuf.Service newReflectiveService($/;"	m	class:EchoProto.EchoService
newReflectiveService	protorpc/sudoku/Sudoku.java	/^    public static com.google.protobuf.Service newReflectiveService($/;"	m	class:Sudoku.SudokuService
newStub	protorpc/echo/EchoProto.java	/^    public static Stub newStub($/;"	m	class:EchoProto.EchoService
newStub	protorpc/sudoku/Sudoku.java	/^    public static Stub newStub($/;"	m	class:Sudoku.SudokuService
new_column	puzzle/dance.cc	/^  Column* new_column(int n = 0)$/;"	f	struct:Dance
new_column	sudoku/sudoku_dancing_links.cc	/^    Column* new_column(int n = 0)$/;"	f	struct:Dance
new_row	puzzle/dance.cc	/^  Node* new_row(int col)$/;"	f	struct:Dance
new_row	sudoku/sudoku_dancing_links.cc	/^    Node* new_row(int col)$/;"	f	struct:Dance
next	algorithm/mergeN.cc	/^  bool next()$/;"	f	struct:Input
next	esort/sort02.cc	/^  bool next()$/;"	f	struct:Record
next	esort/sort03.cc	/^  bool next()$/;"	f	struct:Record
next	esort/sort04.cc	/^  bool next()$/;"	f	struct:Source
next	esort/sort10.cc	/^  bool next()$/;"	f	struct:Record
next	esort/sort11.cc	/^  bool next()$/;"	f	struct:Record
next	esort/sort12.cc	/^  bool next()$/;"	f	struct:Record
next	puzzle/query_freq.cc	/^  bool next()$/;"	f	class:Source
next	topk/merger.cc	/^  bool next()$/;"	f	class:Source
nextBuffer_	logging/AsyncLoggingDoubleBuffering.h	/^  BufferPtr nextBuffer_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
nextCapacity	string/StringEager.cc	/^uint32_t StringEager::nextCapacity(uint32_t newSize) const$/;"	f	class:StringEager
nextConnId_	reactor/s05/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
nextConnId_	reactor/s06/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
nextConnId_	reactor/s07/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
nextConnId_	reactor/s08/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
nextConnId_	reactor/s09/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
nextConnId_	reactor/s10/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
nextConnId_	reactor/s11/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
nextConnId_	reactor/s12/TcpClient.h	/^  int nextConnId_;$/;"	m	class:muduo::TcpClient
nextConnId_	reactor/s12/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
nextConnId_	reactor/s13/TcpClient.h	/^  int nextConnId_;$/;"	m	class:muduo::TcpClient
nextConnId_	reactor/s13/TcpServer.h	/^  int nextConnId_;  \/\/ always in loop thread$/;"	m	class:muduo::TcpServer
next_	reactor/s10/EventLoopThreadPool.h	/^  int next_;  \/\/ always in loop thread$/;"	m	class:muduo::EventLoopThreadPool
next_	reactor/s11/EventLoopThreadPool.h	/^  int next_;  \/\/ always in loop thread$/;"	m	class:muduo::EventLoopThreadPool
next_	reactor/s12/EventLoopThreadPool.h	/^  int next_;  \/\/ always in loop thread$/;"	m	class:muduo::EventLoopThreadPool
next_	reactor/s13/EventLoopThreadPool.h	/^  int next_;  \/\/ always in loop thread$/;"	m	class:muduo::EventLoopThreadPool
noCustomer	java/bankqueue/tests/BankTest.java	/^    public void noCustomer() {$/;"	m	class:BankTest
nodelay	tpc/ttcp.cc	/^  bool transmit, receive, nodelay;$/;"	m	struct:Options	file:
nodes_	puzzle/dance.cc	/^  Node    nodes_[kMaxNodes];$/;"	m	struct:Dance	file:
nodes_	sudoku/sudoku_dancing_links.cc	/^    Node    nodes_[kMaxNodes];$/;"	m	struct:Dance	file:
nonBlockingWrite	python/netcat-nonblock.py	/^def nonBlockingWrite(fd, data):$/;"	f
noncopyable	tpc/Common.h	/^  noncopyable() {}$/;"	f	class:noncopyable
noncopyable	tpc/Common.h	/^class noncopyable$/;"	c
notEmpty_	thread/BlockingQueue.h	/^  Condition         notEmpty_;$/;"	m	class:muduo::BlockingQueue
notEmpty_	thread/BoundedBlockingQueue.h	/^  Condition                  notEmpty_;$/;"	m	class:muduo::BoundedBlockingQueue
notFull_	thread/BoundedBlockingQueue.h	/^  Condition                  notFull_;$/;"	m	class:muduo::BoundedBlockingQueue
notify	thread/Condition.h	/^  void notify()$/;"	f	class:muduo::Condition
notifyAll	thread/Condition.h	/^  void notifyAll()$/;"	f	class:muduo::Condition
notifyObservers	thread/test/Observer.cc	/^  void notifyObservers()$/;"	f	class:Observable
notifyObservers	thread/test/Observer_safe.cc	/^  void notifyObservers()$/;"	f	class:Observable
now	basic/fibonacci.cc	/^double now()$/;"	f
now	datetime/Timestamp.cc	/^Timestamp Timestamp::now()$/;"	f	class:Timestamp
now	java/bankqueue/Bank.java	/^    private int now = 0;$/;"	f	class:Bank	file:
now	java/bankqueue/event/EventSimulator.java	/^    private int now = 0;$/;"	f	class:EventSimulator	file:
now	puzzle/nqueens.cc	/^double now()$/;"	f
now	puzzle/nqueens_mt.cc	/^double now()$/;"	f
now	puzzle/nqueens_opt.cc	/^double now()$/;"	f
now	puzzle/nqueens_opt_mt.cc	/^double now()$/;"	f
now	ssl/benchmark-openssl.cc	/^double now()$/;"	f
now	ssl/benchmark-polarssl.cc	/^double now()$/;"	f
now	ssl/loop-polarssl.cc	/^double now()$/;"	f
now	sudoku/main.cc	/^int64_t now()$/;"	f
now	tpc/nodelay.cc	/^double now()$/;"	f
now	tpc/nodelay_server.cc	/^double now()$/;"	f
now	tpc/roundtrip_udp.cc	/^int64_t now()$/;"	f
now	tpc/ttcp.cc	/^double now()$/;"	f
npos	string/StringEager.h	/^  static const size_type npos = static_cast<size_type>(-1);$/;"	m	class:muduo::StringEager
npos	string/StringSso.h	/^  static const size_type npos = -1;$/;"	m	class:muduo::StringSso
nspaces	sudoku/sudoku_basic.cc	/^int nspaces;$/;"	v
numCreated	thread/Thread.h	/^  static int numCreated() { return numCreated_.get(); }$/;"	f	class:muduo::Thread
numCreated_	thread/Thread.cc	/^AtomicInt32 Thread::numCreated_;$/;"	m	class:Thread	file:
numCreated_	thread/Thread.h	/^  static AtomicInt32 numCreated_;$/;"	m	class:muduo::Thread
numEventsCreated	java/bankqueue/event/Event.java	/^    private static AtomicInteger numEventsCreated = new AtomicInteger();$/;"	f	class:Event	file:
numThreads_	reactor/s10/EventLoopThreadPool.h	/^  int numThreads_;$/;"	m	class:muduo::EventLoopThreadPool
numThreads_	reactor/s11/EventLoopThreadPool.h	/^  int numThreads_;$/;"	m	class:muduo::EventLoopThreadPool
numThreads_	reactor/s12/EventLoopThreadPool.h	/^  int numThreads_;$/;"	m	class:muduo::EventLoopThreadPool
numThreads_	reactor/s13/EventLoopThreadPool.h	/^  int numThreads_;$/;"	m	class:muduo::EventLoopThreadPool
num_active	pingpong/libevent/bench.c	/^static int num_pipes, num_active, num_writes;$/;"	v	file:
num_pipes	pingpong/libevent/bench.c	/^static int num_pipes, num_active, num_writes;$/;"	v	file:
num_writes	pingpong/libevent/bench.c	/^static int num_pipes, num_active, num_writes;$/;"	v	file:
number	tpc/ttcp.cc	/^  int number;$/;"	m	struct:Options	file:
number	tpc/ttcp.cc	/^  int32_t number;$/;"	m	struct:SessionMessage	file:
number_of_bodies	puzzle/nbody.cc	/^unsigned int const number_of_bodies = 5;$/;"	v
object_	thread/WeakCallback.h	/^  std::weak_ptr<CLASS> object_;$/;"	m	class:muduo::WeakCallback
observe	thread/test/Observer.cc	/^void Observer::observe(Observable* s)$/;"	f	class:Observer
observe	thread/test/Observer_safe.cc	/^void Observer::observe(Observable* s)$/;"	f	class:Observer
observers_	thread/test/Observer.cc	/^  std::vector<Observer*> observers_;$/;"	m	class:Observable	file:
observers_	thread/test/Observer_safe.cc	/^  std::vector<boost::weak_ptr<Observer> > observers_;$/;"	m	class:Observable	file:
occupied	sudoku/sudoku_min_arity_cache.cc	/^static bool occupied[N][NUM+1];$/;"	v	file:
offset_momentum	puzzle/nbody.c	/^void offset_momentum(int nbodies, struct planet * bodies)$/;"	f
offset_momentum	puzzle/nbody.cc	/^void offset_momentum()$/;"	f
onAnswer	protobuf/dispatcher.cc	/^void onAnswer(muduo::Answer* answer)$/;"	f
onAnswer	protobuf/dispatcher_lite.cc	/^void onAnswer(google::protobuf::Message* message)$/;"	f
onConnection	reactor/s05/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s06/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s07/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s08/test10.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s08/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s08/test9.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s09/test10.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s09/test11.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s09/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s09/test9.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s10/test10.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s10/test11.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s10/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s10/test9.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s11/test10.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s11/test11.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s11/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s11/test9.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s12/test10.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s12/test11.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s12/test13.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s12/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s12/test9.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s13/test10.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s13/test11.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s13/test13.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s13/test8.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	reactor/s13/test9.cc	/^void onConnection(const muduo::TcpConnectionPtr& conn)$/;"	f
onConnection	topk/sender.cc	/^void onConnection(const TcpConnectionPtr& conn)$/;"	f
onMessage	protobuf/dispatcher.cc	/^  virtual void onMessage(google::protobuf::Message* message) const$/;"	f	class:CallbackT
onMessage	protobuf/dispatcher.cc	/^  void onMessage(google::protobuf::Message* message) const$/;"	f	class:ProtobufDispatcher
onMessage	protobuf/dispatcher_lite.cc	/^  void onMessage(google::protobuf::Message* message) const$/;"	f	class:ProtobufDispatcherLite
onMessage	reactor/s05/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s06/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s07/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s08/test10.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s08/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s08/test9.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s09/test10.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s09/test11.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s09/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s09/test9.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s10/test10.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s10/test11.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s10/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s10/test9.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s11/test10.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s11/test11.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s11/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s11/test9.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s12/test10.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s12/test11.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s12/test13.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s12/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s12/test9.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s13/test10.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s13/test11.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s13/test13.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s13/test8.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onMessage	reactor/s13/test9.cc	/^void onMessage(const muduo::TcpConnectionPtr& conn,$/;"	f
onQuery	protobuf/dispatcher.cc	/^void onQuery(muduo::Query* query)$/;"	f
onQuery	protobuf/dispatcher_lite.cc	/^void onQuery(google::protobuf::Message* message)$/;"	f
onUnknownMessageType	protobuf/dispatcher_lite.cc	/^void onUnknownMessageType(google::protobuf::Message* message)$/;"	f
onWriteComplete	reactor/s09/test11.cc	/^void onWriteComplete(const muduo::TcpConnectionPtr& conn)$/;"	f
onWriteComplete	reactor/s10/test11.cc	/^void onWriteComplete(const muduo::TcpConnectionPtr& conn)$/;"	f
onWriteComplete	reactor/s11/test11.cc	/^void onWriteComplete(const muduo::TcpConnectionPtr& conn)$/;"	f
onWriteComplete	reactor/s12/test11.cc	/^void onWriteComplete(const muduo::TcpConnectionPtr& conn)$/;"	f
onWriteComplete	reactor/s13/test11.cc	/^void onWriteComplete(const muduo::TcpConnectionPtr& conn)$/;"	f
onWriteComplete	topk/sender.cc	/^void onWriteComplete(const TcpConnectionPtr& conn)$/;"	f
one	thread/test/SignalSlot_test.cc	/^void Foo::one(int x)$/;"	f	class:Foo
one	thread/test/WeakCallback_test.cc	/^void Foo::one(int x)$/;"	f	class:Foo
oneFastCustomer	java/bankqueue/tests/BankTest.java	/^    public void oneFastCustomer() {$/;"	m	class:BankTest
oneNormalCustomer	java/bankqueue/tests/BankTest.java	/^    public void oneNormalCustomer() {$/;"	m	class:BankTest
oneString	thread/test/SignalSlot_test.cc	/^void Foo::oneString(const String& str)$/;"	f	class:Foo
oneString	thread/test/WeakCallback_test.cc	/^void Foo::oneString(const String& str)$/;"	f	class:Foo
oneStringRR	thread/test/WeakCallback_test.cc	/^void Foo::oneStringRR(String&& str)$/;"	f	class:Foo
oneVipCustomer	java/bankqueue/tests/BankTest.java	/^    public void oneVipCustomer() {$/;"	m	class:BankTest
onec	thread/test/SignalSlot_test.cc	/^void Foo::onec(int x) const$/;"	f	class:Foo
onec	thread/test/WeakCallback_test.cc	/^void Foo::onec(int x) const$/;"	f	class:Foo
oner	thread/test/WeakCallback_test.cc	/^void Foo::oner(int& x)$/;"	f	class:Foo
op_count_	pingpong/asio/server.cpp	/^  int op_count_;$/;"	m	class:session	file:
operator !=	puzzle/waterpour.cc	/^  bool operator!=(const State& rhs) const$/;"	f	struct:State
operator ()	algorithm/removeContinuousSpaces.cc	/^  bool operator()(char x, char y) const$/;"	f	struct:AreBothSpaces
operator ()	datetime/TimeZone.cc	/^  bool operator()(const Transition& lhs, const Transition& rhs) const$/;"	f	struct:muduo::detail::Comp
operator ()	pingpong/asio/handler_allocator.hpp	/^  void operator()(Arg1 arg1)$/;"	f	class:custom_alloc_handler
operator ()	pingpong/asio/handler_allocator.hpp	/^  void operator()(Arg1 arg1, Arg2 arg2)$/;"	f	class:custom_alloc_handler
operator ()	puzzle/huarong.cc	/^    size_t operator()(const Mask& x) const$/;"	f	struct:std::hash
operator ()	thread/WeakCallback.h	/^  void operator()(ARGS&&... args) const$/;"	f	class:muduo::WeakCallback
operator *	puzzle/nbody.cc	/^inline Vector3 operator*(Vector3 lhs, double rhs)$/;"	f
operator *	puzzle/nbody.cc	/^inline Vector3 operator*(double lhs, Vector3 rhs)$/;"	f
operator *=	puzzle/nbody.cc	/^inline Vector3& operator*=(Vector3& lhs, double rhs)$/;"	f
operator +	puzzle/nbody.cc	/^inline Vector3 operator+(Vector3 lhs, const Vector3& rhs)$/;"	f
operator +=	puzzle/nbody.cc	/^inline Vector3& operator+=(Vector3& lhs, const Vector3& rhs)$/;"	f
operator -	puzzle/nbody.cc	/^inline Vector3 operator-(Vector3 lhs)$/;"	f
operator -	puzzle/nbody.cc	/^inline Vector3 operator-(Vector3 lhs, const Vector3& rhs)$/;"	f
operator -=	puzzle/nbody.cc	/^inline Vector3& operator-=(Vector3& lhs, const Vector3& rhs)$/;"	f
operator /	puzzle/nbody.cc	/^inline Vector3 operator\/(Vector3 lhs, double rhs)$/;"	f
operator /=	puzzle/nbody.cc	/^inline Vector3& operator\/=(Vector3& lhs, double rhs)$/;"	f
operator <	algorithm/iprange.cc	/^  bool operator<(const IPrange& rhs) const$/;"	f	struct:IPrange
operator <	algorithm/mergeN.cc	/^  bool operator<(const Input& rhs) const$/;"	f	struct:Input
operator <	datetime/Date.h	/^inline bool operator<(Date x, Date y)$/;"	f	namespace:muduo
operator <	datetime/Timestamp.h	/^inline bool operator<(Timestamp lhs, Timestamp rhs)$/;"	f	namespace:muduo
operator <	esort/sort01.cc	/^  bool operator<(const Key& rhs) const$/;"	f	struct:Key
operator <	esort/sort02.cc	/^  bool operator<(const Key& rhs) const$/;"	f	struct:Key
operator <	esort/sort02.cc	/^  bool operator<(const Record& rhs) const$/;"	f	struct:Record
operator <	esort/sort03.cc	/^  bool operator<(const Key& rhs) const$/;"	f	struct:Key
operator <	esort/sort03.cc	/^  bool operator<(const Record& rhs) const$/;"	f	struct:Record
operator <	esort/sort04.cc	/^  bool operator<(const Key& rhs) const$/;"	f	struct:Key
operator <	esort/sort04.cc	/^  bool operator<(const Source& rhs) const$/;"	f	struct:Source
operator <	esort/sort10.cc	/^  bool operator<(const Record& rhs) const$/;"	f	struct:Record
operator <	esort/sort11.cc	/^  bool operator<(const Record& rhs) const$/;"	f	struct:Record
operator <	esort/sort12.cc	/^  bool operator<(const Record& rhs) const$/;"	f	struct:Record
operator <	faketcp/faketcp.h	/^  bool operator<(const SocketAddr& rhs) const$/;"	f	struct:SocketAddr
operator <	puzzle/poker/poker.cc	/^  bool operator<(const Group& rhs) const$/;"	f	struct:Group
operator <	puzzle/poker/poker.cc	/^  bool operator<(const Score& rhs) const$/;"	f	struct:Score
operator <	puzzle/query_freq.cc	/^  bool operator<(const Source& rhs) const$/;"	f	class:Source
operator <	puzzle/waterpour.cc	/^  bool operator<(const State& rhs) const$/;"	f	struct:State
operator <	string/StringEager.cc	/^bool StringEager::operator<(const StringEager& rhs) const$/;"	f	class:StringEager
operator <	string/StringEager.cc	/^bool StringEager::operator<(const char* str) const$/;"	f	class:StringEager
operator <	topk/merger.cc	/^  bool operator<(const Source& rhs) const$/;"	f	class:Source
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(const void* p)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(double v)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(int v)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(long long v)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(long v)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(short v)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(unsigned int v)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(unsigned long long v)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(unsigned long v)$/;"	f	class:LogStream
operator <<	logging/LogStream.cc	/^LogStream& LogStream::operator<<(unsigned short v)$/;"	f	class:LogStream
operator <<	logging/LogStream.h	/^  self& operator<<(bool v)$/;"	f	class:muduo::LogStream
operator <<	logging/LogStream.h	/^  self& operator<<(char v)$/;"	f	class:muduo::LogStream
operator <<	logging/LogStream.h	/^  self& operator<<(const T& v)$/;"	f	class:muduo::LogStream
operator <<	logging/LogStream.h	/^  self& operator<<(const char* v)$/;"	f	class:muduo::LogStream
operator <<	logging/LogStream.h	/^  self& operator<<(const string& v) \/\/ FIXME: StringPiece$/;"	f	class:muduo::LogStream
operator <<	logging/LogStream.h	/^  self& operator<<(float v)$/;"	f	class:muduo::LogStream
operator <<	logging/LogStream.h	/^inline LogStream& operator<<(LogStream& s, const Fmt& fmt)$/;"	f	namespace:muduo
operator =	basic/counted_ptr.h	/^  counted_ptr& operator=(counted_ptr rhs)$/;"	f	class:counted_ptr
operator =	logging/AsyncLoggingQueue.h	/^  LogMessage& operator=(const LogMessage& rhs)$/;"	f	struct:muduo::LogMessage
operator =	string/StringEager.cc	/^StringEager& StringEager::operator=(StringEager&& rhs)$/;"	f	class:StringEager
operator =	string/StringEager.cc	/^StringEager& StringEager::operator=(const StringEager& rhs)$/;"	f	class:StringEager
operator =	string/StringEager.cc	/^StringEager& StringEager::operator=(const char* str)$/;"	f	class:StringEager
operator =	string/StringTrivial.h	/^  String& operator=(String rhs) \/\/ yes, pass-by-value$/;"	f	class:trivial::String
operator =	string/StringTrivial.h	/^  String& operator=(String rhs)$/;"	f	class:trivial2::String
operator =	thread/test/Counter.cc	/^Counter& Counter::operator=(const Counter& rhs)$/;"	f	class:Counter
operator =	tpc/Socket.h	/^  Socket& operator=(Socket&& rhs)$/;"	f	class:Socket
operator ==	algorithm/iprange.cc	/^bool operator==(const IPrange& lhs, const IPrange& rhs)$/;"	f
operator ==	datetime/Date.h	/^inline bool operator==(Date x, Date y)$/;"	f	namespace:muduo
operator ==	datetime/Timestamp.h	/^inline bool operator==(Timestamp lhs, Timestamp rhs)$/;"	f	namespace:muduo
operator ==	faketcp/faketcp.h	/^  bool operator==(const SocketAddr& rhs) const$/;"	f	struct:SocketAddr
operator ==	puzzle/huarong.cc	/^  bool operator==(const Mask& rhs) const$/;"	f	struct:Mask
operator ==	puzzle/waterpour.cc	/^  bool operator==(const State& rhs) const$/;"	f	struct:State
operator ==	string/StringEager.cc	/^bool StringEager::operator==(const StringEager& rhs) const$/;"	f	class:StringEager
operator ==	string/StringEager.cc	/^bool StringEager::operator==(const char* str) const$/;"	f	class:StringEager
operator ==	tpc/InetAddress.h	/^  bool operator==(const InetAddress& rhs) const$/;"	f	class:InetAddress
out	java/bankqueue/Bank.java	/^    private PrintWriter out = new PrintWriter(System.out);$/;"	f	class:Bank	file:
out	puzzle/query_freq.cc	/^  std::ofstream out;$/;"	m	class:LocalSink	file:
output	esort/sort11.cc	/^void output(muduo::BlockingQueue<BatchPtr>* queueOut,$/;"	f
output	esort/sort12.cc	/^void output(muduo::BlockingQueue<BatchPtr>* queueOut,$/;"	f
output	puzzle/query_freq.cc	/^  void output(const string& query, int64_t count)$/;"	f	class:LocalSink
output	puzzle/query_freq.cc	/^  void output(const string& query, int64_t count)$/;"	f	class:Shuffler
output	puzzle/query_freq.cc	/^  void output(std::ostream& out)$/;"	f	class:Source
output	topk/merger.cc	/^  void output(std::ostream& out)$/;"	f	class:Source
outputBuffer_	reactor/s08/TcpConnection.h	/^  Buffer outputBuffer_;$/;"	m	class:muduo::TcpConnection
outputBuffer_	reactor/s09/TcpConnection.h	/^  Buffer outputBuffer_;$/;"	m	class:muduo::TcpConnection
outputBuffer_	reactor/s10/TcpConnection.h	/^  Buffer outputBuffer_;$/;"	m	class:muduo::TcpConnection
outputBuffer_	reactor/s11/TcpConnection.h	/^  Buffer outputBuffer_;$/;"	m	class:muduo::TcpConnection
outputBuffer_	reactor/s12/TcpConnection.h	/^  Buffer outputBuffer_;$/;"	m	class:muduo::TcpConnection
outputBuffer_	reactor/s13/TcpConnection.h	/^  Buffer outputBuffer_;$/;"	m	class:muduo::TcpConnection
outputFunc	logging/LogFile_test.cc	/^void outputFunc(const char* msg, int len)$/;"	f
outstandings	protorpc/muduo/rpc/RpcChannel.java	/^    private Map<Long, Outstanding> outstandings = new ConcurrentHashMap<Long, Outstanding>();$/;"	f	class:RpcChannel	file:
ownerLoop	reactor/s01/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s02/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s03/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s04/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s05/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s06/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s07/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s08/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s09/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s10/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s11/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s12/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop	reactor/s13/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::Channel
ownerLoop_	reactor/s01/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s02/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s03/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s04/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s05/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s06/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s07/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s08/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s09/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s10/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s11/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s12/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
ownerLoop_	reactor/s13/EPoller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::EPoller
ownerLoop_	reactor/s13/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::Poller
parent	puzzle/waterpour.cc	/^  int parent;$/;"	m	struct:Step	file:
parseCommandLine	tpc/ttcp.cc	/^bool parseCommandLine(int argc, char* argv[], Options* opt)$/;"	f
parseDec	basic/uint.cc	/^void UnsignedInt::parseDec(const std::string& str)$/;"	f	class:UnsignedInt
parseDelimitedFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoRequest parseDelimitedFrom($/;"	m	class:EchoProto.EchoRequest
parseDelimitedFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoRequest parseDelimitedFrom(java.io.InputStream input)$/;"	m	class:EchoProto.EchoRequest
parseDelimitedFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoResponse parseDelimitedFrom($/;"	m	class:EchoProto.EchoResponse
parseDelimitedFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoResponse parseDelimitedFrom(java.io.InputStream input)$/;"	m	class:EchoProto.EchoResponse
parseDelimitedFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Answer parseDelimitedFrom($/;"	m	class:QueryProtos.Answer
parseDelimitedFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Answer parseDelimitedFrom(java.io.InputStream input)$/;"	m	class:QueryProtos.Answer
parseDelimitedFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Empty parseDelimitedFrom($/;"	m	class:QueryProtos.Empty
parseDelimitedFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Empty parseDelimitedFrom(java.io.InputStream input)$/;"	m	class:QueryProtos.Empty
parseDelimitedFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Query parseDelimitedFrom($/;"	m	class:QueryProtos.Query
parseDelimitedFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Query parseDelimitedFrom(java.io.InputStream input)$/;"	m	class:QueryProtos.Query
parseDelimitedFrom	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static muduo.rpc.proto.RpcProto.RpcMessage parseDelimitedFrom($/;"	m	class:RpcProto.RpcMessage
parseDelimitedFrom	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static muduo.rpc.proto.RpcProto.RpcMessage parseDelimitedFrom(java.io.InputStream input)$/;"	m	class:RpcProto.RpcMessage
parseDelimitedFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuRequest parseDelimitedFrom($/;"	m	class:Sudoku.SudokuRequest
parseDelimitedFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuRequest parseDelimitedFrom(java.io.InputStream input)$/;"	m	class:Sudoku.SudokuRequest
parseDelimitedFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuResponse parseDelimitedFrom($/;"	m	class:Sudoku.SudokuResponse
parseDelimitedFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuResponse parseDelimitedFrom(java.io.InputStream input)$/;"	m	class:Sudoku.SudokuResponse
parseFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoRequest parseFrom($/;"	m	class:EchoProto.EchoRequest
parseFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoRequest parseFrom(byte[] data)$/;"	m	class:EchoProto.EchoRequest
parseFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoRequest parseFrom(java.io.InputStream input)$/;"	m	class:EchoProto.EchoRequest
parseFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoResponse parseFrom($/;"	m	class:EchoProto.EchoResponse
parseFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoResponse parseFrom(byte[] data)$/;"	m	class:EchoProto.EchoResponse
parseFrom	protorpc/echo/EchoProto.java	/^    public static echo.EchoProto.EchoResponse parseFrom(java.io.InputStream input)$/;"	m	class:EchoProto.EchoResponse
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Answer parseFrom($/;"	m	class:QueryProtos.Answer
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Answer parseFrom(byte[] data)$/;"	m	class:QueryProtos.Answer
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Answer parseFrom(java.io.InputStream input)$/;"	m	class:QueryProtos.Answer
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Empty parseFrom($/;"	m	class:QueryProtos.Empty
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Empty parseFrom(byte[] data)$/;"	m	class:QueryProtos.Empty
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Empty parseFrom(java.io.InputStream input)$/;"	m	class:QueryProtos.Empty
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Query parseFrom($/;"	m	class:QueryProtos.Query
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Query parseFrom(byte[] data)$/;"	m	class:QueryProtos.Query
parseFrom	protorpc/muduo/codec/tests/QueryProtos.java	/^    public static muduo.codec.tests.QueryProtos.Query parseFrom(java.io.InputStream input)$/;"	m	class:QueryProtos.Query
parseFrom	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static muduo.rpc.proto.RpcProto.RpcMessage parseFrom($/;"	m	class:RpcProto.RpcMessage
parseFrom	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static muduo.rpc.proto.RpcProto.RpcMessage parseFrom(byte[] data)$/;"	m	class:RpcProto.RpcMessage
parseFrom	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static muduo.rpc.proto.RpcProto.RpcMessage parseFrom(java.io.InputStream input)$/;"	m	class:RpcProto.RpcMessage
parseFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuRequest parseFrom($/;"	m	class:Sudoku.SudokuRequest
parseFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuRequest parseFrom(byte[] data)$/;"	m	class:Sudoku.SudokuRequest
parseFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuRequest parseFrom(java.io.InputStream input)$/;"	m	class:Sudoku.SudokuRequest
parseFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuResponse parseFrom($/;"	m	class:Sudoku.SudokuResponse
parseFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuResponse parseFrom(byte[] data)$/;"	m	class:Sudoku.SudokuResponse
parseFrom	protorpc/sudoku/Sudoku.java	/^    public static sudoku.Sudoku.SudokuResponse parseFrom(java.io.InputStream input)$/;"	m	class:Sudoku.SudokuResponse
parseHex	basic/uint.cc	/^void UnsignedInt::parseHex(const std::string& str)$/;"	f	class:UnsignedInt
parseSegment	basic/uint.cc	/^uint32_t parseSegment(const char* str, int len)$/;"	f
passByConstReference	datetime/Date_unittest.cc	/^void passByConstReference(const Date& x)$/;"	f
passByConstReference	datetime/Timestamp_unittest.cc	/^void passByConstReference(const Timestamp& x)$/;"	f
passByValue	datetime/Date_unittest.cc	/^void passByValue(Date x)$/;"	f
passByValue	datetime/Timestamp_unittest.cc	/^void passByValue(Timestamp x)$/;"	f
payload	protorpc/echo/EchoClient.java	/^        private String payload;$/;"	f	class:EchoClient.AsyncClient	file:
payload_	protorpc/echo/EchoProto.java	/^      private Object payload_ = "";$/;"	f	class:EchoProto.EchoRequest.Builder	file:
payload_	protorpc/echo/EchoProto.java	/^      private Object payload_ = "";$/;"	f	class:EchoProto.EchoResponse.Builder	file:
payload_	protorpc/echo/EchoProto.java	/^    private Object payload_;$/;"	f	class:EchoProto.EchoRequest	file:
payload_	protorpc/echo/EchoProto.java	/^    private Object payload_;$/;"	f	class:EchoProto.EchoResponse	file:
pcond_	thread/Condition.h	/^  pthread_cond_t pcond_;$/;"	m	class:muduo::Condition
peek	reactor/s07/Buffer.h	/^  const char* peek() const$/;"	f	class:muduo::Buffer
peek	reactor/s08/Buffer.h	/^  const char* peek() const$/;"	f	class:muduo::Buffer
peek	reactor/s09/Buffer.h	/^  const char* peek() const$/;"	f	class:muduo::Buffer
peek	reactor/s10/Buffer.h	/^  const char* peek() const$/;"	f	class:muduo::Buffer
peek	reactor/s11/Buffer.h	/^  const char* peek() const$/;"	f	class:muduo::Buffer
peek	reactor/s12/Buffer.h	/^  const char* peek() const$/;"	f	class:muduo::Buffer
peek	reactor/s13/Buffer.h	/^  const char* peek() const$/;"	f	class:muduo::Buffer
peerAddr_	reactor/s05/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddr_	reactor/s06/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddr_	reactor/s07/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddr_	reactor/s08/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddr_	reactor/s09/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddr_	reactor/s10/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddr_	reactor/s11/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddr_	reactor/s12/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddr_	reactor/s13/TcpConnection.h	/^  InetAddress peerAddr_;$/;"	m	class:muduo::TcpConnection
peerAddress	reactor/s05/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
peerAddress	reactor/s06/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
peerAddress	reactor/s07/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
peerAddress	reactor/s08/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
peerAddress	reactor/s09/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
peerAddress	reactor/s10/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
peerAddress	reactor/s11/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
peerAddress	reactor/s12/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
peerAddress	reactor/s13/TcpConnection.h	/^  const InetAddress& peerAddress() { return peerAddr_; }$/;"	f	class:muduo::TcpConnection
pendingFunctors_	reactor/s03/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s04/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s05/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s06/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s07/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s08/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s09/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s10/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s11/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @BuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s12/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @BuardedBy mutex_$/;"	m	class:muduo::EventLoop
pendingFunctors_	reactor/s13/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @BuardedBy mutex_$/;"	m	class:muduo::EventLoop
pi	puzzle/nbody.c	73;"	d	file:
pipes	pingpong/libevent/bench.c	/^static int *pipes;$/;"	v	file:
pips	java/billing/Money.java	/^    public final long pips;$/;"	f	class:Money
pkey_	thread/ThreadLocal.h	/^  pthread_key_t pkey_;$/;"	m	class:muduo::ThreadLocal
planet	puzzle/nbody.c	/^struct planet$/;"	s	file:
plot	pingpong/libevent/run_bench.sh	/^plot() {$/;"	f
pointer	string/StringEager.h	/^  typedef value_type*   pointer;$/;"	t	class:muduo::StringEager
pointer	string/StringSso.h	/^  typedef value_type*   pointer;$/;"	t	class:muduo::StringSso
poll	python/chat-poll.py	/^poll = select.poll() # epoll() should work the same$/;"	v
poll	python/chat-reactor.py	/^poll = select.poll() # epoll() should work the same$/;"	v
poll	python/echo-poll.py	/^poll = select.poll() # epoll() should work the same$/;"	v
poll	python/echo-reactor.py	/^poll = select.poll() # epoll() should work the same$/;"	v
poll	reactor/s01/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s02/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s03/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s04/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s05/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s06/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s07/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s08/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s09/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s10/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s11/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s12/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
poll	reactor/s13/EPoller.cc	/^Timestamp EPoller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:EPoller
poll	reactor/s13/Poller.cc	/^Timestamp Poller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:Poller
pollReturnTime	reactor/s02/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s03/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s04/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s05/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s06/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s07/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s08/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s09/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s10/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s11/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s12/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime	reactor/s13/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::EventLoop
pollReturnTime_	reactor/s02/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s03/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s04/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s05/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s06/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s07/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s08/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s09/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s10/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s11/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s12/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
pollReturnTime_	reactor/s13/EventLoop.h	/^  Timestamp pollReturnTime_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s01/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s02/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s03/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s04/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s05/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s06/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s07/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s08/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s09/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s10/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s11/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s12/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;$/;"	m	class:muduo::EventLoop
poller_	reactor/s13/EventLoop.h	/^  boost::scoped_ptr<EPoller> poller_;$/;"	m	class:muduo::EventLoop
pollfds_	reactor/s01/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s02/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s03/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s04/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s05/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s06/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s07/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s08/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s09/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s10/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s11/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s12/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
pollfds_	reactor/s13/Poller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::Poller
ponce_	thread/Singleton.h	/^  static pthread_once_t ponce_;$/;"	m	class:muduo::Singleton
ponce_	thread/Singleton.h	/^pthread_once_t Singleton<T>::ponce_ = PTHREAD_ONCE_INIT;$/;"	m	class:muduo::Singleton
port	python/self-connect.py	/^    port = int(sys.argv[1])$/;"	v
port	tpc/ttcp.cc	/^  uint16_t port;$/;"	m	struct:Options	file:
portHostEndian	tpc/InetAddress.h	/^  uint16_t portHostEndian() const { return ntohs(saddr_.sin_port); }$/;"	f	class:InetAddress
portNetEndian	tpc/InetAddress.h	/^  uint16_t portNetEndian() const { return saddr_.sin_port; }$/;"	f	class:InetAddress
position	puzzle/nbody.cc	/^  Vector3 position;$/;"	m	struct:Planet	file:
post	thread/test/CopyOnWrite_test.cc	/^void post(const Foo& f)$/;"	f
post	thread/test/NonRecursiveMutex_test.cc	/^void post(const Foo& f)$/;"	f
power	basic/uint.h	/^  void power(uint32_t n)$/;"	f	class:UnsignedInt
prepend	reactor/s07/Buffer.h	/^  void prepend(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
prepend	reactor/s08/Buffer.h	/^  void prepend(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
prepend	reactor/s09/Buffer.h	/^  void prepend(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
prepend	reactor/s10/Buffer.h	/^  void prepend(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
prepend	reactor/s11/Buffer.h	/^  void prepend(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
prepend	reactor/s12/Buffer.h	/^  void prepend(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
prepend	reactor/s13/Buffer.h	/^  void prepend(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::Buffer
prependableBytes	reactor/s07/Buffer.h	/^  size_t prependableBytes() const$/;"	f	class:muduo::Buffer
prependableBytes	reactor/s08/Buffer.h	/^  size_t prependableBytes() const$/;"	f	class:muduo::Buffer
prependableBytes	reactor/s09/Buffer.h	/^  size_t prependableBytes() const$/;"	f	class:muduo::Buffer
prependableBytes	reactor/s10/Buffer.h	/^  size_t prependableBytes() const$/;"	f	class:muduo::Buffer
prependableBytes	reactor/s11/Buffer.h	/^  size_t prependableBytes() const$/;"	f	class:muduo::Buffer
prependableBytes	reactor/s12/Buffer.h	/^  size_t prependableBytes() const$/;"	f	class:muduo::Buffer
prependableBytes	reactor/s13/Buffer.h	/^  size_t prependableBytes() const$/;"	f	class:muduo::Buffer
print	algorithm/select.cc	/^void print(const vector<int>& vec)$/;"	f
print	pingpong/asio/client.cpp	/^  void print()$/;"	f	class:stats
print	protobuf/codec_test.cc	/^void print(const std::string& buf)$/;"	f
print	puzzle/Einstein.java	/^    private static void print(IntVar[] vars, Domain[] solution) {$/;"	m	class:Einstein	file:
print	puzzle/huarong.cc	/^  void print() const$/;"	f	struct:Mask
print	puzzle/waterpour.cc	/^void print(const std::vector<Step>& steps, int curr)$/;"	f
print	reactor/s02/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s03/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s04/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s05/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s06/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s07/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s08/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s09/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s10/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s11/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s12/test4.cc	/^void print(const char* msg)$/;"	f
print	reactor/s13/test4.cc	/^void print(const char* msg)$/;"	f
print	thread/test/Fork_test.cc	/^void print()$/;"	f
print	thread/test/MutualDeadLock.cc	/^  void print() const __attribute__ ((noinline))$/;"	f	class:Request
print	thread/test/RequestInventory_test.cc	/^  void print() const __attribute__ ((noinline))$/;"	f	class:Request
print	thread/test/RequestInventory_test2.cc	/^  void print() const __attribute__ ((noinline))$/;"	f	class:Request
print	thread/test/SelfDeadLock.cc	/^  void print() const \/\/ __attribute__ ((noinline))$/;"	f	class:Request
print	thread/test/SingletonThreadLocal_test.cc	/^void print()$/;"	f
print	thread/test/ThreadLocal_test.cc	/^void print()$/;"	f
print	thread/test/ThreadPool_test.cc	/^void print()$/;"	f
printAll	thread/test/MutualDeadLock.cc	/^void Inventory::printAll() const$/;"	f	class:Inventory
printAll	thread/test/RequestInventory_test.cc	/^void Inventory::printAll() const$/;"	f	class:Inventory
printAll	thread/test/RequestInventory_test2.cc	/^void Inventory::printAll() const$/;"	f	class:Inventory
printBigInt	basic/tutorial/factorial.cc	/^void printBigInt(const BigInt& number)$/;"	f
printString	thread/test/ThreadPool_test.cc	/^void printString(const std::string& str)$/;"	f
printTid	reactor/s02/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s03/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s04/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s05/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s06/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s07/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s08/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s09/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s10/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s11/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s12/test4.cc	/^void printTid()$/;"	f
printTid	reactor/s13/test4.cc	/^void printTid()$/;"	f
print_neighbors	sudoku/neighbor.cc	/^static void print_neighbors(const bool adjacent[ROW][COL], int row, int col, int myneighbors[NEIGHBOR])$/;"	f	file:
process	thread/test/MutualDeadLock.cc	/^  void process() \/\/ __attribute__ ((noinline))$/;"	f	class:Request
process	thread/test/RequestInventory_test.cc	/^  void process() \/\/ __attribute__ ((noinline))$/;"	f	class:Request
process	thread/test/RequestInventory_test2.cc	/^  void process() \/\/ __attribute__ ((noinline))$/;"	f	class:Request
process	thread/test/SelfDeadLock.cc	/^  void process() \/\/ __attribute__ ((noinline))$/;"	f	class:Request
processOneInput	puzzle/query_freq.cc	/^void processOneInput(const char* file, const Callback& cb)$/;"	f
pthreadId_	thread/Thread.h	/^  pthread_t   pthreadId_;$/;"	m	class:muduo::Thread
ptr_	basic/counted_ptr.h	/^  T* ptr_;$/;"	m	class:counted_ptr
push_back	string/StringEager.cc	/^void StringEager::push_back(char c)$/;"	f	class:StringEager
put	puzzle/latin_square.cc	/^void put(int x, int y, int i)$/;"	f
put	thread/BlockingQueue.h	/^  void put(const T& x)$/;"	f	class:muduo::BlockingQueue
put	thread/BoundedBlockingQueue.h	/^  void put(const T& x)$/;"	f	class:muduo::BoundedBlockingQueue
put_left	puzzle/dance.cc	/^  void put_left(Column* old, Column* nnew)$/;"	f	struct:Dance
put_left	sudoku/sudoku_dancing_links.cc	/^    void put_left(Column* old, Column* nnew)$/;"	f	struct:Dance
put_up	puzzle/dance.cc	/^  void put_up(Column* old, Node* nnew)$/;"	f	struct:Dance
put_up	sudoku/sudoku_dancing_links.cc	/^    void put_up(Column* old, Node* nnew)$/;"	f	struct:Dance
query	thread/test/Customer.cc	/^int CustomerData::query(const string& customer, const string& stock) const$/;"	f	class:CustomerData
query_	puzzle/query_freq.cc	/^  string query_;$/;"	m	class:Source	file:
query_	topk/merger.cc	/^  std::string query_;$/;"	m	class:Source	file:
question_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private com.google.protobuf.LazyStringList question_ = com.google.protobuf.LazyStringArrayList.EMPTY;$/;"	f	class:QueryProtos.Query.Builder	file:
question_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private com.google.protobuf.LazyStringList question_;$/;"	f	class:QueryProtos.Query	file:
questioner_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Object questioner_ = "";$/;"	f	class:QueryProtos.Answer.Builder	file:
questioner_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private Object questioner_ = "";$/;"	f	class:QueryProtos.Query.Builder	file:
questioner_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Object questioner_;$/;"	f	class:QueryProtos.Answer	file:
questioner_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private Object questioner_;$/;"	f	class:QueryProtos.Query	file:
queue	java/bankqueue/event/EventSimulator.java	/^    private PriorityQueue<Event> queue = new PriorityQueue<Event>();$/;"	f	class:EventSimulator	file:
queueInLoop	reactor/s03/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s04/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s05/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s06/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s07/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s08/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s09/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s10/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s11/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s12/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queueInLoop	reactor/s13/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)$/;"	f	class:EventLoop
queue_	esort/sort03.cc	/^  muduo::BlockingQueue<TaskPtr>* queue_;$/;"	m	class:Task	file:
queue_	esort/sort04.cc	/^  muduo::BlockingQueue<TaskPtr>* queue_;$/;"	m	class:Task	file:
queue_	logging/AsyncLoggingQueue.h	/^  QUEUE<MSG> queue_;$/;"	m	class:muduo::AsyncLoggingT
queue_	thread/BlockingQueue.h	/^  std::deque<T>     queue_;$/;"	m	class:muduo::BlockingQueue
queue_	thread/BoundedBlockingQueue.h	/^  boost::circular_buffer<T>  queue_;$/;"	m	class:muduo::BoundedBlockingQueue
queue_	thread/ThreadPool.h	/^  std::deque<Task> queue_;$/;"	m	class:muduo::ThreadPool
queue_	thread/test/BlockingQueue_test.cc	/^  muduo::BlockingQueue<std::string> queue_;$/;"	m	class:Test	file:
queue_	thread/test/BoundedBlockingQueue_test.cc	/^  muduo::BoundedBlockingQueue<std::string> queue_;$/;"	m	class:Test	file:
quit	reactor/s01/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s02/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s03/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s04/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s05/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s06/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s07/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s08/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s09/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s10/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s11/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s12/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit	reactor/s13/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
quit_	reactor/s01/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s02/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s03/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s04/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s05/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s06/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s07/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s08/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s09/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s10/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s11/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s12/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
quit_	reactor/s13/EventLoop.h	/^  bool quit_; \/* atomic *\/$/;"	m	class:muduo::EventLoop
randomize	puzzle/typoglycemia.cc	/^void randomize(string& text)$/;"	f
randomizeWord	puzzle/typoglycemia.cc	/^void randomizeWord(char* str, int len)$/;"	f
rank	puzzle/poker/poker.cc	/^  int rank; \/\/ 2 .. 14 : 2 .. 9, T, J, Q, K, A$/;"	m	struct:Card	file:
rank	puzzle/poker/poker.cc	/^  int rank;$/;"	m	struct:Group	file:
ranks	puzzle/poker/poker.cc	/^  int ranks[5];$/;"	m	struct:Score	file:
rcv_nxt	faketcp/discardall2.cc	/^  uint32_t rcv_nxt;$/;"	m	struct:TcpState	file:
rcv_nxt	faketcp/echoall2.cc	/^  uint32_t rcv_nxt;$/;"	m	struct:TcpState	file:
read	esort/sort00.cc	/^  int read(char* buf, int size)$/;"	f	class:InputFile
read	esort/sort01.cc	/^  int read(char* buf, int size)$/;"	f	class:InputFile
read	esort/sort02.cc	/^  int read(char* buf, int size)$/;"	f	class:InputFile
read	esort/sort03.cc	/^  bool read(InputFile& in)$/;"	f	class:Task
read	esort/sort03.cc	/^  int read(char* buf, int size)$/;"	f	class:InputFile
read	esort/sort04.cc	/^  bool read(InputFile& in)$/;"	f	class:Task
read	esort/sort04.cc	/^  int read(char* buf, int size)$/;"	f	class:InputFile
read	esort/sort10.cc	/^  bool read(int64_t* value)$/;"	f	struct:Source
read	esort/sort11.cc	/^  bool read(int64_t* value)$/;"	f	struct:Source
read	esort/sort12.cc	/^  bool read(ElementType* value)$/;"	f	struct:Source
read	topk/sender.cc	/^void read(const char* file)$/;"	f
read	tpc/Socket.cc	/^int Socket::read(void* buf, int len)$/;"	f	class:Socket
readBytes	datetime/TimeZone.cc	/^  string readBytes(int n)$/;"	f	class:muduo::detail::File
readCallback_	reactor/s01/Channel.h	/^  EventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s02/Channel.h	/^  EventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s03/Channel.h	/^  EventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s04/Channel.h	/^  EventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s05/Channel.h	/^  EventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s06/Channel.h	/^  EventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s07/Channel.h	/^  ReadEventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s08/Channel.h	/^  ReadEventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s09/Channel.h	/^  ReadEventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s10/Channel.h	/^  ReadEventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s11/Channel.h	/^  ReadEventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s12/Channel.h	/^  ReadEventCallback readCallback_;$/;"	m	class:muduo::Channel
readCallback_	reactor/s13/Channel.h	/^  ReadEventCallback readCallback_;$/;"	m	class:muduo::Channel
readFd	reactor/s07/Buffer.cc	/^ssize_t Buffer::readFd(int fd, int* savedErrno)$/;"	f	class:Buffer
readFd	reactor/s08/Buffer.cc	/^ssize_t Buffer::readFd(int fd, int* savedErrno)$/;"	f	class:Buffer
readFd	reactor/s09/Buffer.cc	/^ssize_t Buffer::readFd(int fd, int* savedErrno)$/;"	f	class:Buffer
readFd	reactor/s10/Buffer.cc	/^ssize_t Buffer::readFd(int fd, int* savedErrno)$/;"	f	class:Buffer
readFd	reactor/s11/Buffer.cc	/^ssize_t Buffer::readFd(int fd, int* savedErrno)$/;"	f	class:Buffer
readFd	reactor/s12/Buffer.cc	/^ssize_t Buffer::readFd(int fd, int* savedErrno)$/;"	f	class:Buffer
readFd	reactor/s13/Buffer.cc	/^ssize_t Buffer::readFd(int fd, int* savedErrno)$/;"	f	class:Buffer
readFile	utility/cwc.cc	/^string readFile(const char* file)$/;"	f
readInput	esort/sort01.cc	/^void readInput(const char* filename, std::vector<string>* data)$/;"	f
readInput	esort/sort02.cc	/^void readInput(InputFile& in, std::vector<string>* data)$/;"	f
readInput	esort/sort03.cc	/^void readInput(InputFile& in, std::vector<string>* data)$/;"	f
readInput	esort/sort04.cc	/^void readInput(InputFile& in, Data* data)$/;"	f
readInt32	datetime/TimeZone.cc	/^  int32_t readInt32()$/;"	f	class:muduo::detail::File
readLine	esort/sort00.cc	/^  bool readLine(string* line)$/;"	f	class:InputFile
readLine	esort/sort01.cc	/^  bool readLine(string* line)$/;"	f	class:InputFile
readLine	esort/sort02.cc	/^  bool readLine(string* line)$/;"	f	class:InputFile
readLine	esort/sort03.cc	/^  bool readLine(string* line)$/;"	f	class:InputFile
readTimeZoneFile	datetime/TimeZone.cc	/^bool readTimeZoneFile(const char* zonefile, struct TimeZone::Data* data)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s02/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s03/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s04/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s05/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s06/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s07/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s08/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s09/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s10/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s11/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s12/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readTimerfd	reactor/s13/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)$/;"	f	namespace:muduo::detail
readUInt8	datetime/TimeZone.cc	/^  uint8_t readUInt8()$/;"	f	class:muduo::detail::File
read_allocator_	pingpong/asio/client.cpp	/^  handler_allocator read_allocator_;$/;"	m	class:session	file:
read_allocator_	pingpong/asio/server.cpp	/^  handler_allocator read_allocator_;$/;"	m	class:session	file:
read_cb	pingpong/libevent/bench.c	/^read_cb(evutil_socket_t fd, short which, void *arg)$/;"	f	file:
read_data_	pingpong/asio/client.cpp	/^  char* read_data_;$/;"	m	class:session	file:
read_data_	pingpong/asio/server.cpp	/^  char* read_data_;$/;"	m	class:session	file:
read_data_length_	pingpong/asio/client.cpp	/^  size_t read_data_length_;$/;"	m	class:session	file:
read_data_length_	pingpong/asio/server.cpp	/^  size_t read_data_length_;$/;"	m	class:session	file:
read_shard	puzzle/query_freq.cc	/^std::unordered_map<string, int64_t> read_shard(int idx, int nbuckets)$/;"	f
readableBytes	reactor/s07/Buffer.h	/^  size_t readableBytes() const$/;"	f	class:muduo::Buffer
readableBytes	reactor/s08/Buffer.h	/^  size_t readableBytes() const$/;"	f	class:muduo::Buffer
readableBytes	reactor/s09/Buffer.h	/^  size_t readableBytes() const$/;"	f	class:muduo::Buffer
readableBytes	reactor/s10/Buffer.h	/^  size_t readableBytes() const$/;"	f	class:muduo::Buffer
readableBytes	reactor/s11/Buffer.h	/^  size_t readableBytes() const$/;"	f	class:muduo::Buffer
readableBytes	reactor/s12/Buffer.h	/^  size_t readableBytes() const$/;"	f	class:muduo::Buffer
readableBytes	reactor/s13/Buffer.h	/^  size_t readableBytes() const$/;"	f	class:muduo::Buffer
readcb	pingpong/libevent/client.c	/^static void readcb(struct bufferevent *bev, void *ctx)$/;"	f	file:
readerIndex_	reactor/s07/Buffer.h	/^  size_t readerIndex_;$/;"	m	class:muduo::Buffer
readerIndex_	reactor/s08/Buffer.h	/^  size_t readerIndex_;$/;"	m	class:muduo::Buffer
readerIndex_	reactor/s09/Buffer.h	/^  size_t readerIndex_;$/;"	m	class:muduo::Buffer
readerIndex_	reactor/s10/Buffer.h	/^  size_t readerIndex_;$/;"	m	class:muduo::Buffer
readerIndex_	reactor/s11/Buffer.h	/^  size_t readerIndex_;$/;"	m	class:muduo::Buffer
readerIndex_	reactor/s12/Buffer.h	/^  size_t readerIndex_;$/;"	m	class:muduo::Buffer
readerIndex_	reactor/s13/Buffer.h	/^  size_t readerIndex_;$/;"	m	class:muduo::Buffer
receive	tpc/ttcp.cc	/^  bool transmit, receive, nodelay;$/;"	m	struct:Options	file:
receive	tpc/ttcp.cc	/^void receive(const Options& opt)$/;"	f
receiveAll	tpc/TcpStream.cc	/^int TcpStream::receiveAll(void* buf, int len)$/;"	f	class:TcpStream
receiveSome	tpc/TcpStream.cc	/^int TcpStream::receiveSome(void* buf, int len)$/;"	f	class:TcpStream
reduce	puzzle/query_freq.cc	/^void reduce(const int nbuckets)$/;"	f
reference	string/StringEager.h	/^  typedef value_type&   reference;$/;"	t	class:muduo::StringEager
reference	string/StringSso.h	/^  typedef value_type&   reference;$/;"	t	class:muduo::StringSso
registerAllExtensions	protorpc/echo/EchoProto.java	/^  public static void registerAllExtensions($/;"	m	class:EchoProto
registerAllExtensions	protorpc/muduo/codec/tests/QueryProtos.java	/^  public static void registerAllExtensions($/;"	m	class:QueryProtos
registerAllExtensions	protorpc/muduo/rpc/proto/RpcProto.java	/^  public static void registerAllExtensions($/;"	m	class:RpcProto
registerAllExtensions	protorpc/sudoku/Sudoku.java	/^  public static void registerAllExtensions($/;"	m	class:Sudoku
registerMessageCallback	protobuf/dispatcher.cc	/^  void registerMessageCallback(const typename CallbackT<T>::ProtobufMessageCallback& callback)$/;"	f	class:ProtobufDispatcher
registerMessageCallback	protobuf/dispatcher_lite.cc	/^  void registerMessageCallback(const google::protobuf::Descriptor* desc, const ProtobufMessageCallback& callback)$/;"	f	class:ProtobufDispatcherLite
registerService	protorpc/muduo/rpc/RpcPeer.java	/^    public void registerService(Service service) {$/;"	m	class:RpcPeer
register_	thread/test/Observer.cc	/^void Observable::register_(Observer* x)$/;"	f	class:Observable
register_	thread/test/Observer_safe.cc	/^void Observable::register_(boost::weak_ptr<Observer> x)$/;"	f	class:Observable
relay	python/netcat-nonblock.py	/^def relay(sock):$/;"	f
relay	python/netcat.py	/^def relay(sock):$/;"	f
remoteService	protorpc/echo/EchoClient.java	/^        protected EchoService.Stub remoteService;$/;"	f	class:EchoClient.AsyncClient
remove	thread/test/MutualDeadLock.cc	/^  void remove(Request* req) __attribute__ ((noinline))$/;"	f	class:Inventory
remove	thread/test/RequestInventory_test.cc	/^  void remove(Request* req) \/\/ __attribute__ ((noinline))$/;"	f	class:Inventory
remove	thread/test/RequestInventory_test2.cc	/^  void remove(const RequestPtr& req) \/\/ __attribute__ ((noinline))$/;"	f	class:Inventory
removeAndResetChannel	reactor/s11/Connector.cc	/^int Connector::removeAndResetChannel()$/;"	f	class:Connector
removeAndResetChannel	reactor/s12/Connector.cc	/^int Connector::removeAndResetChannel()$/;"	f	class:Connector
removeAndResetChannel	reactor/s13/Connector.cc	/^int Connector::removeAndResetChannel()$/;"	f	class:Connector
removeChannel	reactor/s06/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
removeChannel	reactor/s06/Poller.cc	/^void Poller::removeChannel(Channel* channel)$/;"	f	class:Poller
removeChannel	reactor/s07/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
removeChannel	reactor/s07/Poller.cc	/^void Poller::removeChannel(Channel* channel)$/;"	f	class:Poller
removeChannel	reactor/s08/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
removeChannel	reactor/s08/Poller.cc	/^void Poller::removeChannel(Channel* channel)$/;"	f	class:Poller
removeChannel	reactor/s09/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
removeChannel	reactor/s09/Poller.cc	/^void Poller::removeChannel(Channel* channel)$/;"	f	class:Poller
removeChannel	reactor/s10/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
removeChannel	reactor/s10/Poller.cc	/^void Poller::removeChannel(Channel* channel)$/;"	f	class:Poller
removeChannel	reactor/s11/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
removeChannel	reactor/s11/Poller.cc	/^void Poller::removeChannel(Channel* channel)$/;"	f	class:Poller
removeChannel	reactor/s12/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
removeChannel	reactor/s12/Poller.cc	/^void Poller::removeChannel(Channel* channel)$/;"	f	class:Poller
removeChannel	reactor/s13/EPoller.cc	/^void EPoller::removeChannel(Channel* channel)$/;"	f	class:EPoller
removeChannel	reactor/s13/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
removeChannel	reactor/s13/Poller.cc	/^void Poller::removeChannel(Channel* channel)$/;"	f	class:Poller
removeConnection	reactor/s06/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnection	reactor/s07/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnection	reactor/s08/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnection	reactor/s09/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnection	reactor/s10/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnection	reactor/s11/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnection	reactor/s12/TcpClient.cc	/^void TcpClient::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpClient
removeConnection	reactor/s12/TcpClient.cc	/^void removeConnection(EventLoop* loop, const TcpConnectionPtr& conn)$/;"	f	namespace:muduo::detail
removeConnection	reactor/s12/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnection	reactor/s13/TcpClient.cc	/^void TcpClient::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpClient
removeConnection	reactor/s13/TcpClient.cc	/^void removeConnection(EventLoop* loop, const TcpConnectionPtr& conn)$/;"	f	namespace:muduo::detail
removeConnection	reactor/s13/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnectionInLoop	reactor/s10/TcpServer.cc	/^void TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnectionInLoop	reactor/s11/TcpServer.cc	/^void TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnectionInLoop	reactor/s12/TcpServer.cc	/^void TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnectionInLoop	reactor/s13/TcpServer.cc	/^void TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnector	reactor/s12/TcpClient.cc	/^void removeConnector(const ConnectorPtr& connector)$/;"	f	namespace:muduo::detail
removeConnector	reactor/s13/TcpClient.cc	/^void removeConnector(const ConnectorPtr& connector)$/;"	f	namespace:muduo::detail
removeContinuousSpaces	algorithm/removeContinuousSpaces.cc	/^void removeContinuousSpaces(std::string& str)$/;"	f
removeStock	thread/test/Factory.cc	/^  void removeStock(Stock* stock)$/;"	f	class:StockFactory	file:
repeat	reactor/s02/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s03/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s04/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s05/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s06/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s07/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s08/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s09/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s10/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s11/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s12/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat	reactor/s13/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::Timer
repeat_	reactor/s02/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s03/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s04/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s05/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s06/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s07/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s08/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s09/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s10/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s11/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s12/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
repeat_	reactor/s13/Timer.h	/^  const bool repeat_;$/;"	m	class:muduo::Timer
request	protorpc/echo/EchoClient.java	/^        private EchoRequest request;$/;"	f	class:EchoClient.AsyncClient	file:
request	tpc/roundtrip_udp.cc	/^  int64_t request;$/;"	m	struct:Message	file:
request_	protorpc/muduo/rpc/proto/RpcProto.java	/^      private com.google.protobuf.ByteString request_ = com.google.protobuf.ByteString.EMPTY;$/;"	f	class:RpcProto.RpcMessage.Builder	file:
request_	protorpc/muduo/rpc/proto/RpcProto.java	/^    private com.google.protobuf.ByteString request_;$/;"	f	class:RpcProto.RpcMessage	file:
requests_	thread/test/MutualDeadLock.cc	/^  std::set<Request*> requests_;$/;"	m	class:Inventory	file:
requests_	thread/test/RequestInventory_test.cc	/^  RequestListPtr requests_;$/;"	m	class:Inventory	file:
requests_	thread/test/RequestInventory_test2.cc	/^  RequestListPtr requests_;$/;"	m	class:Inventory	file:
require_32_bit_integer_at_least	datetime/Date.cc	/^char require_32_bit_integer_at_least[sizeof(int) >= 4 ? 1 : -1];$/;"	m	namespace:__anon3	file:
reserve	basic/bench.cc	/^void reserve()$/;"	f
reserve	string/StringEager.cc	/^void StringEager::reserve(size_type len)$/;"	f	class:StringEager
reset	basic/counted_ptr.h	/^  void reset()$/;"	f	class:counted_ptr
reset	logging/LogStream.h	/^  void reset() { cur_ = data_; }$/;"	f	class:muduo::detail::FixedBuffer
reset	reactor/s02/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s03/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s04/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s05/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s06/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s07/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s08/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s09/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s10/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s11/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s12/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
reset	reactor/s13/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:TimerQueue
resetBuffer	logging/LogStream.h	/^  void resetBuffer() { buffer_.reset(); }$/;"	f	class:muduo::LogStream
resetChannel	reactor/s11/Connector.cc	/^void Connector::resetChannel()$/;"	f	class:Connector
resetChannel	reactor/s12/Connector.cc	/^void Connector::resetChannel()$/;"	f	class:Connector
resetChannel	reactor/s13/Connector.cc	/^void Connector::resetChannel()$/;"	f	class:Connector
resetTimerfd	reactor/s02/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s03/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s04/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s05/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s06/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s07/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s08/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s09/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s10/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s11/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s12/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resetTimerfd	reactor/s13/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:muduo::detail
resolve	tpc/InetAddress.cc	/^bool InetAddress::resolve(StringArg hostname, InetAddress* out)$/;"	f	class:InetAddress
resolveSlow	tpc/InetAddress.cc	/^bool InetAddress::resolveSlow(const char* hostname, InetAddress* out)$/;"	f	class:InetAddress
response	protorpc/muduo/rpc/RpcChannel.java	/^        public Message response;$/;"	f	class:RpcChannel.BlockingRpcCallback
response	tpc/roundtrip_udp.cc	/^  int64_t response;$/;"	m	struct:Message	file:
responsePrototype	protorpc/muduo/rpc/RpcChannel.java	/^        public Message responsePrototype;$/;"	f	class:RpcChannel.Outstanding
response_	protorpc/muduo/rpc/proto/RpcProto.java	/^      private com.google.protobuf.ByteString response_ = com.google.protobuf.ByteString.EMPTY;$/;"	f	class:RpcProto.RpcMessage.Builder	file:
response_	protorpc/muduo/rpc/proto/RpcProto.java	/^    private com.google.protobuf.ByteString response_;$/;"	f	class:RpcProto.RpcMessage	file:
restart	reactor/s02/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s03/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s04/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s05/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s06/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s07/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s08/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s09/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s10/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s11/Connector.cc	/^void Connector::restart()$/;"	f	class:Connector
restart	reactor/s11/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s12/Connector.cc	/^void Connector::restart()$/;"	f	class:Connector
restart	reactor/s12/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
restart	reactor/s13/Connector.cc	/^void Connector::restart()$/;"	f	class:Connector
restart	reactor/s13/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
retrieve	reactor/s07/Buffer.h	/^  void retrieve(size_t len)$/;"	f	class:muduo::Buffer
retrieve	reactor/s08/Buffer.h	/^  void retrieve(size_t len)$/;"	f	class:muduo::Buffer
retrieve	reactor/s09/Buffer.h	/^  void retrieve(size_t len)$/;"	f	class:muduo::Buffer
retrieve	reactor/s10/Buffer.h	/^  void retrieve(size_t len)$/;"	f	class:muduo::Buffer
retrieve	reactor/s11/Buffer.h	/^  void retrieve(size_t len)$/;"	f	class:muduo::Buffer
retrieve	reactor/s12/Buffer.h	/^  void retrieve(size_t len)$/;"	f	class:muduo::Buffer
retrieve	reactor/s13/Buffer.h	/^  void retrieve(size_t len)$/;"	f	class:muduo::Buffer
retrieveAll	reactor/s07/Buffer.h	/^  void retrieveAll()$/;"	f	class:muduo::Buffer
retrieveAll	reactor/s08/Buffer.h	/^  void retrieveAll()$/;"	f	class:muduo::Buffer
retrieveAll	reactor/s09/Buffer.h	/^  void retrieveAll()$/;"	f	class:muduo::Buffer
retrieveAll	reactor/s10/Buffer.h	/^  void retrieveAll()$/;"	f	class:muduo::Buffer
retrieveAll	reactor/s11/Buffer.h	/^  void retrieveAll()$/;"	f	class:muduo::Buffer
retrieveAll	reactor/s12/Buffer.h	/^  void retrieveAll()$/;"	f	class:muduo::Buffer
retrieveAll	reactor/s13/Buffer.h	/^  void retrieveAll()$/;"	f	class:muduo::Buffer
retrieveAsString	reactor/s07/Buffer.h	/^  std::string retrieveAsString()$/;"	f	class:muduo::Buffer
retrieveAsString	reactor/s08/Buffer.h	/^  std::string retrieveAsString()$/;"	f	class:muduo::Buffer
retrieveAsString	reactor/s09/Buffer.h	/^  std::string retrieveAsString()$/;"	f	class:muduo::Buffer
retrieveAsString	reactor/s10/Buffer.h	/^  std::string retrieveAsString()$/;"	f	class:muduo::Buffer
retrieveAsString	reactor/s11/Buffer.h	/^  std::string retrieveAsString()$/;"	f	class:muduo::Buffer
retrieveAsString	reactor/s12/Buffer.h	/^  std::string retrieveAsString()$/;"	f	class:muduo::Buffer
retrieveAsString	reactor/s13/Buffer.h	/^  std::string retrieveAsString()$/;"	f	class:muduo::Buffer
retrieveUntil	reactor/s07/Buffer.h	/^  void retrieveUntil(const char* end)$/;"	f	class:muduo::Buffer
retrieveUntil	reactor/s08/Buffer.h	/^  void retrieveUntil(const char* end)$/;"	f	class:muduo::Buffer
retrieveUntil	reactor/s09/Buffer.h	/^  void retrieveUntil(const char* end)$/;"	f	class:muduo::Buffer
retrieveUntil	reactor/s10/Buffer.h	/^  void retrieveUntil(const char* end)$/;"	f	class:muduo::Buffer
retrieveUntil	reactor/s11/Buffer.h	/^  void retrieveUntil(const char* end)$/;"	f	class:muduo::Buffer
retrieveUntil	reactor/s12/Buffer.h	/^  void retrieveUntil(const char* end)$/;"	f	class:muduo::Buffer
retrieveUntil	reactor/s13/Buffer.h	/^  void retrieveUntil(const char* end)$/;"	f	class:muduo::Buffer
retry	reactor/s11/Connector.cc	/^void Connector::retry(int sockfd)$/;"	f	class:Connector
retry	reactor/s12/Connector.cc	/^void Connector::retry(int sockfd)$/;"	f	class:Connector
retry	reactor/s13/Connector.cc	/^void Connector::retry(int sockfd)$/;"	f	class:Connector
retryDelayMs_	reactor/s11/Connector.h	/^  int retryDelayMs_;$/;"	m	class:muduo::Connector
retryDelayMs_	reactor/s12/Connector.h	/^  int retryDelayMs_;$/;"	m	class:muduo::Connector
retryDelayMs_	reactor/s13/Connector.h	/^  int retryDelayMs_;$/;"	m	class:muduo::Connector
retry_	reactor/s12/TcpClient.h	/^  bool retry_;   \/\/ atmoic$/;"	m	class:muduo::TcpClient
retry_	reactor/s13/TcpClient.h	/^  bool retry_;   \/\/ atmoic$/;"	m	class:muduo::TcpClient
revents_	reactor/s01/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s02/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s03/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s04/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s05/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s06/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s07/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s08/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s09/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s10/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s11/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s12/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
revents_	reactor/s13/Channel.h	/^  int        revents_;$/;"	m	class:muduo::Channel
right	puzzle/dance.cc	/^    Node* right;$/;"	m	struct:Node	file:
right	puzzle/huarong.cc	/^  int right() const$/;"	f	struct:Block
right	sudoku/sudoku_dancing_links.cc	/^    Node* right;$/;"	m	struct:Node	file:
rollFile	logging/LogFile.cc	/^void LogFile::rollFile()$/;"	f	class:LogFile
rollSize_	logging/AsyncLoggingDoubleBuffering.h	/^  size_t rollSize_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
rollSize_	logging/AsyncLoggingQueue.h	/^  size_t rollSize_;$/;"	m	class:muduo::AsyncLoggingT
rollSize_	logging/LogFile.h	/^  const size_t rollSize_;$/;"	m	class:muduo::LogFile
root_	puzzle/dance.cc	/^  Column* root_;$/;"	m	struct:Dance	file:
root_	sudoku/sudoku_dancing_links.cc	/^    Column* root_;$/;"	m	struct:Dance	file:
rpcChannel	protorpc/muduo/rpc/RpcClient.java	/^    private volatile RpcChannel rpcChannel;$/;"	f	class:RpcClient	file:
rpcDecoder	protorpc/muduo/rpc/RpcChannelPiplineFactory.java	/^    private RpcDecoder rpcDecoder = new RpcDecoder();$/;"	f	class:RpcChannelPiplineFactory	file:
rpcEncoder	protorpc/muduo/rpc/RpcChannelPiplineFactory.java	/^    private RpcEncoder rpcEncoder = new RpcEncoder();$/;"	f	class:RpcChannelPiplineFactory	file:
rpcPeer	protorpc/muduo/rpc/RpcChannelPiplineFactory.java	/^    private RpcPeer rpcPeer;$/;"	f	class:RpcChannelPiplineFactory	file:
rpcPeer	protorpc/muduo/rpc/RpcMessageHandler.java	/^    private RpcPeer rpcPeer;$/;"	f	class:RpcMessageHandler	file:
rule	java/billing/RuleFactory.java	/^        public final Rule rule;$/;"	f	class:RuleFactory.CachedRule
rulePath	java/billing/RuleFactory.java	/^    private final String rulePath;$/;"	f	class:RuleFactory	file:
rules	java/billing/RuleFactory.java	/^    private final Map<String, CachedRule> rules = new ConcurrentHashMap<String, CachedRule>();$/;"	f	class:RuleFactory	file:
run	java/bankqueue/event/EventSimulator.java	/^    public void run() {$/;"	m	class:EventSimulator
run	pingpong/libevent/run_bench.sh	/^run() {$/;"	f
run	protorpc/echo/EchoClient.java	/^        public void run() {$/;"	m	class:EchoClient.SyncClient
run	protorpc/muduo/rpc/NewChannelCallback.java	/^    public abstract void run(RpcChannel channel);$/;"	m	interface:NewChannelCallback
run	protorpc/muduo/rpc/RpcChannel.java	/^        public void run(Message response) {$/;"	m	class:RpcChannel.BlockingRpcCallback
run	puzzle/Einstein.java	/^    private static void run() {$/;"	m	class:Einstein	file:
run	reactor/s02/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s03/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s04/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s05/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s06/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s07/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s08/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s09/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s10/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s11/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s12/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	reactor/s13/Timer.h	/^  void run() const$/;"	f	class:muduo::Timer
run	thread/ThreadPool.cc	/^void ThreadPool::run(const Task& task)$/;"	f	class:ThreadPool
run	thread/test/BlockingQueue_test.cc	/^  void run(int times)$/;"	f	class:Test
run	thread/test/BoundedBlockingQueue_test.cc	/^  void run(int times)$/;"	f	class:Test
run	tpc/netcat.cc	/^void run(TcpStreamPtr stream)$/;"	f
run1	reactor/s03/test5.cc	/^void run1()$/;"	f
run1	reactor/s04/test5.cc	/^void run1()$/;"	f
run1	reactor/s05/test5.cc	/^void run1()$/;"	f
run1	reactor/s06/test5.cc	/^void run1()$/;"	f
run1	reactor/s07/test5.cc	/^void run1()$/;"	f
run1	reactor/s08/test5.cc	/^void run1()$/;"	f
run1	reactor/s09/test5.cc	/^void run1()$/;"	f
run1	reactor/s10/test5.cc	/^void run1()$/;"	f
run1	reactor/s11/test5.cc	/^void run1()$/;"	f
run1	reactor/s12/test5.cc	/^void run1()$/;"	f
run1	reactor/s13/test5.cc	/^void run1()$/;"	f
run2	pingpong/libevent/run_bench.sh	/^run2() {$/;"	f
run2	reactor/s03/test5.cc	/^void run2()$/;"	f
run2	reactor/s04/test5.cc	/^void run2()$/;"	f
run2	reactor/s05/test5.cc	/^void run2()$/;"	f
run2	reactor/s06/test5.cc	/^void run2()$/;"	f
run2	reactor/s07/test5.cc	/^void run2()$/;"	f
run2	reactor/s08/test5.cc	/^void run2()$/;"	f
run2	reactor/s09/test5.cc	/^void run2()$/;"	f
run2	reactor/s10/test5.cc	/^void run2()$/;"	f
run2	reactor/s11/test5.cc	/^void run2()$/;"	f
run2	reactor/s12/test5.cc	/^void run2()$/;"	f
run2	reactor/s13/test5.cc	/^void run2()$/;"	f
run3	reactor/s03/test5.cc	/^void run3()$/;"	f
run3	reactor/s04/test5.cc	/^void run3()$/;"	f
run3	reactor/s05/test5.cc	/^void run3()$/;"	f
run3	reactor/s06/test5.cc	/^void run3()$/;"	f
run3	reactor/s07/test5.cc	/^void run3()$/;"	f
run3	reactor/s08/test5.cc	/^void run3()$/;"	f
run3	reactor/s09/test5.cc	/^void run3()$/;"	f
run3	reactor/s10/test5.cc	/^void run3()$/;"	f
run3	reactor/s11/test5.cc	/^void run3()$/;"	f
run3	reactor/s12/test5.cc	/^void run3()$/;"	f
run3	reactor/s13/test5.cc	/^void run3()$/;"	f
run4	reactor/s03/test5.cc	/^void run4()$/;"	f
run4	reactor/s04/test5.cc	/^void run4()$/;"	f
run4	reactor/s05/test5.cc	/^void run4()$/;"	f
run4	reactor/s06/test5.cc	/^void run4()$/;"	f
run4	reactor/s07/test5.cc	/^void run4()$/;"	f
run4	reactor/s08/test5.cc	/^void run4()$/;"	f
run4	reactor/s09/test5.cc	/^void run4()$/;"	f
run4	reactor/s10/test5.cc	/^void run4()$/;"	f
run4	reactor/s11/test5.cc	/^void run4()$/;"	f
run4	reactor/s12/test5.cc	/^void run4()$/;"	f
run4	reactor/s13/test5.cc	/^void run4()$/;"	f
runAfter	reactor/s02/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s03/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s04/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s05/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s06/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s07/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s08/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s09/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s10/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s11/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s12/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAfter	reactor/s13/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAsyncClients	protorpc/echo/EchoClient.java	/^    private static void runAsyncClients(SocketAddress server, int nClients, int nSelectors)$/;"	m	class:EchoClient	file:
runAt	reactor/s02/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s03/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s04/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s05/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s06/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s07/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s08/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s09/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s10/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s11/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s12/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	reactor/s13/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runClient	tpc/roundtrip_udp.cc	/^void runClient(const char* server_hostname)$/;"	f
runEvery	reactor/s02/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s03/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s04/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s05/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s06/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s07/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s08/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s09/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s10/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s11/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s12/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	reactor/s13/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s03/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s04/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s05/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s06/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s07/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s08/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s09/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s10/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s11/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s12/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInLoop	reactor/s13/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)$/;"	f	class:EventLoop
runInThread	reactor/s03/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s04/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s05/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s06/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s07/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s08/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s09/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s10/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s11/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s12/test6.cc	/^void runInThread()$/;"	f
runInThread	reactor/s13/test6.cc	/^void runInThread()$/;"	f
runInThread	thread/Thread.cc	/^  void runInThread()$/;"	f	struct:__anon4::ThreadData
runInThread	thread/ThreadPool.cc	/^void ThreadPool::runInThread()$/;"	f	class:ThreadPool
runServer	thread/test/Waiter_test.cc	/^void runServer(Waiter* waiter, int sec)$/;"	f
runServer	tpc/roundtrip_udp.cc	/^void runServer()$/;"	f
runSyncClients	protorpc/echo/EchoClient.java	/^    private static void runSyncClients(InetSocketAddress server, int nClients, int nSelectors)$/;"	m	class:EchoClient	file:
run_once	pingpong/libevent/bench.c	/^run_once(void)$/;"	f	file:
running_	logging/AsyncLoggingDoubleBuffering.h	/^  bool running_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
running_	logging/AsyncLoggingQueue.h	/^  bool running_;$/;"	m	class:muduo::AsyncLoggingT
running_	thread/ThreadPool.h	/^  bool running_;$/;"	m	class:muduo::ThreadPool
s_created	esort/sort03.cc	/^  static int s_created;$/;"	m	class:Task	file:
s_created	esort/sort03.cc	/^int Task::s_created = 0;$/;"	m	class:Task	file:
s_created	esort/sort04.cc	/^  static int s_created;$/;"	m	class:Task	file:
s_created	esort/sort04.cc	/^int Task::s_created = 0;$/;"	m	class:Task	file:
s_numCreated_	reactor/s11/Timer.h	/^  static AtomicInt64 s_numCreated_;$/;"	m	class:muduo::Timer
s_numCreated_	reactor/s12/Timer.h	/^  static AtomicInt64 s_numCreated_;$/;"	m	class:muduo::Timer
s_numCreated_	reactor/s13/Timer.h	/^  static AtomicInt64 s_numCreated_;$/;"	m	class:muduo::Timer
saddr	faketcp/faketcp.h	/^  uint32_t saddr, daddr;$/;"	m	struct:SocketAddr
saddr_	tpc/InetAddress.h	/^  struct sockaddr_in saddr_;$/;"	m	class:InetAddress	typeref:struct:InetAddress::sockaddr_in
scheduledTime	java/bankqueue/event/Event.java	/^    public final int scheduledTime;$/;"	f	class:Event
score	puzzle/poker/poker.cc	/^  int score;$/;"	m	struct:Score	file:
score	puzzle/poker/poker.py	/^def score(hand):$/;"	f
score2	puzzle/poker/poker2.py	/^def score2(hand):$/;"	f
scores	puzzle/poker/generate.py	/^	scores = []$/;"	v
search	puzzle/nqueens.cc	/^  void search(const int row)$/;"	f	struct:BackTracking
search	puzzle/nqueens_mt.cc	/^  void search(const int row)$/;"	f	struct:BackTracking
search	puzzle/nqueens_opt.cc	/^  void search(const int row)$/;"	f	struct:BackTracking
search	puzzle/nqueens_opt_mt.cc	/^  void search(const int row,$/;"	f	struct:BackTracking
selectByNthElement	algorithm/select.cc	/^vector<int> selectByNthElement(const vector<int>& input, int k1, int k2)$/;"	f
selectByPartialSort	algorithm/select.cc	/^vector<int> selectByPartialSort(const vector<int>& input, int k1, int k2)$/;"	f
selectBySorting	algorithm/select.cc	/^vector<int> selectBySorting(const vector<int>& input, int k1, int k2)$/;"	f
self	logging/LogStream.h	/^  typedef LogStream self;$/;"	t	class:muduo::LogStream
send	reactor/s08/TcpConnection.cc	/^void TcpConnection::send(const std::string& message)$/;"	f	class:TcpConnection
send	reactor/s09/TcpConnection.cc	/^void TcpConnection::send(const std::string& message)$/;"	f	class:TcpConnection
send	reactor/s10/TcpConnection.cc	/^void TcpConnection::send(const std::string& message)$/;"	f	class:TcpConnection
send	reactor/s11/TcpConnection.cc	/^void TcpConnection::send(const std::string& message)$/;"	f	class:TcpConnection
send	reactor/s12/TcpConnection.cc	/^void TcpConnection::send(const std::string& message)$/;"	f	class:TcpConnection
send	reactor/s13/TcpConnection.cc	/^void TcpConnection::send(const std::string& message)$/;"	f	class:TcpConnection
send	topk/sender.cc	/^void send(const TcpConnectionPtr& conn, WordCountList::iterator first)$/;"	f
sendAll	tpc/TcpStream.cc	/^int TcpStream::sendAll(const void* buf, int len)$/;"	f	class:TcpStream
sendAsyncRequest	protorpc/echo/EchoClient.java	/^        private void sendAsyncRequest() {$/;"	m	class:EchoClient.AsyncClient	file:
sendAsyncRequest	protorpc/sudoku/Client.java	/^    private static void sendAsyncRequest(final RpcChannel channel, RpcClient client) {$/;"	m	class:Client	file:
sendInLoop	reactor/s08/TcpConnection.cc	/^void TcpConnection::sendInLoop(const std::string& message)$/;"	f	class:TcpConnection
sendInLoop	reactor/s09/TcpConnection.cc	/^void TcpConnection::sendInLoop(const std::string& message)$/;"	f	class:TcpConnection
sendInLoop	reactor/s10/TcpConnection.cc	/^void TcpConnection::sendInLoop(const std::string& message)$/;"	f	class:TcpConnection
sendInLoop	reactor/s11/TcpConnection.cc	/^void TcpConnection::sendInLoop(const std::string& message)$/;"	f	class:TcpConnection
sendInLoop	reactor/s12/TcpConnection.cc	/^void TcpConnection::sendInLoop(const std::string& message)$/;"	f	class:TcpConnection
sendInLoop	reactor/s13/TcpConnection.cc	/^void TcpConnection::sendInLoop(const std::string& message)$/;"	f	class:TcpConnection
sendSome	tpc/TcpStream.cc	/^int TcpStream::sendSome(const void* buf, int len)$/;"	f	class:TcpStream
sender	tpc/sender.cc	/^void sender(const char* filename, TcpStreamPtr stream)$/;"	f
sentinel	puzzle/nqueens_opt.cc	/^  const uint32_t sentinel;$/;"	m	struct:BackTracking	file:
sequence	reactor/s11/Timer.h	/^  int64_t sequence() const { return sequence_; }$/;"	f	class:muduo::Timer
sequence	reactor/s12/Timer.h	/^  int64_t sequence() const { return sequence_; }$/;"	f	class:muduo::Timer
sequence	reactor/s13/Timer.h	/^  int64_t sequence() const { return sequence_; }$/;"	f	class:muduo::Timer
sequence_	reactor/s11/Timer.h	/^  const int64_t sequence_;$/;"	m	class:muduo::Timer
sequence_	reactor/s11/TimerId.h	/^  int64_t sequence_;$/;"	m	class:muduo::TimerId
sequence_	reactor/s12/Timer.h	/^  const int64_t sequence_;$/;"	m	class:muduo::Timer
sequence_	reactor/s12/TimerId.h	/^  int64_t sequence_;$/;"	m	class:muduo::TimerId
sequence_	reactor/s13/Timer.h	/^  const int64_t sequence_;$/;"	m	class:muduo::Timer
sequence_	reactor/s13/TimerId.h	/^  int64_t sequence_;$/;"	m	class:muduo::TimerId
serialVersionUID	protorpc/sudoku/Sudoku.java	/^    private static final long serialVersionUID = 0L;$/;"	f	class:Sudoku.SudokuRequest	file:
serialVersionUID	protorpc/sudoku/Sudoku.java	/^    private static final long serialVersionUID = 0L;$/;"	f	class:Sudoku.SudokuResponse	file:
serve	topk/sender.cc	/^void serve(uint16_t port)$/;"	f
serveAtWindow	java/bankqueue/Bank.java	/^    public void serveAtWindow(Customer customer, WindowType type) {$/;"	m	class:Bank
server	pingpong/asio/server.cpp	/^  server(asio::io_service& ios, const asio::ip::tcp::endpoint& endpoint,$/;"	f	class:server
server	pingpong/asio/server.cpp	/^class server$/;"	c	file:
server	python/echo-fork.py	/^    server = ForkingTCPServer(listen_address, EchoHandler)$/;"	v	class:EchoHandler
server	python/echo-single.py	/^    server = TCPServer(listen_address, EchoHandler)$/;"	v	class:EchoHandler
server	python/echo-thread.py	/^    server = ThreadingTCPServer(listen_address, EchoHandler)$/;"	v	class:EchoHandler
serverAddr	protorpc/echo/EchoClient.java	/^        private SocketAddress serverAddr;$/;"	f	class:EchoClient.AsyncClient	file:
serverAddr	protorpc/echo/EchoClient.java	/^        private SocketAddress serverAddr;$/;"	f	class:EchoClient.SyncClient	file:
serverAddr_	reactor/s11/Connector.h	/^  InetAddress serverAddr_;$/;"	m	class:muduo::Connector
serverAddr_	reactor/s12/Connector.h	/^  InetAddress serverAddr_;$/;"	m	class:muduo::Connector
serverAddr_	reactor/s13/Connector.h	/^  InetAddress serverAddr_;$/;"	m	class:muduo::Connector
serverAddress	reactor/s11/Connector.h	/^  const InetAddress& serverAddress() const { return serverAddr_; }$/;"	f	class:muduo::Connector
serverAddress	reactor/s12/Connector.h	/^  const InetAddress& serverAddress() const { return serverAddr_; }$/;"	f	class:muduo::Connector
serverAddress	reactor/s13/Connector.h	/^  const InetAddress& serverAddress() const { return serverAddr_; }$/;"	f	class:muduo::Connector
serverOut	ssl/benchmark-openssl.cc	/^muduo::net::Buffer clientOut, serverOut;$/;"	v
serverOut	ssl/benchmark-polarssl.cc	/^muduo::net::Buffer clientOut, serverOut;$/;"	v
serverThread	ssl/loop-polarssl.cc	/^void serverThread(entropy_context* entropy, int* serverFd)$/;"	f
server_socket	python/chat-poll.py	/^server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
server_socket	python/chat-reactor.py	/^server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
server_socket	python/echo-iterative.py	/^    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
server_socket	python/echo-poll.py	/^server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
server_socket	python/echo-reactor.py	/^server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
serversocket	python/tcprelay.py	/^serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
serviceTime	java/bankqueue/customer/Customer.java	/^    public final int serviceTime;$/;"	f	class:Customer
service_	protorpc/muduo/rpc/proto/RpcProto.java	/^      private Object service_ = "";$/;"	f	class:RpcProto.RpcMessage.Builder	file:
service_	protorpc/muduo/rpc/proto/RpcProto.java	/^    private Object service_;$/;"	f	class:RpcProto.RpcMessage	file:
services	protorpc/muduo/rpc/RpcChannel.java	/^    private Map<String, Service> services;$/;"	f	class:RpcChannel	file:
services	protorpc/muduo/rpc/RpcPeer.java	/^    protected Map<String, Service> services = new ConcurrentHashMap<String, Service>();$/;"	f	class:RpcPeer
session	pingpong/asio/client.cpp	/^  session(asio::io_service& ios, size_t block_size, stats& s)$/;"	f	class:session
session	pingpong/asio/client.cpp	/^class session$/;"	c	file:
session	pingpong/asio/server.cpp	/^  session(asio::io_service& ios, size_t block_size)$/;"	f	class:session
session	pingpong/asio/server.cpp	/^class session$/;"	c	file:
sessions_	pingpong/asio/client.cpp	/^  std::list<session*> sessions_;$/;"	m	class:client	file:
set	puzzle/huarong.cc	/^  void set(int8_t value, int y, int x)$/;"	f	struct:Mask
setAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder setAnswerer(String value) {$/;"	m	class:QueryProtos.Answer.Builder
setAnswerer	protorpc/muduo/codec/tests/QueryProtos.java	/^      void setAnswerer(com.google.protobuf.ByteString value) {$/;"	m	class:QueryProtos.Answer.Builder
setChannel	protorpc/muduo/rpc/RpcMessageHandler.java	/^    public void setChannel(RpcChannel ch) {$/;"	m	class:RpcMessageHandler
setCheckerboard	protorpc/sudoku/Sudoku.java	/^      public Builder setCheckerboard(String value) {$/;"	m	class:Sudoku.SudokuRequest.Builder
setCheckerboard	protorpc/sudoku/Sudoku.java	/^      public Builder setCheckerboard(String value) {$/;"	m	class:Sudoku.SudokuResponse.Builder
setCheckerboard	protorpc/sudoku/Sudoku.java	/^      void setCheckerboard(com.google.protobuf.ByteString value) {$/;"	m	class:Sudoku.SudokuRequest.Builder
setCheckerboard	protorpc/sudoku/Sudoku.java	/^      void setCheckerboard(com.google.protobuf.ByteString value) {$/;"	m	class:Sudoku.SudokuResponse.Builder
setCloseCallback	reactor/s06/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setCloseCallback	reactor/s06/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::TcpConnection
setCloseCallback	reactor/s07/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setCloseCallback	reactor/s07/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::TcpConnection
setCloseCallback	reactor/s08/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setCloseCallback	reactor/s08/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::TcpConnection
setCloseCallback	reactor/s09/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setCloseCallback	reactor/s09/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::TcpConnection
setCloseCallback	reactor/s10/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setCloseCallback	reactor/s10/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::TcpConnection
setCloseCallback	reactor/s11/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setCloseCallback	reactor/s11/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::TcpConnection
setCloseCallback	reactor/s12/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setCloseCallback	reactor/s12/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::TcpConnection
setCloseCallback	reactor/s13/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setCloseCallback	reactor/s13/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s05/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s05/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setConnectionCallback	reactor/s06/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s06/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setConnectionCallback	reactor/s07/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s07/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setConnectionCallback	reactor/s08/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s08/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setConnectionCallback	reactor/s09/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s09/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setConnectionCallback	reactor/s10/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s10/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setConnectionCallback	reactor/s11/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s11/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setConnectionCallback	reactor/s12/TcpClient.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpClient
setConnectionCallback	reactor/s12/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s12/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setConnectionCallback	reactor/s13/TcpClient.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpClient
setConnectionCallback	reactor/s13/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpConnection
setConnectionCallback	reactor/s13/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::TcpServer
setCookie	logging/LogStream.h	/^  void setCookie(void (*cookie)()) { cookie_ = cookie; }$/;"	f	class:muduo::detail::FixedBuffer
setError	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder setError(muduo.rpc.proto.RpcProto.ErrorCode value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setErrorCallback	reactor/s01/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s02/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s03/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s04/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s05/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s06/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s07/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s08/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s09/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s10/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s11/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s12/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setErrorCallback	reactor/s13/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setFactory	java/billing/Rule.java	/^    public void setFactory(RuleFactory factory) {$/;"	m	class:Rule
setFlush	logging/Logging.cc	/^void Logger::setFlush(FlushFunc flush)$/;"	f	class:Logger
setId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder setId(int value) {$/;"	m	class:QueryProtos.Empty.Builder
setId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder setId(long value) {$/;"	m	class:QueryProtos.Answer.Builder
setId	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder setId(long value) {$/;"	m	class:QueryProtos.Query.Builder
setId	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder setId(long value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setInterestOps	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture setInterestOps(int interestOps) {$/;"	m	class:MockChannel
setLogLevel	logging/Logging.cc	/^void Logger::setLogLevel(Logger::LogLevel level)$/;"	f	class:Logger
setMessageCallback	reactor/s05/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s05/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMessageCallback	reactor/s06/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s06/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMessageCallback	reactor/s07/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s07/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMessageCallback	reactor/s08/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s08/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMessageCallback	reactor/s09/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s09/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMessageCallback	reactor/s10/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s10/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMessageCallback	reactor/s11/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s11/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMessageCallback	reactor/s12/TcpClient.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpClient
setMessageCallback	reactor/s12/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s12/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMessageCallback	reactor/s13/TcpClient.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpClient
setMessageCallback	reactor/s13/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpConnection
setMessageCallback	reactor/s13/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::TcpServer
setMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder setMethod(String value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setMethod	protorpc/muduo/rpc/proto/RpcProto.java	/^      void setMethod(com.google.protobuf.ByteString value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setName	thread/test/SingletonThreadLocal_test.cc	/^  void setName(const std::string& n) { name_ = n; }$/;"	f	class:Test
setName	thread/test/Singleton_test.cc	/^  void setName(const std::string& n) { name_ = n; }$/;"	f	class:Test
setName	thread/test/ThreadLocalSingleton_test.cc	/^  void setName(const std::string& n) { name_ = n; }$/;"	f	class:Test
setName	thread/test/ThreadLocal_test.cc	/^  void setName(const std::string& n) { name_ = n; }$/;"	f	class:Test
setNewChannelCallback	protorpc/muduo/rpc/RpcPeer.java	/^    public void setNewChannelCallback(NewChannelCallback newChannelCallback) {$/;"	m	class:RpcPeer
setNewConnectionCallback	reactor/s04/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s05/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s06/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s07/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s08/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s09/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s10/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s11/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s11/Connector.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Connector
setNewConnectionCallback	reactor/s12/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s12/Connector.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Connector
setNewConnectionCallback	reactor/s13/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Acceptor
setNewConnectionCallback	reactor/s13/Connector.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::Connector
setNonBlockAndCloseOnExec	reactor/s04/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon5
setNonBlockAndCloseOnExec	reactor/s05/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon12
setNonBlockAndCloseOnExec	reactor/s06/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon10
setNonBlockAndCloseOnExec	reactor/s07/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon11
setNonBlockAndCloseOnExec	reactor/s08/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon14
setNonBlockAndCloseOnExec	reactor/s09/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon13
setNonBlockAndCloseOnExec	reactor/s10/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon6
setNonBlockAndCloseOnExec	reactor/s11/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon15
setNonBlockAndCloseOnExec	reactor/s12/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon7
setNonBlockAndCloseOnExec	reactor/s13/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon8
setNonBlocking	python/netcat-nonblock.py	/^def setNonBlocking(fd):$/;"	f
setOutput	logging/Logging.cc	/^void Logger::setOutput(OutputFunc out)$/;"	f	class:Logger
setPayload	protorpc/echo/EchoProto.java	/^      public Builder setPayload(String value) {$/;"	m	class:EchoProto.EchoRequest.Builder
setPayload	protorpc/echo/EchoProto.java	/^      public Builder setPayload(String value) {$/;"	m	class:EchoProto.EchoResponse.Builder
setPayload	protorpc/echo/EchoProto.java	/^      void setPayload(com.google.protobuf.ByteString value) {$/;"	m	class:EchoProto.EchoRequest.Builder
setPayload	protorpc/echo/EchoProto.java	/^      void setPayload(com.google.protobuf.ByteString value) {$/;"	m	class:EchoProto.EchoResponse.Builder
setPort	tpc/InetAddress.h	/^  void setPort(uint16_t port) { saddr_.sin_port = htons(port); }$/;"	f	class:InetAddress
setQuestion	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder setQuestion($/;"	m	class:QueryProtos.Query.Builder
setQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder setQuestioner(String value) {$/;"	m	class:QueryProtos.Answer.Builder
setQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder setQuestioner(String value) {$/;"	m	class:QueryProtos.Query.Builder
setQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      void setQuestioner(com.google.protobuf.ByteString value) {$/;"	m	class:QueryProtos.Answer.Builder
setQuestioner	protorpc/muduo/codec/tests/QueryProtos.java	/^      void setQuestioner(com.google.protobuf.ByteString value) {$/;"	m	class:QueryProtos.Query.Builder
setReadCallback	reactor/s01/Channel.h	/^  void setReadCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s02/Channel.h	/^  void setReadCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s03/Channel.h	/^  void setReadCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s04/Channel.h	/^  void setReadCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s05/Channel.h	/^  void setReadCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s06/Channel.h	/^  void setReadCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s07/Channel.h	/^  void setReadCallback(const ReadEventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s08/Channel.h	/^  void setReadCallback(const ReadEventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s09/Channel.h	/^  void setReadCallback(const ReadEventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s10/Channel.h	/^  void setReadCallback(const ReadEventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s11/Channel.h	/^  void setReadCallback(const ReadEventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s12/Channel.h	/^  void setReadCallback(const ReadEventCallback& cb)$/;"	f	class:muduo::Channel
setReadCallback	reactor/s13/Channel.h	/^  void setReadCallback(const ReadEventCallback& cb)$/;"	f	class:muduo::Channel
setReadable	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture setReadable(boolean readable) {$/;"	m	class:MockChannel
setRequest	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder setRequest(com.google.protobuf.ByteString value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setResponse	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder setResponse(com.google.protobuf.ByteString value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setReuseAddr	reactor/s04/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s05/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s06/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s07/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s08/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s09/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s10/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s11/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s12/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	reactor/s13/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReuseAddr	tpc/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setService	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder setService(String value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setService	protorpc/muduo/rpc/proto/RpcProto.java	/^      void setService(com.google.protobuf.ByteString value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setServiceMap	protorpc/muduo/rpc/RpcChannel.java	/^    public void setServiceMap(Map<String, Service> services) {$/;"	m	class:RpcChannel
setSockAddrInet	reactor/s04/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s05/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s06/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s07/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s08/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s09/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s10/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s11/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s12/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	reactor/s13/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }$/;"	f	class:muduo::InetAddress
setSockAddrInet	tpc/InetAddress.h	/^  void setSockAddrInet(const struct sockaddr_in& saddr) { saddr_ = saddr; }$/;"	f	class:InetAddress
setSolution	protorpc/muduo/codec/tests/QueryProtos.java	/^      public Builder setSolution($/;"	m	class:QueryProtos.Answer.Builder
setSolved	protorpc/sudoku/Sudoku.java	/^      public Builder setSolved(boolean value) {$/;"	m	class:Sudoku.SudokuResponse.Builder
setState	java/billing/Rule.java	/^    public void setState(Object state) {$/;"	m	class:Rule
setState	reactor/s05/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setState	reactor/s06/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setState	reactor/s07/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setState	reactor/s08/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setState	reactor/s09/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setState	reactor/s10/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setState	reactor/s11/Connector.h	/^  void setState(States s) { state_ = s; }$/;"	f	class:muduo::Connector
setState	reactor/s11/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setState	reactor/s12/Connector.h	/^  void setState(States s) { state_ = s; }$/;"	f	class:muduo::Connector
setState	reactor/s12/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setState	reactor/s13/Connector.h	/^  void setState(States s) { state_ = s; }$/;"	f	class:muduo::Connector
setState	reactor/s13/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::TcpConnection
setTcpNoDelay	reactor/s09/Socket.cc	/^void Socket::setTcpNoDelay(bool on)$/;"	f	class:Socket
setTcpNoDelay	reactor/s09/TcpConnection.cc	/^void TcpConnection::setTcpNoDelay(bool on)$/;"	f	class:TcpConnection
setTcpNoDelay	reactor/s10/Socket.cc	/^void Socket::setTcpNoDelay(bool on)$/;"	f	class:Socket
setTcpNoDelay	reactor/s10/TcpConnection.cc	/^void TcpConnection::setTcpNoDelay(bool on)$/;"	f	class:TcpConnection
setTcpNoDelay	reactor/s11/Socket.cc	/^void Socket::setTcpNoDelay(bool on)$/;"	f	class:Socket
setTcpNoDelay	reactor/s11/TcpConnection.cc	/^void TcpConnection::setTcpNoDelay(bool on)$/;"	f	class:TcpConnection
setTcpNoDelay	reactor/s12/Socket.cc	/^void Socket::setTcpNoDelay(bool on)$/;"	f	class:Socket
setTcpNoDelay	reactor/s12/TcpConnection.cc	/^void TcpConnection::setTcpNoDelay(bool on)$/;"	f	class:TcpConnection
setTcpNoDelay	reactor/s13/Socket.cc	/^void Socket::setTcpNoDelay(bool on)$/;"	f	class:Socket
setTcpNoDelay	reactor/s13/TcpConnection.cc	/^void TcpConnection::setTcpNoDelay(bool on)$/;"	f	class:TcpConnection
setTcpNoDelay	tpc/Socket.cc	/^void Socket::setTcpNoDelay(bool on)$/;"	f	class:Socket
setTcpNoDelay	tpc/TcpStream.cc	/^void TcpStream::setTcpNoDelay(bool on)$/;"	f	class:TcpStream
setThreadNum	reactor/s10/EventLoopThreadPool.h	/^  void setThreadNum(int numThreads) { numThreads_ = numThreads; }$/;"	f	class:muduo::EventLoopThreadPool
setThreadNum	reactor/s10/TcpServer.cc	/^void TcpServer::setThreadNum(int numThreads)$/;"	f	class:TcpServer
setThreadNum	reactor/s11/EventLoopThreadPool.h	/^  void setThreadNum(int numThreads) { numThreads_ = numThreads; }$/;"	f	class:muduo::EventLoopThreadPool
setThreadNum	reactor/s11/TcpServer.cc	/^void TcpServer::setThreadNum(int numThreads)$/;"	f	class:TcpServer
setThreadNum	reactor/s12/EventLoopThreadPool.h	/^  void setThreadNum(int numThreads) { numThreads_ = numThreads; }$/;"	f	class:muduo::EventLoopThreadPool
setThreadNum	reactor/s12/TcpServer.cc	/^void TcpServer::setThreadNum(int numThreads)$/;"	f	class:TcpServer
setThreadNum	reactor/s13/EventLoopThreadPool.h	/^  void setThreadNum(int numThreads) { numThreads_ = numThreads; }$/;"	f	class:muduo::EventLoopThreadPool
setThreadNum	reactor/s13/TcpServer.cc	/^void TcpServer::setThreadNum(int numThreads)$/;"	f	class:TcpServer
setType	protorpc/muduo/rpc/proto/RpcProto.java	/^      public Builder setType(muduo.rpc.proto.RpcProto.MessageType value) {$/;"	m	class:RpcProto.RpcMessage.Builder
setUp	java/bankqueue/tests/BankTest.java	/^    public void setUp() {$/;"	m	class:BankTest
setUp	puzzle/poker/poker_test.py	/^	def setUp(self):$/;"	m	class:TestPoker
setValue	basic/uint.h	/^  void setValue(int n, uint32_t x)$/;"	f	class:UnsignedInt
setWriteCallback	reactor/s01/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s02/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s03/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s04/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s05/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s06/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s07/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s08/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s09/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s10/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s11/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s12/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCallback	reactor/s13/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::Channel
setWriteCompleteCallback	reactor/s09/TcpConnection.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpConnection
setWriteCompleteCallback	reactor/s09/TcpServer.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpServer
setWriteCompleteCallback	reactor/s10/TcpConnection.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpConnection
setWriteCompleteCallback	reactor/s10/TcpServer.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpServer
setWriteCompleteCallback	reactor/s11/TcpConnection.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpConnection
setWriteCompleteCallback	reactor/s11/TcpServer.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpServer
setWriteCompleteCallback	reactor/s12/TcpClient.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpClient
setWriteCompleteCallback	reactor/s12/TcpConnection.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpConnection
setWriteCompleteCallback	reactor/s12/TcpServer.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpServer
setWriteCompleteCallback	reactor/s13/TcpClient.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpClient
setWriteCompleteCallback	reactor/s13/TcpConnection.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpConnection
setWriteCompleteCallback	reactor/s13/TcpServer.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::TcpServer
set_index	reactor/s01/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s02/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s03/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s04/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s05/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s06/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s07/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s08/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s09/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s10/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s11/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s12/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_index	reactor/s13/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::Channel
set_revents	reactor/s01/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s02/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s03/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s04/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s05/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s06/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s07/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s08/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s09/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s10/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s11/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s12/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_revents	reactor/s13/Channel.h	/^  void set_revents(int revt) { revents_ = revt; }$/;"	f	class:muduo::Channel
set_tcp_no_delay	pingpong/libevent/client.c	/^static void set_tcp_no_delay(evutil_socket_t fd)$/;"	f	file:
set_tcp_no_delay	pingpong/libevent/server-half-close.c	/^static void set_tcp_no_delay(evutil_socket_t fd)$/;"	f	file:
set_tcp_no_delay	pingpong/libevent/server-line-echo.c	/^static void set_tcp_no_delay(evutil_socket_t fd)$/;"	f	file:
set_tcp_no_delay	pingpong/libevent/server.c	/^static void set_tcp_no_delay(evutil_socket_t fd)$/;"	f	file:
sethostaddr	faketcp/faketcp.cc	/^int sethostaddr(const char* dev)$/;"	f
setup	puzzle/dance.cc	/^  void setup()$/;"	f	struct:Dance
setupNewChannel	protorpc/muduo/rpc/RpcPeer.java	/^    protected void setupNewChannel(RpcChannel rpcChannel) {$/;"	m	class:RpcPeer
sevenCustomers	java/bankqueue/tests/BankTest.java	/^    public void sevenCustomers() {$/;"	m	class:BankTest
shape	puzzle/huarong.cc	/^  Shape shape;$/;"	m	struct:Block	file:
shrink	reactor/s07/Buffer.h	/^  void shrink(size_t reserve)$/;"	f	class:muduo::Buffer
shrink	reactor/s08/Buffer.h	/^  void shrink(size_t reserve)$/;"	f	class:muduo::Buffer
shrink	reactor/s09/Buffer.h	/^  void shrink(size_t reserve)$/;"	f	class:muduo::Buffer
shrink	reactor/s10/Buffer.h	/^  void shrink(size_t reserve)$/;"	f	class:muduo::Buffer
shrink	reactor/s11/Buffer.h	/^  void shrink(size_t reserve)$/;"	f	class:muduo::Buffer
shrink	reactor/s12/Buffer.h	/^  void shrink(size_t reserve)$/;"	f	class:muduo::Buffer
shrink	reactor/s13/Buffer.h	/^  void shrink(size_t reserve)$/;"	f	class:muduo::Buffer
shuffle	puzzle/query_freq.cc	/^void shuffle(int nbuckets, int argc, char* argv[])$/;"	f
shutdown	reactor/s08/TcpConnection.cc	/^void TcpConnection::shutdown()$/;"	f	class:TcpConnection
shutdown	reactor/s09/TcpConnection.cc	/^void TcpConnection::shutdown()$/;"	f	class:TcpConnection
shutdown	reactor/s10/TcpConnection.cc	/^void TcpConnection::shutdown()$/;"	f	class:TcpConnection
shutdown	reactor/s11/TcpConnection.cc	/^void TcpConnection::shutdown()$/;"	f	class:TcpConnection
shutdown	reactor/s12/TcpConnection.cc	/^void TcpConnection::shutdown()$/;"	f	class:TcpConnection
shutdown	reactor/s13/TcpConnection.cc	/^void TcpConnection::shutdown()$/;"	f	class:TcpConnection
shutdownInLoop	reactor/s08/TcpConnection.cc	/^void TcpConnection::shutdownInLoop()$/;"	f	class:TcpConnection
shutdownInLoop	reactor/s09/TcpConnection.cc	/^void TcpConnection::shutdownInLoop()$/;"	f	class:TcpConnection
shutdownInLoop	reactor/s10/TcpConnection.cc	/^void TcpConnection::shutdownInLoop()$/;"	f	class:TcpConnection
shutdownInLoop	reactor/s11/TcpConnection.cc	/^void TcpConnection::shutdownInLoop()$/;"	f	class:TcpConnection
shutdownInLoop	reactor/s12/TcpConnection.cc	/^void TcpConnection::shutdownInLoop()$/;"	f	class:TcpConnection
shutdownInLoop	reactor/s13/TcpConnection.cc	/^void TcpConnection::shutdownInLoop()$/;"	f	class:TcpConnection
shutdownWrite	reactor/s08/Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:Socket
shutdownWrite	reactor/s08/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd)$/;"	f	class:sockets
shutdownWrite	reactor/s09/Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:Socket
shutdownWrite	reactor/s09/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd)$/;"	f	class:sockets
shutdownWrite	reactor/s10/Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:Socket
shutdownWrite	reactor/s10/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd)$/;"	f	class:sockets
shutdownWrite	reactor/s11/Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:Socket
shutdownWrite	reactor/s11/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd)$/;"	f	class:sockets
shutdownWrite	reactor/s12/Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:Socket
shutdownWrite	reactor/s12/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd)$/;"	f	class:sockets
shutdownWrite	reactor/s13/Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:Socket
shutdownWrite	reactor/s13/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd)$/;"	f	class:sockets
shutdownWrite	tpc/Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:Socket
shutdownWrite	tpc/TcpStream.cc	/^void TcpStream::shutdownWrite()$/;"	f	class:TcpStream
sigalarm	thread/test/Waiter_test.cc	/^void sigalarm(int)$/;"	f
signal_cb	pingpong/libevent/server-half-close.c	/^static void signal_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	file:
signal_cb	pingpong/libevent/server-line-echo.c	/^static void signal_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	file:
signal_cb	pingpong/libevent/server.c	/^static void signal_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	file:
signaled_	thread/test/Waiter_test.cc	/^  bool signaled_ = false;$/;"	m	class:Waiter3	file:
signaled_	thread/test/Waiter_test.cc	/^  bool signaled_ = false;$/;"	m	class:Waiter4	file:
signaled_	thread/test/Waiter_test.cc	/^  bool signaled_ = false;$/;"	m	class:Waiter5	file:
signaled_	thread/test/Waiter_test.cc	/^  bool signaled_ = false;$/;"	m	class:Waiter6	file:
signaled_	thread/test/Waiter_test.cc	/^  bool signaled_ = false;$/;"	m	class:Waiter7	file:
signaled_	thread/test/Waiter_test.cc	/^  bool signaled_ = false;$/;"	m	class:Waiter8	file:
signaled_	thread/test/Waiter_test.cc	/^  bool signaled_ = false;$/;"	m	class:WaiterInMuduo	file:
simulate	java/bankqueue/Bank.java	/^    public void simulate(int numCustomers) {$/;"	m	class:Bank
simulator	java/bankqueue/Bank.java	/^    private EventSimulator simulator = new EventSimulator();$/;"	f	class:Bank	file:
sixNormalCustomers	java/bankqueue/tests/BankTest.java	/^    public void sixNormalCustomers() {$/;"	m	class:BankTest
size	puzzle/Einstein.java	/^    static final int size = 5;$/;"	f	class:Einstein
size	puzzle/dance.cc	/^    int size;$/;"	m	struct:Node	file:
size	string/StringEager.h	/^  size_type size() const { return size_; }$/;"	f	class:muduo::StringEager
size	string/StringTrivial.h	/^  size_t size() const$/;"	f	class:trivial::String
size	sudoku/sudoku_dancing_links.cc	/^    int size;$/;"	m	struct:Node	file:
size	thread/BlockingQueue.h	/^  size_t size() const$/;"	f	class:muduo::BlockingQueue
size	thread/BoundedBlockingQueue.h	/^  size_t size() const$/;"	f	class:muduo::BoundedBlockingQueue
size_	string/StringEager.h	/^  size_type size_;$/;"	m	class:muduo::StringEager
size_	string/StringSso.h	/^  uint32_t size_;$/;"	m	class:muduo::StringSso
size_type	string/StringEager.h	/^  typedef uint32_t      size_type;$/;"	t	class:muduo::StringEager
size_type	string/StringSso.h	/^  typedef uint32_t      size_type;$/;"	t	class:muduo::StringSso
sizeof	reactor/s04/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s05/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s06/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s07/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s08/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s09/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s10/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s11/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s12/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sizeof	reactor/s13/InetAddress.cc	/^BOOST_STATIC_ASSERT(sizeof(InetAddress) == sizeof(struct sockaddr_in));$/;"	v
sleepSeconds	reactor/s09/test10.cc	/^int sleepSeconds = 0;$/;"	v
sleep_per_byte	python/tcprelay.py	/^sleep_per_byte = 0.0001$/;"	v
slots_	thread/SignalSlot.h	/^  boost::shared_ptr<SlotList> slots_;$/;"	m	struct:muduo::detail::SignalImpl
small	puzzle/waterpour.cc	/^  int small;$/;"	m	struct:State	file:
snd_una	faketcp/echoall2.cc	/^  uint32_t snd_una;$/;"	m	struct:TcpState	file:
sock	python/self-connect.py	/^            sock = socket.create_connection(('localhost', port))$/;"	v
sock	python/tcprelay.py	/^    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
sock_	tpc/TcpStream.h	/^  Socket sock_;$/;"	m	class:TcpStream
sockaddr_cast	reactor/s04/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon5
sockaddr_cast	reactor/s04/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon5
sockaddr_cast	reactor/s05/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon12
sockaddr_cast	reactor/s05/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon12
sockaddr_cast	reactor/s06/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon10
sockaddr_cast	reactor/s06/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon10
sockaddr_cast	reactor/s07/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon11
sockaddr_cast	reactor/s07/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon11
sockaddr_cast	reactor/s08/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon14
sockaddr_cast	reactor/s08/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon14
sockaddr_cast	reactor/s09/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon13
sockaddr_cast	reactor/s09/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon13
sockaddr_cast	reactor/s10/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon6
sockaddr_cast	reactor/s10/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon6
sockaddr_cast	reactor/s11/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon15
sockaddr_cast	reactor/s11/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon15
sockaddr_cast	reactor/s12/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon7
sockaddr_cast	reactor/s12/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon7
sockaddr_cast	reactor/s13/SocketsOps.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon8
sockaddr_cast	reactor/s13/SocketsOps.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon8
sockaddr_cast	tpc/Socket.cc	/^SA* sockaddr_cast(struct sockaddr_in* addr)$/;"	f	namespace:__anon17
sockaddr_cast	tpc/Socket.cc	/^const SA* sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	namespace:__anon17
socket	pingpong/asio/server.cpp	/^  asio::ip::tcp::socket& socket()$/;"	f	class:session
socket_	pingpong/asio/client.cpp	/^  asio::ip::tcp::socket socket_;$/;"	m	class:session	file:
socket_	pingpong/asio/server.cpp	/^  asio::ip::tcp::socket socket_;$/;"	m	class:session	file:
socket_	reactor/s05/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
socket_	reactor/s06/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
socket_	reactor/s07/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
socket_	reactor/s08/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
socket_	reactor/s09/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
socket_	reactor/s10/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
socket_	reactor/s11/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
socket_	reactor/s12/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
socket_	reactor/s13/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;$/;"	m	class:muduo::TcpConnection
sockets	reactor/s04/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s05/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s06/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s07/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s08/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s09/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s10/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s11/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s12/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockets	reactor/s13/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo
sockfd_	reactor/s04/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s05/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s06/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s07/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s08/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s09/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s10/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s11/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s12/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	reactor/s13/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::Socket
sockfd_	tpc/Socket.h	/^  int sockfd_;$/;"	m	class:Socket
solar_mass	puzzle/nbody.c	74;"	d	file:
solar_mass	puzzle/nbody.cc	/^double const solar_mass = 4 * M_PI * M_PI;$/;"	v
solution_	protorpc/muduo/codec/tests/QueryProtos.java	/^      private com.google.protobuf.LazyStringList solution_ = com.google.protobuf.LazyStringArrayList.EMPTY;$/;"	f	class:QueryProtos.Answer.Builder	file:
solution_	protorpc/muduo/codec/tests/QueryProtos.java	/^    private com.google.protobuf.LazyStringList solution_;$/;"	f	class:QueryProtos.Answer	file:
solve	protorpc/sudoku/Sudoku.java	/^      public  void solve($/;"	m	class:Sudoku.SudokuService.Stub
solve	protorpc/sudoku/Sudoku.java	/^      public abstract void solve($/;"	m	interface:Sudoku.SudokuService.Interface
solve	protorpc/sudoku/Sudoku.java	/^      public sudoku.Sudoku.SudokuResponse solve($/;"	m	class:Sudoku.SudokuService.BlockingStub
solve	protorpc/sudoku/Sudoku.java	/^      public sudoku.Sudoku.SudokuResponse solve($/;"	m	interface:Sudoku.SudokuService.BlockingInterface
solve	protorpc/sudoku/Sudoku.java	/^    public abstract void solve($/;"	m	class:Sudoku.SudokuService
solve	protorpc/sudoku/SudokuImpl.java	/^    public void solve(RpcController controller, SudokuRequest request,$/;"	m	class:SudokuImpl
solve	puzzle/dance.cc	/^  bool solve()$/;"	f	struct:Dance
solve	sudoku/sudoku_dancing_links.cc	/^    bool solve()$/;"	f	struct:Dance
solve_sudoku_basic	sudoku/sudoku_basic.cc	/^bool solve_sudoku_basic(int which_space)$/;"	f
solve_sudoku_dancing_links	sudoku/sudoku_dancing_links.cc	/^bool solve_sudoku_dancing_links(int unused)$/;"	f
solve_sudoku_min_arity	sudoku/sudoku_min_arity.cc	/^bool solve_sudoku_min_arity(int which_space)$/;"	f
solve_sudoku_min_arity_cache	sudoku/sudoku_min_arity_cache.cc	/^bool solve_sudoku_min_arity_cache(int which_space)$/;"	f
solved	sudoku/neighbor.cc	/^bool solved()$/;"	f
solved_	protorpc/sudoku/Sudoku.java	/^      private boolean solved_ ;$/;"	f	class:Sudoku.SudokuResponse.Builder	file:
solved_	protorpc/sudoku/Sudoku.java	/^    private boolean solved_;$/;"	f	class:Sudoku.SudokuResponse	file:
someFunctionMayCallExit	thread/test/ExitDeadLock.cc	/^void someFunctionMayCallExit()$/;"	f
sone	thread/test/SignalSlot_test.cc	/^void Foo::sone(int x)$/;"	f	class:Foo
soneString	thread/test/SignalSlot_test.cc	/^void Foo::soneString(const String& str)$/;"	f	class:Foo
sort	esort/sort01.cc	/^void sort(const std::vector<string>& data, std::vector<Key>* keys)$/;"	f
sort	esort/sort02.cc	/^void sort(const std::vector<string>& data, std::vector<Key>* keys)$/;"	f
sort	esort/sort03.cc	/^  void sort()$/;"	f	class:Task
sort	esort/sort04.cc	/^  void sort()$/;"	f	class:Task
sortSplit	esort/sort02.cc	/^int sortSplit(const char* filename)$/;"	f
sortSplit	esort/sort03.cc	/^int sortSplit(const char* filename)$/;"	f
sortSplit	esort/sort04.cc	/^int sortSplit(const char* filename)$/;"	f
sortWithKeys	esort/sort03.cc	/^void sortWithKeys(const std::vector<string>& data, std::vector<Key>* keys)$/;"	f
sortWithKeys	esort/sort04.cc	/^void sortWithKeys(const Data& data, std::vector<Key>* keys)$/;"	f
sorted_	esort/sort03.cc	/^  bool sorted_;$/;"	m	class:Task	file:
sorted_	esort/sort04.cc	/^  bool sorted_;$/;"	m	class:Task	file:
source	esort/sort10.cc	/^  Source* source;$/;"	m	struct:Record	file:
source	esort/sort11.cc	/^  Source* source;$/;"	m	struct:Record	file:
source	esort/sort12.cc	/^  Source* source;$/;"	m	struct:Record	file:
spaces	sudoku/sudoku_basic.cc	/^int spaces[N];$/;"	v
splitLine	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    private static void splitLine(Document doc, PdfWriter writer) {$/;"	m	class:PdfHack	file:
sport	faketcp/faketcp.h	/^  uint16_t sport, dport;$/;"	m	struct:SocketAddr
st	puzzle/waterpour.cc	/^  State st;$/;"	m	struct:Step	file:
stackTrace	thread/Exception.cc	/^const char* Exception::stackTrace() const throw()$/;"	f	class:Exception
stack_	puzzle/dance.cc	/^  vector<Node*> stack_;$/;"	m	struct:Dance	file:
stack_	sudoku/sudoku_dancing_links.cc	/^    vector<Node*> stack_;$/;"	m	struct:Dance	file:
stack_	thread/Exception.h	/^  std::string stack_;$/;"	m	class:muduo::Exception
start	logging/AsyncLoggingDoubleBuffering.h	/^  void start()$/;"	f	class:muduo::AsyncLoggingDoubleBuffering
start	logging/AsyncLoggingQueue.h	/^  void start()$/;"	f	class:muduo::AsyncLoggingT
start	pingpong/asio/client.cpp	/^  void start(asio::ip::tcp::resolver::iterator endpoint_iterator)$/;"	f	class:session
start	pingpong/asio/server.cpp	/^  void start()$/;"	f	class:session
start	protorpc/echo/EchoClient.java	/^        public void start() {$/;"	m	class:EchoClient.AsyncClient
start	protorpc/muduo/rpc/RpcServer.java	/^    public void start(int port) {$/;"	m	class:RpcServer
start	puzzle/poker/bench.py	/^	start = time.time()$/;"	v
start	reactor/s05/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	reactor/s06/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	reactor/s07/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	reactor/s08/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	reactor/s09/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	reactor/s10/EventLoopThreadPool.cc	/^void EventLoopThreadPool::start()$/;"	f	class:EventLoopThreadPool
start	reactor/s10/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	reactor/s11/Connector.cc	/^void Connector::start()$/;"	f	class:Connector
start	reactor/s11/EventLoopThreadPool.cc	/^void EventLoopThreadPool::start()$/;"	f	class:EventLoopThreadPool
start	reactor/s11/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	reactor/s12/Connector.cc	/^void Connector::start()$/;"	f	class:Connector
start	reactor/s12/EventLoopThreadPool.cc	/^void EventLoopThreadPool::start()$/;"	f	class:EventLoopThreadPool
start	reactor/s12/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	reactor/s13/Connector.cc	/^void Connector::start()$/;"	f	class:Connector
start	reactor/s13/EventLoopThreadPool.cc	/^void EventLoopThreadPool::start()$/;"	f	class:EventLoopThreadPool
start	reactor/s13/TcpServer.cc	/^void TcpServer::start()$/;"	f	class:TcpServer
start	thread/Thread.cc	/^void Thread::start()$/;"	f	class:Thread
start	thread/ThreadPool.cc	/^void ThreadPool::start(int numThreads)$/;"	f	class:ThreadPool
startConnect	protorpc/muduo/rpc/RpcClient.java	/^    public void startConnect(SocketAddress addr, NewChannelCallback newChannelCallback) {$/;"	m	class:RpcClient
startInLoop	reactor/s11/Connector.cc	/^void Connector::startInLoop()$/;"	f	class:Connector
startInLoop	reactor/s12/Connector.cc	/^void Connector::startInLoop()$/;"	f	class:Connector
startInLoop	reactor/s13/Connector.cc	/^void Connector::startInLoop()$/;"	f	class:Connector
startIp	algorithm/iprange.cc	/^  uint32_t startIp;  \/\/ inclusive$/;"	m	struct:IPrange	file:
startLatch	protorpc/echo/EchoClient.java	/^    static CountDownLatch allConnected, startLatch, allFinished;$/;"	f	class:EchoClient
startLoop	reactor/s03/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s04/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s05/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s06/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s07/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s08/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s09/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s10/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s11/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s12/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startLoop	reactor/s13/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop()$/;"	f	class:EventLoopThread
startOfPeriod_	logging/LogFile.h	/^  time_t startOfPeriod_;$/;"	m	class:muduo::LogFile
startThread	thread/Thread.cc	/^void* startThread(void* obj)$/;"	f	namespace:__anon4
start_	string/StringEager.h	/^  char* start_;$/;"	m	class:muduo::StringEager
start_	string/StringSso.h	/^  char* start_;$/;"	m	class:muduo::StringSso
started	thread/Thread.h	/^  bool started() const { return started_; }$/;"	f	class:muduo::Thread
started_	reactor/s05/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	reactor/s06/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	reactor/s07/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	reactor/s08/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	reactor/s09/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	reactor/s10/EventLoopThreadPool.h	/^  bool started_;$/;"	m	class:muduo::EventLoopThreadPool
started_	reactor/s10/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	reactor/s11/EventLoopThreadPool.h	/^  bool started_;$/;"	m	class:muduo::EventLoopThreadPool
started_	reactor/s11/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	reactor/s12/EventLoopThreadPool.h	/^  bool started_;$/;"	m	class:muduo::EventLoopThreadPool
started_	reactor/s12/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	reactor/s13/EventLoopThreadPool.h	/^  bool started_;$/;"	m	class:muduo::EventLoopThreadPool
started_	reactor/s13/TcpServer.h	/^  bool started_;$/;"	m	class:muduo::TcpServer
started_	thread/Thread.h	/^  bool        started_;$/;"	m	class:muduo::Thread
state	java/billing/Rule.java	/^    protected Object state;$/;"	f	class:Rule
state_	reactor/s05/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
state_	reactor/s06/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
state_	reactor/s07/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
state_	reactor/s08/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
state_	reactor/s09/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
state_	reactor/s10/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
state_	reactor/s11/Connector.h	/^  States state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::Connector
state_	reactor/s11/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
state_	reactor/s12/Connector.h	/^  States state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::Connector
state_	reactor/s12/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
state_	reactor/s13/Connector.h	/^  States state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::Connector
state_	reactor/s13/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::TcpConnection
staticCheck	logging/LogStream.cc	/^void LogStream::staticCheck()$/;"	f	class:LogStream
stats	pingpong/asio/client.cpp	/^  stats()$/;"	f	class:stats
stats	pingpong/asio/client.cpp	/^class stats$/;"	c	file:
stats_	pingpong/asio/client.cpp	/^  stats stats_;$/;"	m	class:client	file:
stats_	pingpong/asio/client.cpp	/^  stats& stats_;$/;"	m	class:session	file:
std	puzzle/huarong.cc	/^namespace std$/;"	n	file:
step	puzzle/huarong.cc	/^  int step = 0;$/;"	m	struct:State	file:
stocks_	thread/test/Factory.cc	/^  std::map<string, boost::shared_ptr<Stock> > stocks_;$/;"	m	class:version1::StockFactory	file:
stocks_	thread/test/Factory.cc	/^  std::map<string, boost::weak_ptr<Stock> > stocks_;$/;"	m	class:StockFactory	file:
stocks_	thread/test/Factory.cc	/^  std::map<string, boost::weak_ptr<Stock> > stocks_;$/;"	m	class:version2::StockFactory	file:
stocks_	thread/test/Factory.cc	/^  std::map<string, boost::weak_ptr<Stock> > stocks_;$/;"	m	class:version3::StockFactory	file:
stocks_	thread/test/Factory.cc	/^  std::map<string, boost::weak_ptr<Stock> > stocks_;$/;"	m	class:version4::StockFactory	file:
stop	logging/AsyncLoggingDoubleBuffering.h	/^  void stop()$/;"	f	class:muduo::AsyncLoggingDoubleBuffering
stop	logging/AsyncLoggingQueue.h	/^  void stop()$/;"	f	class:muduo::AsyncLoggingT
stop	pingpong/asio/client.cpp	/^  void stop()$/;"	f	class:session
stop	protorpc/muduo/rpc/RpcClient.java	/^    public void stop() {$/;"	m	class:RpcClient
stop	reactor/s11/Connector.cc	/^void Connector::stop()$/;"	f	class:Connector
stop	reactor/s12/Connector.cc	/^void Connector::stop()$/;"	f	class:Connector
stop	reactor/s12/TcpClient.cc	/^void TcpClient::stop()$/;"	f	class:TcpClient
stop	reactor/s13/Connector.cc	/^void Connector::stop()$/;"	f	class:Connector
stop	reactor/s13/TcpClient.cc	/^void TcpClient::stop()$/;"	f	class:TcpClient
stop	thread/ThreadPool.cc	/^void ThreadPool::stop()$/;"	f	class:ThreadPool
stop_timer_	pingpong/asio/client.cpp	/^  asio::deadline_timer stop_timer_;$/;"	m	class:client	file:
storage_	pingpong/asio/handler_allocator.hpp	/^  boost::aligned_storage<1024> storage_;$/;"	m	class:handler_allocator
store	puzzle/Einstein.java	/^    static final Store store = new Store();$/;"	f	class:Einstein
str	puzzle/poker/poker.cc	/^  char str[16];$/;"	m	struct:String	file:
str_	logging/LogStream.h	/^  const char* str_;$/;"	m	class:muduo::T
str_	tpc/Common.h	/^  const char* str_;$/;"	m	class:StringArg
straight	puzzle/poker/poker.py	/^def straight(ranks):$/;"	f
strand_	pingpong/asio/client.cpp	/^  asio::io_service::strand strand_;$/;"	m	class:session	file:
strand_	pingpong/asio/server.cpp	/^  asio::io_service::strand strand_;$/;"	m	class:session	file:
stream	logging/Logging.h	/^  LogStream& stream() { return impl_.stream_; }$/;"	f	class:muduo::Logger
stream_	logging/Logging.h	/^  LogStream stream_;$/;"	m	class:muduo::Logger::Impl
strerror_tl	logging/Logging.cc	/^const char* strerror_tl(int savedErrno)$/;"	f	namespace:muduo
string	esort/sort00.cc	/^typedef __gnu_cxx::__sso_string string;$/;"	t	file:
string	esort/sort01.cc	/^typedef __gnu_cxx::__sso_string string;$/;"	t	file:
string	esort/sort02.cc	/^typedef __gnu_cxx::__sso_string string;$/;"	t	file:
string	esort/sort03.cc	/^typedef std::string string;$/;"	t	file:
sub	basic/uint.cc	/^void UnsignedInt::sub(const UnsignedInt& x)$/;"	f	class:UnsignedInt
subject_	thread/test/Observer.cc	/^  Observable* subject_;$/;"	m	class:Observer	file:
subject_	thread/test/Observer_safe.cc	/^  Observable* subject_;$/;"	m	class:Observer	file:
sudoku	protorpc/sudoku/Client.java	/^package sudoku;$/;"	p
sudoku	protorpc/sudoku/Server.java	/^package sudoku;$/;"	p
sudoku	protorpc/sudoku/Sudoku.java	/^package sudoku;$/;"	p
sudoku	protorpc/sudoku/SudokuImpl.java	/^package sudoku;$/;"	p
suit	puzzle/poker/poker.cc	/^  int suit; \/\/ 1 .. 4$/;"	m	struct:Card	file:
sw	java/bankqueue/tests/BankTest.java	/^    StringWriter sw;$/;"	f	class:BankTest
swap	basic/uint.h	/^  void swap(UnsignedInt& rhs) { limbs_.swap(rhs.limbs_); }$/;"	f	class:UnsignedInt
swap	datetime/Date.h	/^  void swap(Date& that)$/;"	f	class:muduo::Date
swap	datetime/Timestamp.h	/^  void swap(Timestamp& that)$/;"	f	class:muduo::Timestamp
swap	reactor/s07/Buffer.h	/^  void swap(Buffer& rhs)$/;"	f	class:muduo::Buffer
swap	reactor/s08/Buffer.h	/^  void swap(Buffer& rhs)$/;"	f	class:muduo::Buffer
swap	reactor/s09/Buffer.h	/^  void swap(Buffer& rhs)$/;"	f	class:muduo::Buffer
swap	reactor/s10/Buffer.h	/^  void swap(Buffer& rhs)$/;"	f	class:muduo::Buffer
swap	reactor/s11/Buffer.h	/^  void swap(Buffer& rhs)$/;"	f	class:muduo::Buffer
swap	reactor/s12/Buffer.h	/^  void swap(Buffer& rhs)$/;"	f	class:muduo::Buffer
swap	reactor/s13/Buffer.h	/^  void swap(Buffer& rhs)$/;"	f	class:muduo::Buffer
swap	string/StringEager.cc	/^void StringEager::swap(StringEager& rhs) throw()$/;"	f	class:StringEager
swap	string/StringTrivial.h	/^  void swap(String& rhs)$/;"	f	class:trivial::String
swap	thread/test/Counter.cc	/^void swap(Counter& a, Counter& b)$/;"	f
swap	tpc/Socket.h	/^  void swap(Socket& rhs)$/;"	f	class:Socket
sync	esort/sort11.cc	/^  void sync()$/;"	f	class:OutputFile
sync	esort/sort12.cc	/^  void sync()$/;"	f	class:OutputFile
szero	thread/test/SignalSlot_test.cc	/^void Foo::szero()$/;"	f	class:Foo
t_cachedTid	thread/Thread.cc	/^__thread pid_t t_cachedTid = 0;$/;"	m	namespace:__anon4	file:
t_errnobuf	logging/Logging.cc	/^__thread char t_errnobuf[512];$/;"	m	namespace:muduo	file:
t_lastSecond	logging/Logging.cc	/^__thread time_t t_lastSecond;$/;"	m	namespace:muduo	file:
t_threadName	thread/Thread.cc	/^  __thread const char* t_threadName = "unknown";$/;"	m	namespace:muduo::CurrentThread	file:
t_time	logging/Logging.cc	/^__thread char t_time[32];$/;"	m	namespace:muduo	file:
t_value_	thread/ThreadLocalSingleton.h	/^  static __thread T* t_value_;$/;"	m	class:muduo::ThreadLocalSingleton
t_value_	thread/ThreadLocalSingleton.h	/^__thread T* ThreadLocalSingleton<T>::t_value_ = 0;$/;"	m	class:muduo::ThreadLocalSingleton
take	thread/BlockingQueue.h	/^  T take()$/;"	f	class:muduo::BlockingQueue
take	thread/BoundedBlockingQueue.h	/^  T take()$/;"	f	class:muduo::BoundedBlockingQueue
take	thread/ThreadPool.cc	/^ThreadPool::Task ThreadPool::take()$/;"	f	class:ThreadPool
tcp_input	faketcp/acceptall.cc	/^void tcp_input(int fd, const void* input, const void* payload, int tot_len)$/;"	f
tcp_input	faketcp/connectmany.cc	/^void tcp_input(int fd, const void* input, const void* payload, int tot_len, bool passive)$/;"	f
tcp_input	faketcp/discardall.cc	/^void tcp_input(int fd, const void* input, const void* payload, int tot_len)$/;"	f
tcp_input	faketcp/discardall2.cc	/^void tcp_input(int fd, const void* input, const void* payload, int tot_len)$/;"	f
tcp_input	faketcp/echoall.cc	/^void tcp_input(int fd, const void* input, const void* ippayload, int tot_len)$/;"	f
tcp_input	faketcp/echoall2.cc	/^void tcp_input(int fd, const void* input, const void* ippayload, int tot_len)$/;"	f
tcp_input	faketcp/rejectall.cc	/^void tcp_input(int fd, const void* input, const void* payload, int tot_len)$/;"	f
test	datetime/TimeZone_unittest.cc	/^void test(const TimeZone& tz, TestCase tc)$/;"	f
test	thread/test/Exception_test.cc	/^  void test()$/;"	f	class:Bar
testAnswer	protobuf/codec_test.cc	/^void testAnswer()$/;"	f
testClient	protorpc/muduo/rpc/test/RpcTest.java	/^    public void testClient() throws Exception {$/;"	m	class:RpcTest
testCompareTo1	java/bankqueue/tests/EventTest.java	/^    public void testCompareTo1() {$/;"	m	class:EventTest
testCompareTo2	java/bankqueue/tests/EventTest.java	/^    public void testCompareTo2() {$/;"	m	class:EventTest
testDecodeEmpty	protorpc/muduo/codec/tests/CodecTest.java	/^    public void testDecodeEmpty() throws Exception {$/;"	m	class:CodecTest
testDecoder	protorpc/muduo/rpc/test/RpcTest.java	/^    public void testDecoder() throws Exception {$/;"	m	class:RpcTest
testDecoder2	protorpc/muduo/rpc/test/RpcTest.java	/^    public void testDecoder2() throws Exception {$/;"	m	class:RpcTest
testDescriptor	protobuf/descriptor_test.cc	/^void testDescriptor()$/;"	f
testEmpty	protobuf/codec_test.cc	/^void testEmpty()$/;"	f
testEncoder	protorpc/muduo/rpc/test/RpcTest.java	/^    public void testEncoder() throws Exception {$/;"	m	class:RpcTest
testEncoder2	protorpc/muduo/rpc/test/RpcTest.java	/^    public void testEncoder2() throws Exception {$/;"	m	class:RpcTest
testEncoderEmpty	protorpc/muduo/codec/tests/CodecTest.java	/^    public void testEncoderEmpty() throws Exception {$/;"	m	class:CodecTest
testGetCustomerType	java/bankqueue/tests/BankTest.java	/^    public void testGetCustomerType() {$/;"	m	class:BankTest
testHongKong	datetime/TimeZone_unittest.cc	/^void testHongKong()$/;"	f
testLondon	datetime/TimeZone_unittest.cc	/^void testLondon()$/;"	f
testLongLifeFactory	thread/test/Factory.cc	/^void testLongLifeFactory()$/;"	f
testNewYork	datetime/TimeZone_unittest.cc	/^void testNewYork()$/;"	f
testNormalUserAllPackagesActivitiesExceedInLimit	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserAllPackagesActivitiesExceedInLimit() {$/;"	m	class:NormalCustomerTest
testNormalUserAllPackagesActivitiesWithInLimit	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserAllPackagesActivitiesWithInLimit() {$/;"	m	class:NormalCustomerTest
testNormalUserAllPackagesNoActivity	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserAllPackagesNoActivity() {$/;"	m	class:NormalCustomerTest
testNormalUserInternetPackage50kMore	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserInternetPackage50kMore() {$/;"	m	class:NormalCustomerTest
testNormalUserInternetPackageWithinLimit	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserInternetPackageWithinLimit() {$/;"	m	class:NormalCustomerTest
testNormalUserNewJoinWithInLimit	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserNewJoinWithInLimit() {$/;"	m	class:NormalCustomerTest
testNormalUserNoPackage100kData	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserNoPackage100kData() {$/;"	m	class:NormalCustomerTest
testNormalUserNoPackageNoActivity	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserNoPackageNoActivity() {$/;"	m	class:NormalCustomerTest
testNormalUserNoPackageOneCall	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserNoPackageOneCall() {$/;"	m	class:NormalCustomerTest
testNormalUserNoPackageOneShortMessage	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserNoPackageOneShortMessage() {$/;"	m	class:NormalCustomerTest
testNormalUserPhoneCallPackageNoActivity	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserPhoneCallPackageNoActivity() {$/;"	m	class:NormalCustomerTest
testNormalUserPhoneCallPackageOneMoreCall	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserPhoneCallPackageOneMoreCall() {$/;"	m	class:NormalCustomerTest
testNormalUserPhoneCallPackageWithinLimit	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserPhoneCallPackageWithinLimit() {$/;"	m	class:NormalCustomerTest
testNormalUserShortMessagePackageOneMore	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserShortMessagePackageOneMore() {$/;"	m	class:NormalCustomerTest
testNormalUserShortMessagePackageWithinLimit	java/billing/test/NormalCustomerTest.java	/^    public void testNormalUserShortMessagePackageWithinLimit() {$/;"	m	class:NormalCustomerTest
testObj1	thread/test/ThreadLocal_test.cc	/^muduo::ThreadLocal<Test> testObj1;$/;"	v
testObj2	thread/test/ThreadLocal_test.cc	/^muduo::ThreadLocal<Test> testObj2;$/;"	v
testQuery	protobuf/codec_test.cc	/^void testQuery()$/;"	f
testQuery	protorpc/muduo/codec/tests/CodecTest.java	/^    public void testQuery() throws Exception {$/;"	m	class:CodecTest
testQuery2	protorpc/muduo/codec/tests/CodecTest.java	/^    public void testQuery2() throws Exception {$/;"	m	class:CodecTest
testServer	protorpc/muduo/rpc/test/RpcTest.java	/^    public void testServer() throws Exception {$/;"	m	class:RpcTest
testShortLifeFactory	thread/test/Factory.cc	/^void testShortLifeFactory()$/;"	f
testSydney	datetime/TimeZone_unittest.cc	/^void testSydney()$/;"	f
testUtc	datetime/TimeZone_unittest.cc	/^void testUtc()$/;"	f
testVipUserNewJoinMore	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNewJoinMore() {$/;"	m	class:VipCustomerTest
testVipUserNewJoinNoActivities	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNewJoinNoActivities() {$/;"	m	class:VipCustomerTest
testVipUserNewJoinWithInLimit	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNewJoinWithInLimit() {$/;"	m	class:VipCustomerTest
testVipUserNoPackage50kInternet	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNoPackage50kInternet() {$/;"	m	class:VipCustomerTest
testVipUserNoPackageAllThree	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNoPackageAllThree() {$/;"	m	class:VipCustomerTest
testVipUserNoPackageAllThree31Days	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNoPackageAllThree31Days() {$/;"	m	class:VipCustomerTest
testVipUserNoPackageNoActivity	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNoPackageNoActivity() {$/;"	m	class:VipCustomerTest
testVipUserNoPackageNoActivity28days	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNoPackageNoActivity28days() {$/;"	m	class:VipCustomerTest
testVipUserNoPackageOneCall	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNoPackageOneCall() {$/;"	m	class:VipCustomerTest
testVipUserNoPackageOneMessage	java/billing/test/VipCustomerTest.java	/^    public void testVipUserNoPackageOneMessage() {$/;"	m	class:VipCustomerTest
testVipUserPackage1AllExceed	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage1AllExceed() {$/;"	m	class:VipCustomerTest
testVipUserPackage1And50kMore	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage1And50kMore() {$/;"	m	class:VipCustomerTest
testVipUserPackage1NoActivity	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage1NoActivity() {$/;"	m	class:VipCustomerTest
testVipUserPackage1OneMoreCall	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage1OneMoreCall() {$/;"	m	class:VipCustomerTest
testVipUserPackage1OneMoreMessage	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage1OneMoreMessage() {$/;"	m	class:VipCustomerTest
testVipUserPackage1WithInLimit	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage1WithInLimit() {$/;"	m	class:VipCustomerTest
testVipUserPackage2More	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage2More() {$/;"	m	class:VipCustomerTest
testVipUserPackage2NoActivity	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage2NoActivity() {$/;"	m	class:VipCustomerTest
testVipUserPackage2WithInLimit	java/billing/test/VipCustomerTest.java	/^    public void testVipUserPackage2WithInLimit() {$/;"	m	class:VipCustomerTest
test_flush	puzzle/poker/poker_test.py	/^	def test_flush(self):$/;"	m	class:TestPoker
test_get_ranks	puzzle/poker/poker_test.py	/^	def test_get_ranks(self):$/;"	m	class:TestPoker
test_kind	puzzle/poker/poker_test.py	/^	def test_kind(self):$/;"	m	class:TestPoker
test_score2	puzzle/poker/poker_test.py	/^	def test_score2(self):$/;"	m	class:TestPoker
test_straigh	puzzle/poker/poker_test.py	/^	def test_straigh(self):$/;"	m	class:TestPoker
threadFunc	logging/AsyncLoggingDoubleBuffering.h	/^  void threadFunc()$/;"	f	class:muduo::AsyncLoggingDoubleBuffering
threadFunc	logging/AsyncLoggingQueue.h	/^  void threadFunc()$/;"	f	class:muduo::AsyncLoggingT
threadFunc	reactor/s00/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s00/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s01/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s01/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s02/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s02/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s03/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s03/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s03/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s04/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s04/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s04/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s05/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s05/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s05/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s06/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s06/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s06/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s07/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s07/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s07/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s08/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s08/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s08/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s09/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s09/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s09/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s10/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s10/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s10/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s11/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s11/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s11/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s12/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s12/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s12/test2.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s13/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
threadFunc	reactor/s13/test1.cc	/^void threadFunc()$/;"	f
threadFunc	reactor/s13/test2.cc	/^void threadFunc()$/;"	f
threadFunc	thread/test/BlockingQueue_test.cc	/^  void threadFunc()$/;"	f	class:Test	file:
threadFunc	thread/test/BoundedBlockingQueue_test.cc	/^  void threadFunc()$/;"	f	class:Test	file:
threadFunc	thread/test/MutualDeadLock.cc	/^void threadFunc()$/;"	f
threadFunc	thread/test/RequestInventory_test.cc	/^void threadFunc()$/;"	f
threadFunc	thread/test/RequestInventory_test2.cc	/^void threadFunc()$/;"	f
threadFunc	thread/test/SingletonThreadLocal_test.cc	/^void threadFunc(const char* changeTo)$/;"	f
threadFunc	thread/test/Singleton_test.cc	/^void threadFunc()$/;"	f
threadFunc	thread/test/ThreadLocalSingleton_test.cc	/^void threadFunc(const char* changeTo)$/;"	f
threadFunc	thread/test/ThreadLocal_test.cc	/^void threadFunc()$/;"	f
threadFunc	thread/test/Thread_test.cc	/^void threadFunc()$/;"	f
threadFunc2	thread/test/Thread_test.cc	/^void threadFunc2(int x)$/;"	f
threadFunc3	thread/test/Thread_test.cc	/^void threadFunc3()$/;"	f
threadId_	reactor/s00/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s01/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s02/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s03/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s04/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s05/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s06/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s07/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s08/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s09/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s10/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s11/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s12/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadId_	reactor/s13/EventLoop.h	/^  const pid_t threadId_;$/;"	m	class:muduo::EventLoop
threadPool_	reactor/s10/TcpServer.h	/^  boost::scoped_ptr<EventLoopThreadPool> threadPool_;$/;"	m	class:muduo::TcpServer
threadPool_	reactor/s11/TcpServer.h	/^  boost::scoped_ptr<EventLoopThreadPool> threadPool_;$/;"	m	class:muduo::TcpServer
threadPool_	reactor/s12/TcpServer.h	/^  boost::scoped_ptr<EventLoopThreadPool> threadPool_;$/;"	m	class:muduo::TcpServer
threadPool_	reactor/s13/TcpServer.h	/^  boost::scoped_ptr<EventLoopThreadPool> threadPool_;$/;"	m	class:muduo::TcpServer
thread_	logging/AsyncLoggingDoubleBuffering.h	/^  muduo::Thread thread_;$/;"	m	class:muduo::AsyncLoggingDoubleBuffering
thread_	logging/AsyncLoggingQueue.h	/^  muduo::Thread thread_;$/;"	m	class:muduo::AsyncLoggingT
thread_	reactor/s03/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s04/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s05/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s06/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s07/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s08/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s09/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s10/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s11/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s12/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
thread_	reactor/s13/EventLoopThread.h	/^  Thread thread_;$/;"	m	class:muduo::EventLoopThread
threads_	reactor/s10/EventLoopThreadPool.h	/^  boost::ptr_vector<EventLoopThread> threads_;$/;"	m	class:muduo::EventLoopThreadPool
threads_	reactor/s11/EventLoopThreadPool.h	/^  boost::ptr_vector<EventLoopThread> threads_;$/;"	m	class:muduo::EventLoopThreadPool
threads_	reactor/s12/EventLoopThreadPool.h	/^  boost::ptr_vector<EventLoopThread> threads_;$/;"	m	class:muduo::EventLoopThreadPool
threads_	reactor/s13/EventLoopThreadPool.h	/^  boost::ptr_vector<EventLoopThread> threads_;$/;"	m	class:muduo::EventLoopThreadPool
threads_	thread/ThreadPool.h	/^  boost::ptr_vector<muduo::Thread> threads_;$/;"	m	class:muduo::ThreadPool
threads_	thread/test/BlockingQueue_test.cc	/^  boost::ptr_vector<muduo::Thread> threads_;$/;"	m	class:Test	file:
threads_	thread/test/BoundedBlockingQueue_test.cc	/^  boost::ptr_vector<muduo::Thread> threads_;$/;"	m	class:Test	file:
tid	thread/Thread.cc	/^pid_t CurrentThread::tid()$/;"	f	class:CurrentThread
tid	thread/Thread.h	/^  pid_t tid() const { return *tid_; }$/;"	f	class:muduo::Thread
tid_	thread/Thread.h	/^  boost::shared_ptr<pid_t> tid_;$/;"	m	class:muduo::Thread
tieBreaker	java/bankqueue/event/Event.java	/^    public final int tieBreaker;$/;"	f	class:Event
tie_	thread/SignalSlot.h	/^  boost::weak_ptr<void> tie_;$/;"	m	struct:muduo::detail::SlotImpl
tied_	thread/SignalSlot.h	/^  bool tied_;$/;"	m	struct:muduo::detail::SlotImpl
time	java/billing/Slip.java	/^    public final LocalDateTime time;$/;"	f	class:Slip
timeDifference	datetime/Timestamp.h	/^inline double timeDifference(Timestamp high, Timestamp low)$/;"	f	namespace:muduo
time_	logging/Logging.h	/^  Timestamp time_;$/;"	m	class:muduo::Logger::Impl
time_diff	datetime/time_benchmark.c	/^double time_diff(struct timeval* high, struct timeval* low)$/;"	f
timeout	reactor/s01/test3.cc	/^void timeout()$/;"	f
timeout	reactor/s02/test3.cc	/^void timeout()$/;"	f
timeout	reactor/s03/test3.cc	/^void timeout()$/;"	f
timeout	reactor/s04/test3.cc	/^void timeout()$/;"	f
timeout	reactor/s05/test3.cc	/^void timeout()$/;"	f
timeout	reactor/s06/test3.cc	/^void timeout()$/;"	f
timeout	reactor/s07/test3.cc	/^void timeout(muduo::Timestamp receiveTime)$/;"	f
timeout	reactor/s08/test3.cc	/^void timeout(muduo::Timestamp receiveTime)$/;"	f
timeout	reactor/s09/test3.cc	/^void timeout(muduo::Timestamp receiveTime)$/;"	f
timeout	reactor/s10/test3.cc	/^void timeout(muduo::Timestamp receiveTime)$/;"	f
timeout	reactor/s11/test3.cc	/^void timeout(muduo::Timestamp receiveTime)$/;"	f
timeout	reactor/s12/test3.cc	/^void timeout(muduo::Timestamp receiveTime)$/;"	f
timeout	reactor/s13/test3.cc	/^void timeout(muduo::Timestamp receiveTime)$/;"	f
timeoutcb	pingpong/libevent/client.c	/^static void timeoutcb(evutil_socket_t fd, short what, void *arg)$/;"	f	file:
timerId_	reactor/s11/Connector.h	/^  TimerId timerId_;$/;"	m	class:muduo::Connector
timerId_	reactor/s12/Connector.h	/^  TimerId timerId_;$/;"	m	class:muduo::Connector
timerId_	reactor/s13/Connector.h	/^  TimerId timerId_;$/;"	m	class:muduo::Connector
timerQueue_	reactor/s02/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s03/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s04/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s05/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s06/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s07/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s08/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s09/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s10/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s11/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s12/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timerQueue_	reactor/s13/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;$/;"	m	class:muduo::EventLoop
timer_	reactor/s11/TimerId.h	/^  Timer* timer_;$/;"	m	class:muduo::TimerId
timer_	reactor/s12/TimerId.h	/^  Timer* timer_;$/;"	m	class:muduo::TimerId
timer_	reactor/s13/TimerId.h	/^  Timer* timer_;$/;"	m	class:muduo::TimerId
timerfdChannel_	reactor/s02/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s03/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s04/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s05/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s06/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s07/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s08/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s09/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s10/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s11/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s12/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfdChannel_	reactor/s13/TimerQueue.h	/^  Channel timerfdChannel_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s02/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s03/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s04/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s05/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s06/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s07/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s08/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s09/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s10/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s11/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s12/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timerfd_	reactor/s13/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s02/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s03/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s04/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s05/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s06/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s07/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s08/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s09/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s10/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s11/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s12/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
timers_	reactor/s13/TimerQueue.h	/^  TimerList timers_;$/;"	m	class:muduo::TimerQueue
toBuilder	protorpc/echo/EchoProto.java	/^    public Builder toBuilder() { return newBuilder(this); }$/;"	m	class:EchoProto.EchoRequest
toBuilder	protorpc/echo/EchoProto.java	/^    public Builder toBuilder() { return newBuilder(this); }$/;"	m	class:EchoProto.EchoResponse
toBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Builder toBuilder() { return newBuilder(this); }$/;"	m	class:QueryProtos.Answer
toBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Builder toBuilder() { return newBuilder(this); }$/;"	m	class:QueryProtos.Empty
toBuilder	protorpc/muduo/codec/tests/QueryProtos.java	/^    public Builder toBuilder() { return newBuilder(this); }$/;"	m	class:QueryProtos.Query
toBuilder	protorpc/muduo/rpc/proto/RpcProto.java	/^    public Builder toBuilder() { return newBuilder(this); }$/;"	m	class:RpcProto.RpcMessage
toBuilder	protorpc/sudoku/Sudoku.java	/^    public Builder toBuilder() { return newBuilder(this); }$/;"	m	class:Sudoku.SudokuRequest
toBuilder	protorpc/sudoku/Sudoku.java	/^    public Builder toBuilder() { return newBuilder(this); }$/;"	m	class:Sudoku.SudokuResponse
toCancel	reactor/s11/test4.cc	/^muduo::TimerId toCancel;$/;"	v
toCancel	reactor/s12/test4.cc	/^muduo::TimerId toCancel;$/;"	v
toCancel	reactor/s13/test4.cc	/^muduo::TimerId toCancel;$/;"	v
toDec	basic/uint.cc	/^std::string UnsignedInt::toDec() const$/;"	f	class:UnsignedInt
toFormattedString	datetime/Timestamp.cc	/^std::string Timestamp::toFormattedString() const$/;"	f	class:Timestamp
toHex	basic/uint.cc	/^std::string UnsignedInt::toHex() const$/;"	f	class:UnsignedInt
toHostPort	reactor/s04/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s04/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s05/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s05/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s06/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s06/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s07/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s07/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s08/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s08/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s09/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s09/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s10/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s10/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s11/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s11/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s12/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s12/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toHostPort	reactor/s13/InetAddress.cc	/^std::string InetAddress::toHostPort() const$/;"	f	class:InetAddress
toHostPort	reactor/s13/SocketsOps.cc	/^void sockets::toHostPort(char* buf, size_t size,$/;"	f	class:sockets
toIp	tpc/InetAddress.cc	/^std::string InetAddress::toIp() const$/;"	f	class:InetAddress
toIpPort	tpc/InetAddress.cc	/^std::string InetAddress::toIpPort() const$/;"	f	class:InetAddress
toIsoString	datetime/Date.cc	/^std::string Date::toIsoString() const$/;"	f	class:Date
toLocalTime	datetime/TimeZone.cc	/^struct tm TimeZone::toLocalTime(time_t seconds) const$/;"	f	class:TimeZone
toMask	puzzle/huarong.cc	/^  Mask toMask() const$/;"	f	struct:State
toString	datetime/Timestamp.cc	/^std::string Timestamp::toString() const$/;"	f	class:Timestamp
toString	java/billing/Money.java	/^    public String toString() {$/;"	m	class:Money
toString	puzzle/poker/poker.cc	/^  String toString() const$/;"	f	struct:Hand
toUtcTime	datetime/TimeZone.cc	/^struct tm TimeZone::toUtcTime(time_t secondsSinceEpoch, bool yday)$/;"	f	class:TimeZone
toVec	puzzle/buysell.cc	/^std::vector<int> toVec(int (&arr)[N])$/;"	f
top	puzzle/huarong.cc	/^  int left, top;  \/\/ int8_t$/;"	m	struct:Block	file:
total_bytes_read	pingpong/libevent/client.c	/^int64_t total_bytes_read = 0;$/;"	v
total_bytes_read_	pingpong/asio/client.cpp	/^  size_t total_bytes_read_;$/;"	m	class:stats	file:
total_bytes_written_	pingpong/asio/client.cpp	/^  size_t total_bytes_written_;$/;"	m	class:stats	file:
total_messages_read	pingpong/libevent/client.c	/^int64_t total_messages_read = 0;$/;"	v
transitions	datetime/TimeZone.cc	/^  vector<detail::Transition> transitions;$/;"	m	struct:TimeZone::Data	file:
transmit	tpc/ttcp.cc	/^  bool transmit, receive, nodelay;$/;"	m	struct:Options	file:
transmit	tpc/ttcp.cc	/^void transmit(const Options& opt)$/;"	f
traverse	thread/test/CopyOnWrite_test.cc	/^void traverse()$/;"	f
traverse	thread/test/NonRecursiveMutex_test.cc	/^void traverse()$/;"	f
trivial	string/StringTrivial.h	/^namespace trivial$/;"	n
trivial2	string/StringTrivial.h	/^namespace trivial2$/;"	n
tun_alloc	faketcp/faketcp.cc	/^int tun_alloc(char dev[IFNAMSIZ])$/;"	f
twoFastCustomers	java/bankqueue/tests/BankTest.java	/^    public void twoFastCustomers() {$/;"	m	class:BankTest
twoVipCustomers	java/bankqueue/tests/BankTest.java	/^    public void twoVipCustomers() {$/;"	m	class:BankTest
two_pair	puzzle/poker/poker.py	/^def two_pair(ranks):$/;"	f
twoup	java/pdf/com/chenshuo/pdf/PdfHack.java	/^    private static void twoup(String input) throws Exception {$/;"	m	class:PdfHack	file:
type	java/bankqueue/event/CustomerLeaveEvent.java	/^    private final WindowType type;$/;"	f	class:CustomerLeaveEvent	file:
type	java/billing/Slip.java	/^    public final SlipType type;$/;"	f	class:Slip
type_	protorpc/muduo/rpc/proto/RpcProto.java	/^      private muduo.rpc.proto.RpcProto.MessageType type_ = muduo.rpc.proto.RpcProto.MessageType.REQUEST;$/;"	f	class:RpcProto.RpcMessage.Builder	file:
type_	protorpc/muduo/rpc/proto/RpcProto.java	/^    private muduo.rpc.proto.RpcProto.MessageType type_;$/;"	f	class:RpcProto.RpcMessage	file:
uint128	basic/int128.h	/^  uint128(int32_t l)$/;"	f	struct:uint128
uint128	basic/int128.h	/^  uint128(uint64_t h, uint64_t l)$/;"	f	struct:uint128
uint128	basic/int128.h	/^  uint128(uint64_t l = 0)$/;"	f	struct:uint128
uint128	basic/int128.h	/^struct uint128$/;"	s
unbind	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture unbind() {$/;"	m	class:MockChannel
uncover	puzzle/dance.cc	/^  void uncover(Column* c)$/;"	f	struct:Dance
uncover	sudoku/sudoku_dancing_links.cc	/^    void uncover(Column* c)$/;"	f	struct:Dance
unlock	thread/Mutex.h	/^  void unlock()$/;"	f	class:muduo::MutexLock
unregister	thread/test/Observer.cc	/^void Observable::unregister(Observer* x)$/;"	f	class:Observable
unsent_count_	pingpong/asio/server.cpp	/^  int unsent_count_;$/;"	m	class:session	file:
unwritten_count_	pingpong/asio/client.cpp	/^  int unwritten_count_;$/;"	m	class:session	file:
up	puzzle/dance.cc	/^    Node* up;$/;"	m	struct:Node	file:
up	sudoku/sudoku_dancing_links.cc	/^    Node* up;$/;"	m	struct:Node	file:
update	reactor/s01/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s02/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s03/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s04/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s05/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s06/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s07/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s08/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s09/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s10/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s11/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s12/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s13/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
update	reactor/s13/EPoller.cc	/^void EPoller::update(int operation, Channel* channel)$/;"	f	class:EPoller
update	thread/test/Customer.cc	/^void CustomerData::update(const string& customer, const EntryList& entries)$/;"	f	class:CustomerData
update	thread/test/Customer.cc	/^void CustomerData::update(const string& message)$/;"	f	class:CustomerData
update	thread/test/Observer.cc	/^  virtual void update()$/;"	f	class:Foo	file:
update	thread/test/Observer_safe.cc	/^  virtual void update()$/;"	f	class:Foo	file:
updateChannel	reactor/s01/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s01/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s02/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s02/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s03/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s03/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s04/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s04/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s05/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s05/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s06/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s06/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s07/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s07/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s08/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s08/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s09/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s09/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s10/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s10/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s11/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s11/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s12/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s12/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
updateChannel	reactor/s13/EPoller.cc	/^void EPoller::updateChannel(Channel* channel)$/;"	f	class:EPoller
updateChannel	reactor/s13/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
updateChannel	reactor/s13/Poller.cc	/^void Poller::updateChannel(Channel* channel)$/;"	f	class:Poller
usage	faketcp/connectmany.cc	/^void usage()$/;"	f
useECDHE	ssl/loop-polarssl.cc	/^bool useECDHE = false;$/;"	v
useRSA	ssl/loop-polarssl.cc	/^bool useRSA = false;$/;"	v
v	puzzle/Einstein.java	/^        IntVar v = new IntVar(store, name(), 0, size - 1);$/;"	f	class:Einstein.Cigar
v	puzzle/Einstein.java	/^        IntVar v = new IntVar(store, name(), 0, size - 1);$/;"	f	class:Einstein.Color
v	puzzle/Einstein.java	/^        IntVar v = new IntVar(store, name(), 0, size - 1);$/;"	f	class:Einstein.Drink
v	puzzle/Einstein.java	/^        IntVar v = new IntVar(store, name(), 0, size - 1);$/;"	f	class:Einstein.Nation
v	puzzle/Einstein.java	/^        IntVar v = new IntVar(store, name(), 0, size - 1);$/;"	f	class:Einstein.Pet
valid	datetime/Date.h	/^  bool valid() const { return julianDayNumber_ > 0; }$/;"	f	class:muduo::Date
valid	datetime/TimeZone.cc	/^  bool valid() const { return fp_; }$/;"	f	class:muduo::detail::File
valid	datetime/TimeZone.h	/^  bool valid() const { return data_; }$/;"	f	class:muduo::TimeZone
valid	datetime/Timestamp.h	/^  bool valid() const { return microSecondsSinceEpoch_ > 0; }$/;"	f	class:muduo::Timestamp
value	algorithm/iprange.cc	/^  int value;         \/\/ >= 0$/;"	m	struct:IPrange	file:
value	algorithm/mergeN.cc	/^  Record value;$/;"	m	struct:Input	file:
value	basic/counted_ptr_test.cc	/^  int value;$/;"	m	struct:Age	file:
value	esort/sort10.cc	/^  int64_t value;$/;"	m	struct:Record	file:
value	esort/sort11.cc	/^  int64_t value;$/;"	m	struct:Record	file:
value	esort/sort12.cc	/^  ElementType value;$/;"	m	struct:Record	file:
value	protorpc/muduo/rpc/proto/RpcProto.java	/^    private final int value;$/;"	f	class:RpcProto.ErrorCode	file:
value	protorpc/muduo/rpc/proto/RpcProto.java	/^    private final int value;$/;"	f	class:RpcProto.MessageType	file:
value	thread/ThreadLocal.h	/^  T& value()$/;"	f	class:muduo::ThreadLocal
value	thread/test/Counter.cc	/^int64_t Counter::value() const$/;"	f	class:Counter
valueOf	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static ErrorCode valueOf($/;"	m	class:RpcProto.ErrorCode
valueOf	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static ErrorCode valueOf(int value) {$/;"	m	class:RpcProto.ErrorCode
valueOf	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static MessageType valueOf($/;"	m	class:RpcProto.MessageType
valueOf	protorpc/muduo/rpc/proto/RpcProto.java	/^    public static MessageType valueOf(int value) {$/;"	m	class:RpcProto.MessageType
value_	reactor/s02/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	reactor/s03/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	reactor/s04/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	reactor/s05/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	reactor/s06/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	reactor/s07/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	reactor/s08/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	reactor/s09/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	reactor/s10/TimerId.h	/^  Timer* value_;$/;"	m	class:muduo::TimerId
value_	thread/Atomic.h	/^  volatile T value_;$/;"	m	class:muduo::detail::AtomicIntegerT
value_	thread/Singleton.h	/^  static T*             value_;$/;"	m	class:muduo::Singleton
value_	thread/Singleton.h	/^T* Singleton<T>::value_ = NULL;$/;"	m	class:muduo::Singleton
value_	thread/test/Counter.cc	/^  int64_t value_;$/;"	m	class:Counter	file:
value_type	basic/uint.h	/^  typedef std::vector<uint32_t> value_type;$/;"	t	class:UnsignedInt
value_type	string/StringEager.h	/^  typedef char          value_type;$/;"	t	class:muduo::StringEager
value_type	string/StringSso.h	/^  typedef char          value_type;$/;"	t	class:muduo::StringSso
values	puzzle/Einstein.java	/^        static IntVar[] values = getValues(values());$/;"	f	class:Einstein.Cigar
values	puzzle/Einstein.java	/^        static IntVar[] values = getValues(values());$/;"	f	class:Einstein.Color
values	puzzle/Einstein.java	/^        static IntVar[] values = getValues(values());$/;"	f	class:Einstein.Drink
values	puzzle/Einstein.java	/^        static IntVar[] values = getValues(values());$/;"	f	class:Einstein.Nation
values	puzzle/Einstein.java	/^        static IntVar[] values = getValues(values());$/;"	f	class:Einstein.Pet
velocity	puzzle/nbody.cc	/^  Vector3 velocity;$/;"	m	struct:Planet	file:
version1	thread/test/Factory.cc	/^namespace version1$/;"	n	file:
version2	thread/test/Factory.cc	/^namespace version2$/;"	n	file:
version3	thread/test/Factory.cc	/^namespace version3$/;"	n	file:
version4	thread/test/Factory.cc	/^namespace version4$/;"	n	file:
vx	puzzle/nbody.c	/^  double vx, vy, vz;$/;"	m	struct:planet	file:
vy	puzzle/nbody.c	/^  double vx, vy, vz;$/;"	m	struct:planet	file:
vz	puzzle/nbody.c	/^  double vx, vy, vz;$/;"	m	struct:planet	file:
wait	thread/Condition.h	/^  void wait()$/;"	f	class:muduo::Condition
wait	thread/CountDownLatch.h	/^  void wait()$/;"	f	class:muduo::CountDownLatch
wait	thread/test/Waiter_test.cc	/^  void wait()$/;"	f	class:WaiterInMuduo
waitForSeconds	thread/Condition.h	/^  bool waitForSeconds(int seconds)$/;"	f	class:muduo::Condition
waitingQueue	java/bankqueue/Bank.java	/^    private Queue<Customer> waitingQueue = new LinkedList<Customer>();$/;"	f	class:Bank	file:
wakeup	reactor/s03/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s04/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s05/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s06/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s07/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s08/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s09/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s10/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s11/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s12/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeup	reactor/s13/EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:EventLoop
wakeupChannel_	reactor/s03/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s04/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s05/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s06/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s07/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s08/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s09/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s10/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s11/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s12/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupChannel_	reactor/s13/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s03/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s04/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s05/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s06/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s07/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s08/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s09/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s10/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s11/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s12/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
wakeupFd_	reactor/s13/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::EventLoop
weakDeleteCallback	thread/test/Factory.cc	/^  static void weakDeleteCallback(const boost::weak_ptr<StockFactory>& wkFactory,$/;"	f	class:StockFactory	file:
weekDay	datetime/Date.h	/^  int weekDay() const$/;"	f	class:muduo::Date
what	thread/Exception.cc	/^const char* Exception::what() const throw()$/;"	f	class:Exception
wkTid_	thread/Thread.cc	/^  boost::weak_ptr<pid_t> wkTid_;$/;"	m	struct:__anon4::ThreadData	file:
writableBytes	reactor/s07/Buffer.h	/^  size_t writableBytes() const$/;"	f	class:muduo::Buffer
writableBytes	reactor/s08/Buffer.h	/^  size_t writableBytes() const$/;"	f	class:muduo::Buffer
writableBytes	reactor/s09/Buffer.h	/^  size_t writableBytes() const$/;"	f	class:muduo::Buffer
writableBytes	reactor/s10/Buffer.h	/^  size_t writableBytes() const$/;"	f	class:muduo::Buffer
writableBytes	reactor/s11/Buffer.h	/^  size_t writableBytes() const$/;"	f	class:muduo::Buffer
writableBytes	reactor/s12/Buffer.h	/^  size_t writableBytes() const$/;"	f	class:muduo::Buffer
writableBytes	reactor/s13/Buffer.h	/^  size_t writableBytes() const$/;"	f	class:muduo::Buffer
write	esort/sort03.cc	/^  void write(int batch)$/;"	f	class:Task
write	esort/sort04.cc	/^  void write(int batch)$/;"	f	class:Task
write	logging/LogFile.cc	/^  size_t write(const char* logline, size_t len)$/;"	f	class:LogFile::File	file:
write	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture write(Object message) {$/;"	m	class:MockChannel
write	protorpc/muduo/rpc/test/MockChannel.java	/^    public ChannelFuture write(Object message, SocketAddress remoteAddress) {$/;"	m	class:MockChannel
write	tpc/Socket.cc	/^int Socket::write(const void* buf, int len)$/;"	f	class:Socket
writeCallback_	reactor/s01/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s02/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s03/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s04/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s05/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s06/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s07/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s08/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s09/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s10/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s11/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s12/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCallback_	reactor/s13/Channel.h	/^  EventCallback writeCallback_;$/;"	m	class:muduo::Channel
writeCompleteCallback_	reactor/s09/TcpConnection.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpConnection
writeCompleteCallback_	reactor/s09/TcpServer.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpServer
writeCompleteCallback_	reactor/s10/TcpConnection.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpConnection
writeCompleteCallback_	reactor/s10/TcpServer.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpServer
writeCompleteCallback_	reactor/s11/TcpConnection.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpConnection
writeCompleteCallback_	reactor/s11/TcpServer.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpServer
writeCompleteCallback_	reactor/s12/TcpClient.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpClient
writeCompleteCallback_	reactor/s12/TcpConnection.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpConnection
writeCompleteCallback_	reactor/s12/TcpServer.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpServer
writeCompleteCallback_	reactor/s13/TcpClient.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpClient
writeCompleteCallback_	reactor/s13/TcpConnection.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpConnection
writeCompleteCallback_	reactor/s13/TcpServer.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::TcpServer
writeLine	esort/sort00.cc	/^  void writeLine(const string& line)$/;"	f	class:OutputFile
writeLine	esort/sort01.cc	/^  void writeLine(const string& line)$/;"	f	class:OutputFile
writeLine	esort/sort02.cc	/^  void writeLine(const string& line)$/;"	f	class:OutputFile
writeLine	esort/sort03.cc	/^  void writeLine(const string& line)$/;"	f	class:OutputFile
writeRecord	esort/sort02.cc	/^  void writeRecord(char (&record)[kRecordSize])$/;"	f	class:OutputFile
writeRecord	esort/sort03.cc	/^  void writeRecord(char (&record)[kRecordSize])$/;"	f	class:OutputFile
writeRecord	esort/sort04.cc	/^  void writeRecord(char (&record)[kRecordSize])$/;"	f	class:OutputFile
writeRecord	esort/sort10.cc	/^  void writeRecord(int64_t x)$/;"	f	class:OutputFile
writeRecord	esort/sort11.cc	/^  void writeRecord(int64_t x)$/;"	f	class:OutputFile
writeRecord	esort/sort12.cc	/^  void writeRecord(ElementType x)$/;"	f	class:OutputFile
writeReplace	protorpc/echo/EchoProto.java	/^    protected Object writeReplace() throws java.io.ObjectStreamException {$/;"	m	class:EchoProto.EchoRequest
writeReplace	protorpc/echo/EchoProto.java	/^    protected Object writeReplace() throws java.io.ObjectStreamException {$/;"	m	class:EchoProto.EchoResponse
writeReplace	protorpc/muduo/codec/tests/QueryProtos.java	/^    protected Object writeReplace() throws java.io.ObjectStreamException {$/;"	m	class:QueryProtos.Answer
writeReplace	protorpc/muduo/codec/tests/QueryProtos.java	/^    protected Object writeReplace() throws java.io.ObjectStreamException {$/;"	m	class:QueryProtos.Empty
writeReplace	protorpc/muduo/codec/tests/QueryProtos.java	/^    protected Object writeReplace() throws java.io.ObjectStreamException {$/;"	m	class:QueryProtos.Query
writeReplace	protorpc/muduo/rpc/proto/RpcProto.java	/^    protected Object writeReplace() throws java.io.ObjectStreamException {$/;"	m	class:RpcProto.RpcMessage
writeReplace	protorpc/sudoku/Sudoku.java	/^    protected java.lang.Object writeReplace()$/;"	m	class:Sudoku.SudokuRequest
writeReplace	protorpc/sudoku/Sudoku.java	/^    protected java.lang.Object writeReplace()$/;"	m	class:Sudoku.SudokuResponse
writeTo	protorpc/echo/EchoProto.java	/^    public void writeTo(com.google.protobuf.CodedOutputStream output)$/;"	m	class:EchoProto.EchoRequest
writeTo	protorpc/echo/EchoProto.java	/^    public void writeTo(com.google.protobuf.CodedOutputStream output)$/;"	m	class:EchoProto.EchoResponse
writeTo	protorpc/muduo/codec/tests/QueryProtos.java	/^    public void writeTo(com.google.protobuf.CodedOutputStream output)$/;"	m	class:QueryProtos.Answer
writeTo	protorpc/muduo/codec/tests/QueryProtos.java	/^    public void writeTo(com.google.protobuf.CodedOutputStream output)$/;"	m	class:QueryProtos.Empty
writeTo	protorpc/muduo/codec/tests/QueryProtos.java	/^    public void writeTo(com.google.protobuf.CodedOutputStream output)$/;"	m	class:QueryProtos.Query
writeTo	protorpc/muduo/rpc/proto/RpcProto.java	/^    public void writeTo(com.google.protobuf.CodedOutputStream output)$/;"	m	class:RpcProto.RpcMessage
writeTo	protorpc/sudoku/Sudoku.java	/^    public void writeTo(com.google.protobuf.CodedOutputStream output)$/;"	m	class:Sudoku.SudokuRequest
writeTo	protorpc/sudoku/Sudoku.java	/^    public void writeTo(com.google.protobuf.CodedOutputStream output)$/;"	m	class:Sudoku.SudokuResponse
write_allocator_	pingpong/asio/client.cpp	/^  handler_allocator write_allocator_;$/;"	m	class:session	file:
write_allocator_	pingpong/asio/server.cpp	/^  handler_allocator write_allocator_;$/;"	m	class:session	file:
write_data_	pingpong/asio/client.cpp	/^  char* write_data_;$/;"	m	class:session	file:
write_data_	pingpong/asio/server.cpp	/^  char* write_data_;$/;"	m	class:session	file:
write_n	tpc/netcat.cc	/^int write_n(int fd, const void* buf, int length)$/;"	f
writerIndex_	reactor/s07/Buffer.h	/^  size_t writerIndex_;$/;"	m	class:muduo::Buffer
writerIndex_	reactor/s08/Buffer.h	/^  size_t writerIndex_;$/;"	m	class:muduo::Buffer
writerIndex_	reactor/s09/Buffer.h	/^  size_t writerIndex_;$/;"	m	class:muduo::Buffer
writerIndex_	reactor/s10/Buffer.h	/^  size_t writerIndex_;$/;"	m	class:muduo::Buffer
writerIndex_	reactor/s11/Buffer.h	/^  size_t writerIndex_;$/;"	m	class:muduo::Buffer
writerIndex_	reactor/s12/Buffer.h	/^  size_t writerIndex_;$/;"	m	class:muduo::Buffer
writerIndex_	reactor/s13/Buffer.h	/^  size_t writerIndex_;$/;"	m	class:muduo::Buffer
writes	pingpong/libevent/bench.c	/^static int count, writes, fired;$/;"	v	file:
writtenBytes	logging/LogFile.cc	/^  size_t writtenBytes() const { return writtenBytes_; }$/;"	f	class:LogFile::File
writtenBytes_	logging/LogFile.cc	/^  size_t writtenBytes_;$/;"	m	class:LogFile::File	file:
x	puzzle/nbody.c	/^  double x, y, z;$/;"	m	struct:planet	file:
x	puzzle/nbody.cc	/^  double x;$/;"	m	struct:Vector3	file:
x	thread/test/Fork_test.cc	/^__thread int x = 0;$/;"	v
x_	thread/test/RequestInventory_test.cc	/^  int x_;$/;"	m	class:Request	file:
x_	thread/test/RequestInventory_test2.cc	/^  int x_;$/;"	m	class:Request	file:
x_	thread/test/Thread_test.cc	/^  double x_;$/;"	m	class:Foo	file:
xmask	puzzle/latin_square.cc	/^uint32_t xmask[10], ymask[10];$/;"	v
y	puzzle/nbody.c	/^  double x, y, z;$/;"	m	struct:planet	file:
y	puzzle/nbody.cc	/^  double y;$/;"	m	struct:Vector3	file:
year	datetime/Date.h	/^    int year; \/\/ [1900..2500]$/;"	m	struct:muduo::Date::YearMonthDay
year	datetime/Date.h	/^  int year() const$/;"	f	class:muduo::Date
yearMonthDay	datetime/Date.cc	/^Date::YearMonthDay Date::yearMonthDay() const$/;"	f	class:Date
ymask	puzzle/latin_square.cc	/^uint32_t xmask[10], ymask[10];$/;"	v
z	puzzle/nbody.c	/^  double x, y, z;$/;"	m	struct:planet	file:
z	puzzle/nbody.cc	/^  double z;$/;"	m	struct:Vector3	file:
zero	logging/LogStream.cc	/^const char* zero = digits + 9;$/;"	m	namespace:muduo::detail	file:
zero	thread/test/SignalSlot_test.cc	/^void Foo::zero()$/;"	f	class:Foo
zero	thread/test/WeakCallback_test.cc	/^void Foo::zero()$/;"	f	class:Foo
zeroc	thread/test/SignalSlot_test.cc	/^void Foo::zeroc() const$/;"	f	class:Foo
zeroc	thread/test/WeakCallback_test.cc	/^void Foo::zeroc() const$/;"	f	class:Foo
~AsyncLoggingDoubleBuffering	logging/AsyncLoggingDoubleBuffering.h	/^  ~AsyncLoggingDoubleBuffering()$/;"	f	class:muduo::AsyncLoggingDoubleBuffering
~AsyncLoggingT	logging/AsyncLoggingQueue.h	/^  ~AsyncLoggingT()$/;"	f	class:muduo::AsyncLoggingT
~Callback	protobuf/dispatcher.cc	/^  virtual ~Callback() {};$/;"	f	class:Callback
~Channel	reactor/s06/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
~Channel	reactor/s07/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
~Channel	reactor/s08/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
~Channel	reactor/s09/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
~Channel	reactor/s10/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
~Channel	reactor/s11/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
~Channel	reactor/s12/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
~Channel	reactor/s13/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
~Condition	thread/Condition.h	/^  ~Condition()$/;"	f	class:muduo::Condition
~Connector	reactor/s11/Connector.cc	/^Connector::~Connector()$/;"	f	class:Connector
~Connector	reactor/s12/Connector.cc	/^Connector::~Connector()$/;"	f	class:Connector
~Connector	reactor/s13/Connector.cc	/^Connector::~Connector()$/;"	f	class:Connector
~Destruct	thread/test/Singleton_test.cc	/^  ~Destruct()$/;"	f	class:Destruct
~EPoller	reactor/s13/EPoller.cc	/^EPoller::~EPoller()$/;"	f	class:EPoller
~EventLoop	reactor/s00/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s01/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s02/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s03/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s04/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s05/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s06/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s07/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s08/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s09/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s10/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s11/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s12/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoop	reactor/s13/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
~EventLoopThread	reactor/s03/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s04/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s05/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s06/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s07/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s08/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s09/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s10/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s11/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s12/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThread	reactor/s13/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
~EventLoopThreadPool	reactor/s10/EventLoopThreadPool.cc	/^EventLoopThreadPool::~EventLoopThreadPool()$/;"	f	class:EventLoopThreadPool
~EventLoopThreadPool	reactor/s11/EventLoopThreadPool.cc	/^EventLoopThreadPool::~EventLoopThreadPool()$/;"	f	class:EventLoopThreadPool
~EventLoopThreadPool	reactor/s12/EventLoopThreadPool.cc	/^EventLoopThreadPool::~EventLoopThreadPool()$/;"	f	class:EventLoopThreadPool
~EventLoopThreadPool	reactor/s13/EventLoopThreadPool.cc	/^EventLoopThreadPool::~EventLoopThreadPool()$/;"	f	class:EventLoopThreadPool
~Exception	thread/Exception.cc	/^Exception::~Exception() throw ()$/;"	f	class:Exception
~File	datetime/TimeZone.cc	/^  ~File()$/;"	f	class:muduo::detail::File
~File	logging/LogFile.cc	/^  ~File()$/;"	f	class:LogFile::File
~FixedBuffer	logging/LogStream.h	/^  ~FixedBuffer()$/;"	f	class:muduo::detail::FixedBuffer
~GlobalObject	thread/test/ExitDeadLock.cc	/^  ~GlobalObject()$/;"	f	class:GlobalObject
~InputFile	esort/sort00.cc	/^  ~InputFile()$/;"	f	class:InputFile
~InputFile	esort/sort01.cc	/^  ~InputFile()$/;"	f	class:InputFile
~InputFile	esort/sort02.cc	/^  ~InputFile()$/;"	f	class:InputFile
~InputFile	esort/sort03.cc	/^  ~InputFile()$/;"	f	class:InputFile
~InputFile	esort/sort04.cc	/^  ~InputFile()$/;"	f	class:InputFile
~LogFile	logging/LogFile.cc	/^LogFile::~LogFile()$/;"	f	class:LogFile
~Logger	logging/Logging.cc	/^Logger::~Logger()$/;"	f	class:Logger
~MutexLock	thread/Mutex.h	/^  ~MutexLock()$/;"	f	class:muduo::MutexLock
~MutexLockGuard	thread/Mutex.h	/^  ~MutexLockGuard()$/;"	f	class:muduo::MutexLockGuard
~Observer	thread/test/Observer.cc	/^Observer::~Observer()$/;"	f	class:Observer
~Observer	thread/test/Observer_safe.cc	/^Observer::~Observer()$/;"	f	class:Observer
~OutputFile	esort/sort00.cc	/^  ~OutputFile()$/;"	f	class:OutputFile
~OutputFile	esort/sort01.cc	/^  ~OutputFile()$/;"	f	class:OutputFile
~OutputFile	esort/sort02.cc	/^  ~OutputFile()$/;"	f	class:OutputFile
~OutputFile	esort/sort03.cc	/^  ~OutputFile()$/;"	f	class:OutputFile
~OutputFile	esort/sort04.cc	/^  ~OutputFile()$/;"	f	class:OutputFile
~OutputFile	esort/sort10.cc	/^  ~OutputFile()$/;"	f	class:OutputFile
~OutputFile	esort/sort11.cc	/^  ~OutputFile()$/;"	f	class:OutputFile
~OutputFile	esort/sort12.cc	/^  ~OutputFile()$/;"	f	class:OutputFile
~Poller	reactor/s01/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s02/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s03/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s04/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s05/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s06/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s07/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s08/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s09/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s10/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s11/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s12/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Poller	reactor/s13/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
~Request	thread/test/MutualDeadLock.cc	/^  ~Request() __attribute__ ((noinline))$/;"	f	class:Request
~Request	thread/test/RequestInventory_test.cc	/^  ~Request() __attribute__ ((noinline))$/;"	f	class:Request
~Request	thread/test/RequestInventory_test2.cc	/^  ~Request()$/;"	f	class:Request
~Signal	thread/SignalSlot.h	/^  ~Signal()$/;"	f	class:muduo::Signal
~SlotImpl	thread/SignalSlot.h	/^  ~SlotImpl()$/;"	f	struct:muduo::detail::SlotImpl
~Socket	reactor/s04/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s05/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s06/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s07/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s08/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s09/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s10/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s11/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s12/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	reactor/s13/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	tpc/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
~Stock	thread/test/Factory.cc	/^  ~Stock()$/;"	f	class:Stock
~String	string/StringTrivial.h	/^  ~String()$/;"	f	class:trivial2::String
~StringEager	string/StringEager.h	/^  ~StringEager()$/;"	f	class:muduo::StringEager
~Task	esort/sort03.cc	/^  ~Task()$/;"	f	class:Task
~Task	esort/sort04.cc	/^  ~Task()$/;"	f	class:Task
~TcpClient	reactor/s12/TcpClient.cc	/^TcpClient::~TcpClient()$/;"	f	class:TcpClient
~TcpClient	reactor/s13/TcpClient.cc	/^TcpClient::~TcpClient()$/;"	f	class:TcpClient
~TcpConnection	reactor/s05/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpConnection	reactor/s06/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpConnection	reactor/s07/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpConnection	reactor/s08/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpConnection	reactor/s09/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpConnection	reactor/s10/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpConnection	reactor/s11/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpConnection	reactor/s12/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpConnection	reactor/s13/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
~TcpServer	reactor/s05/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TcpServer	reactor/s06/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TcpServer	reactor/s07/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TcpServer	reactor/s08/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TcpServer	reactor/s09/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TcpServer	reactor/s10/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TcpServer	reactor/s11/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TcpServer	reactor/s12/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~TcpServer	reactor/s13/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
~Test	thread/test/SingletonThreadLocal_test.cc	/^  ~Test()$/;"	f	class:Test
~Test	thread/test/Singleton_test.cc	/^  ~Test()$/;"	f	class:Test
~Test	thread/test/ThreadLocalSingleton_test.cc	/^  ~Test()$/;"	f	class:Test
~Test	thread/test/ThreadLocal_test.cc	/^  ~Test()$/;"	f	class:Test
~Thread	thread/Thread.cc	/^Thread::~Thread()$/;"	f	class:Thread
~ThreadLocal	thread/ThreadLocal.h	/^  ~ThreadLocal()$/;"	f	class:muduo::ThreadLocal
~ThreadPool	thread/ThreadPool.cc	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool
~TimerQueue	reactor/s02/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s03/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s04/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s05/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s06/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s07/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s08/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s09/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s10/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s11/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s12/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~TimerQueue	reactor/s13/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
~Waiter	thread/test/Waiter_test.cc	/^  ~Waiter()$/;"	f	class:Waiter
~client	pingpong/asio/client.cpp	/^  ~client()$/;"	f	class:client
~counted_ptr	basic/counted_ptr.h	/^  ~counted_ptr()$/;"	f	class:counted_ptr
~session	pingpong/asio/client.cpp	/^  ~session()$/;"	f	class:session
~session	pingpong/asio/server.cpp	/^  ~session()$/;"	f	class:session
